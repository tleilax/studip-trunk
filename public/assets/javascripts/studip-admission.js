/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "Rdzv");
/******/ })
/************************************************************************/
/******/ ({

/***/ "Rdzv":
/*!*********************************************************!*\
  !*** ./resources/assets/javascripts/entry-admission.js ***!
  \*********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _jquery_jstree_jquery_jstree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jquery/jstree/jquery.jstree.js */ \"h1RJ\");\n/* harmony import */ var _jquery_jstree_jquery_jstree_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jquery_jstree_jquery_jstree_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _bootstrap_admission_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bootstrap/admission.js */ \"qd03\");\n/* harmony import */ var _bootstrap_admission_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_bootstrap_admission_js__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n//# sourceURL=webpack:///./resources/assets/javascripts/entry-admission.js?");

/***/ }),

/***/ "h1RJ":
/*!*********************************************************************!*\
  !*** ./resources/assets/javascripts/jquery/jstree/jquery.jstree.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n * jsTree 1.0-rc3\n * http://jstree.com/\n *\n * Copyright (c) 2010 Ivan Bozhanov (vakata.com)\n *\n * Licensed same as jquery - under the terms of either the MIT License or the GPL Version 2 License\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * $Date: 2011-02-09 01:17:14 +0200 (ср, 09 февр 2011) $\n * $Revision: 236 $\n */\n\n/*jslint browser: true, onevar: true, undef: true, bitwise: true, strict: true */\n\n/*global window : false, clearInterval: false, clearTimeout: false, document: false, setInterval: false, setTimeout: false, jQuery: false, navigator: false, XSLTProcessor: false, DOMParser: false, XMLSerializer: false, ActiveXObject: false */\n // top wrapper to prevent multiple inclusion (is this OK?)\n\n(function () {\n  if (jQuery && jQuery.jstree) {\n    return;\n  }\n\n  var is_ie6 = false,\n      is_ie7 = false,\n      is_ff2 = false;\n  /* \n   * jsTree core\n   */\n\n  (function ($) {\n    // Common functions not related to jsTree \n    // decided to move them to a `vakata` \"namespace\"\n    $.vakata = {}; // CSS related functions\n\n    $.vakata.css = {\n      get_css: function get_css(rule_name, delete_flag, sheet) {\n        rule_name = rule_name.toLowerCase();\n        var css_rules = sheet.cssRules || sheet.rules,\n            j = 0;\n\n        do {\n          if (css_rules.length && j > css_rules.length + 5) {\n            return false;\n          }\n\n          if (css_rules[j].selectorText && css_rules[j].selectorText.toLowerCase() == rule_name) {\n            if (delete_flag === true) {\n              if (sheet.removeRule) {\n                sheet.removeRule(j);\n              }\n\n              if (sheet.deleteRule) {\n                sheet.deleteRule(j);\n              }\n\n              return true;\n            } else {\n              return css_rules[j];\n            }\n          }\n        } while (css_rules[++j]);\n\n        return false;\n      },\n      add_css: function add_css(rule_name, sheet) {\n        if ($.jstree.css.get_css(rule_name, false, sheet)) {\n          return false;\n        }\n\n        if (sheet.insertRule) {\n          sheet.insertRule(rule_name + ' { }', 0);\n        } else {\n          sheet.addRule(rule_name, null, 0);\n        }\n\n        return $.vakata.css.get_css(rule_name);\n      },\n      remove_css: function remove_css(rule_name, sheet) {\n        return $.vakata.css.get_css(rule_name, true, sheet);\n      },\n      add_sheet: function add_sheet(opts) {\n        var tmp = false,\n            is_new = true;\n\n        if (opts.str) {\n          if (opts.title) {\n            tmp = $(\"style[id='\" + opts.title + \"-stylesheet']\")[0];\n          }\n\n          if (tmp) {\n            is_new = false;\n          } else {\n            tmp = document.createElement(\"style\");\n            tmp.setAttribute('type', \"text/css\");\n\n            if (opts.title) {\n              tmp.setAttribute(\"id\", opts.title + \"-stylesheet\");\n            }\n          }\n\n          if (tmp.styleSheet) {\n            if (is_new) {\n              document.getElementsByTagName(\"head\")[0].appendChild(tmp);\n              tmp.styleSheet.cssText = opts.str;\n            } else {\n              tmp.styleSheet.cssText = tmp.styleSheet.cssText + \" \" + opts.str;\n            }\n          } else {\n            tmp.appendChild(document.createTextNode(opts.str));\n            document.getElementsByTagName(\"head\")[0].appendChild(tmp);\n          }\n\n          return tmp.sheet || tmp.styleSheet;\n        }\n\n        if (opts.url) {\n          if (document.createStyleSheet) {\n            try {\n              tmp = document.createStyleSheet(opts.url);\n            } catch (e) {}\n          } else {\n            tmp = document.createElement('link');\n            tmp.rel = 'stylesheet';\n            tmp.type = 'text/css';\n            tmp.media = \"all\";\n            tmp.href = opts.url;\n            document.getElementsByTagName(\"head\")[0].appendChild(tmp);\n            return tmp.styleSheet;\n          }\n        }\n      }\n    }; // private variables \n\n    var instances = [],\n        // instance array (used by $.jstree.reference/create/focused)\n    focused_instance = -1,\n        // the index in the instance array of the currently focused instance\n    plugins = {},\n        // list of included plugins\n    prepared_move = {}; // for the move_node function\n    // jQuery plugin wrapper (thanks to jquery UI widget function)\n\n    $.fn.jstree = function (settings) {\n      var isMethodCall = typeof settings == 'string',\n          // is this a method call like $().jstree(\"open_node\")\n      args = Array.prototype.slice.call(arguments, 1),\n          returnValue = this; // if a method call execute the method on all selected instances\n\n      if (isMethodCall) {\n        if (settings.substring(0, 1) == '_') {\n          return returnValue;\n        }\n\n        this.each(function () {\n          var instance = instances[$.data(this, \"jstree_instance_id\")],\n              methodValue = instance && $.isFunction(instance[settings]) ? instance[settings].apply(instance, args) : instance;\n\n          if (typeof methodValue !== \"undefined\" && (settings.indexOf(\"is_\") === 0 || methodValue !== true && methodValue !== false)) {\n            returnValue = methodValue;\n            return false;\n          }\n        });\n      } else {\n        this.each(function () {\n          // extend settings and allow for multiple hashes and $.data\n          var instance_id = $.data(this, \"jstree_instance_id\"),\n              a = [],\n              b = settings ? $.extend({}, true, settings) : {},\n              c = $(this),\n              s = false,\n              t = [];\n          a = a.concat(args);\n\n          if (c.data(\"jstree\")) {\n            a.push(c.data(\"jstree\"));\n          }\n\n          b = a.length ? $.extend.apply(null, [true, b].concat(a)) : b; // if an instance already exists, destroy it first\n\n          if (typeof instance_id !== \"undefined\" && instances[instance_id]) {\n            instances[instance_id].destroy();\n          } // push a new empty object to the instances array\n\n\n          instance_id = parseInt(instances.push({}), 10) - 1; // store the jstree instance id to the container element\n\n          $.data(this, \"jstree_instance_id\", instance_id); // clean up all plugins\n\n          b.plugins = $.isArray(b.plugins) ? b.plugins : $.jstree.defaults.plugins.slice();\n          b.plugins.unshift(\"core\"); // only unique plugins\n\n          b.plugins = b.plugins.sort().join(\",,\").replace(/(,|^)([^,]+)(,,\\2)+(,|$)/g, \"$1$2$4\").replace(/,,+/g, \",\").replace(/,$/, \"\").split(\",\"); // extend defaults with passed data\n\n          s = $.extend(true, {}, $.jstree.defaults, b);\n          s.plugins = b.plugins;\n          $.each(plugins, function (i, val) {\n            if ($.inArray(i, s.plugins) === -1) {\n              s[i] = null;\n              delete s[i];\n            } else {\n              t.push(i);\n            }\n          });\n          s.plugins = t; // push the new object to the instances array (at the same time set the default classes to the container) and init\n\n          instances[instance_id] = new $.jstree._instance(instance_id, $(this).addClass(\"jstree jstree-\" + instance_id), s); // init all activated plugins for this instance\n\n          $.each(instances[instance_id]._get_settings().plugins, function (i, val) {\n            instances[instance_id].data[val] = {};\n          });\n          $.each(instances[instance_id]._get_settings().plugins, function (i, val) {\n            if (plugins[val]) {\n              plugins[val].__init.apply(instances[instance_id]);\n            }\n          }); // initialize the instance\n\n          setTimeout(function () {\n            if (instances[instance_id]) {\n              instances[instance_id].init();\n            }\n          }, 0);\n        });\n      } // return the jquery selection (or if it was a method call that returned a value - the returned value)\n\n\n      return returnValue;\n    }; // object to store exposed functions and objects\n\n\n    $.jstree = {\n      defaults: {\n        plugins: []\n      },\n      _focused: function _focused() {\n        return instances[focused_instance] || null;\n      },\n      _reference: function _reference(needle) {\n        // get by instance id\n        if (instances[needle]) {\n          return instances[needle];\n        } // get by DOM (if still no luck - return null\n\n\n        var o = $(needle);\n\n        if (!o.length && typeof needle === \"string\") {\n          o = $(\"#\" + needle);\n        }\n\n        if (!o.length) {\n          return null;\n        }\n\n        return instances[o.closest(\".jstree\").data(\"jstree_instance_id\")] || null;\n      },\n      _instance: function _instance(index, container, settings) {\n        // for plugins to store data in\n        this.data = {\n          core: {}\n        };\n\n        this.get_settings = function () {\n          return $.extend(true, {}, settings);\n        };\n\n        this._get_settings = function () {\n          return settings;\n        };\n\n        this.get_index = function () {\n          return index;\n        };\n\n        this.get_container = function () {\n          return container;\n        };\n\n        this.get_container_ul = function () {\n          return container.children(\"ul:eq(0)\");\n        };\n\n        this._set_settings = function (s) {\n          settings = $.extend(true, {}, settings, s);\n        };\n      },\n      _fn: {},\n      plugin: function plugin(pname, pdata) {\n        pdata = $.extend({}, {\n          __init: $.noop,\n          __destroy: $.noop,\n          _fn: {},\n          defaults: false\n        }, pdata);\n        plugins[pname] = pdata;\n        $.jstree.defaults[pname] = pdata.defaults;\n        $.each(pdata._fn, function (i, val) {\n          val.plugin = pname;\n          val.old = $.jstree._fn[i];\n\n          $.jstree._fn[i] = function () {\n            var rslt,\n                func = val,\n                args = Array.prototype.slice.call(arguments),\n                evnt = new $.Event(\"before.jstree\"),\n                rlbk = false;\n\n            if (this.data.core.locked === true && i !== \"unlock\" && i !== \"is_locked\") {\n              return;\n            } // Check if function belongs to the included plugins of this instance\n\n\n            do {\n              if (func && func.plugin && $.inArray(func.plugin, this._get_settings().plugins) !== -1) {\n                break;\n              }\n\n              func = func.old;\n            } while (func);\n\n            if (!func) {\n              return;\n            } // context and function to trigger events, then finally call the function\n\n\n            if (i.indexOf(\"_\") === 0) {\n              rslt = func.apply(this, args);\n            } else {\n              rslt = this.get_container().triggerHandler(evnt, {\n                \"func\": i,\n                \"inst\": this,\n                \"args\": args,\n                \"plugin\": func.plugin\n              });\n\n              if (rslt === false) {\n                return;\n              }\n\n              if (typeof rslt !== \"undefined\") {\n                args = rslt;\n              }\n\n              rslt = func.apply($.extend({}, this, {\n                __callback: function __callback(data) {\n                  this.get_container().triggerHandler(i + '.jstree', {\n                    \"inst\": this,\n                    \"args\": args,\n                    \"rslt\": data,\n                    \"rlbk\": rlbk\n                  });\n                },\n                __rollback: function __rollback() {\n                  rlbk = this.get_rollback();\n                  return rlbk;\n                },\n                __call_old: function __call_old(replace_arguments) {\n                  return func.old.apply(this, replace_arguments ? Array.prototype.slice.call(arguments, 1) : args);\n                }\n              }), args);\n            } // return the result\n\n\n            return rslt;\n          };\n\n          $.jstree._fn[i].old = val.old;\n          $.jstree._fn[i].plugin = pname;\n        });\n      },\n      rollback: function rollback(rb) {\n        if (rb) {\n          if (!$.isArray(rb)) {\n            rb = [rb];\n          }\n\n          $.each(rb, function (i, val) {\n            instances[val.i].set_rollback(val.h, val.d);\n          });\n        }\n      }\n    }; // set the prototype for all instances\n\n    $.jstree._fn = $.jstree._instance.prototype = {}; // load the css when DOM is ready\n\n    $(function () {\n      // code is copied from jQuery ($.browser is deprecated + there is a bug in IE)\n      var u = navigator.userAgent.toLowerCase(),\n          v = (u.match(/.+?(?:rv|it|ra|ie)[\\/: ]([\\d.]+)/) || [0, '0'])[1],\n          css_string = '' + '.jstree ul, .jstree li { display:block; margin:0 0 0 0; padding:0 0 0 0; list-style-type:none; } ' + '.jstree li { display:block; min-height:18px; line-height:18px; white-space:nowrap; margin-left:18px; min-width:18px; } ' + '.jstree-rtl li { margin-left:0; margin-right:18px; } ' + '.jstree > ul > li { margin-left:0px; } ' + '.jstree-rtl > ul > li { margin-right:0px; } ' + '.jstree ins { display:inline-block; text-decoration:none; width:18px; height:18px; margin:0 0 0 0; padding:0; } ' + '.jstree a { display:inline-block; line-height:16px; height:16px; color:black; white-space:nowrap; text-decoration:none; padding:1px 2px; margin:0; } ' + '.jstree a:focus { outline: none; } ' + '.jstree a > ins { height:16px; width:16px; } ' + '.jstree a > .jstree-icon { margin-right:3px; } ' + '.jstree-rtl a > .jstree-icon { margin-left:3px; margin-right:0; } ' + 'li.jstree-open > ul { display:block; } ' + 'li.jstree-closed > ul { display:none; } '; // Correct IE 6 (does not support the > CSS selector)\n\n      if (/msie/.test(u) && parseInt(v, 10) == 6) {\n        is_ie6 = true; // fix image flicker and lack of caching\n\n        try {\n          document.execCommand(\"BackgroundImageCache\", false, true);\n        } catch (err) {}\n\n        css_string += '' + '.jstree li { height:18px; margin-left:0; margin-right:0; } ' + '.jstree li li { margin-left:18px; } ' + '.jstree-rtl li li { margin-left:0px; margin-right:18px; } ' + 'li.jstree-open ul { display:block; } ' + 'li.jstree-closed ul { display:none !important; } ' + '.jstree li a { display:inline; border-width:0 !important; padding:0px 2px !important; } ' + '.jstree li a ins { height:16px; width:16px; margin-right:3px; } ' + '.jstree-rtl li a ins { margin-right:0px; margin-left:3px; } ';\n      } // Correct IE 7 (shifts anchor nodes onhover)\n\n\n      if (/msie/.test(u) && parseInt(v, 10) == 7) {\n        is_ie7 = true;\n        css_string += '.jstree li a { border-width:0 !important; padding:0px 2px !important; } ';\n      } // correct ff2 lack of display:inline-block\n\n\n      if (!/compatible/.test(u) && /mozilla/.test(u) && parseFloat(v, 10) < 1.9) {\n        is_ff2 = true;\n        css_string += '' + '.jstree ins { display:-moz-inline-box; } ' + '.jstree li { line-height:12px; } ' + // WHY??\n        '.jstree a { display:-moz-inline-box; } ' + '.jstree .jstree-no-icons .jstree-checkbox { display:-moz-inline-stack !important; } ';\n        /* this shouldn't be here as it is theme specific */\n      } // the default stylesheet\n\n\n      $.vakata.css.add_sheet({\n        str: css_string,\n        title: \"jstree\"\n      });\n    }); // core functions (open, close, create, update, delete)\n\n    $.jstree.plugin(\"core\", {\n      __init: function __init() {\n        this.data.core.locked = false;\n        this.data.core.to_open = this.get_settings().core.initially_open;\n        this.data.core.to_load = this.get_settings().core.initially_load;\n      },\n      defaults: {\n        html_titles: false,\n        animation: 500,\n        initially_open: [],\n        initially_load: [],\n        open_parents: true,\n        notify_plugins: true,\n        rtl: false,\n        load_open: false,\n        strings: {\n          loading: \"Loading ...\",\n          new_node: \"New node\",\n          multiple_selection: \"Multiple selection\"\n        }\n      },\n      _fn: {\n        init: function init() {\n          this.set_focus();\n\n          if (this._get_settings().core.rtl) {\n            this.get_container().addClass(\"jstree-rtl\").css(\"direction\", \"rtl\");\n          }\n\n          this.get_container().html(\"<ul><li class='jstree-last jstree-leaf'><ins>&#160;</ins><a class='jstree-loading' href='#'><ins class='jstree-icon'>&#160;</ins>\" + this._get_string(\"loading\") + \"</a></li></ul>\");\n          this.data.core.li_height = this.get_container_ul().find(\"li.jstree-closed, li.jstree-leaf\").eq(0).height() || 18;\n          this.get_container().delegate(\"li > ins\", \"click.jstree\", $.proxy(function (event) {\n            var trgt = $(event.target); // if(trgt.is(\"ins\") && event.pageY - trgt.offset().top < this.data.core.li_height) { this.toggle_node(trgt); }\n\n            this.toggle_node(trgt);\n          }, this)).bind(\"mousedown.jstree\", $.proxy(function () {\n            this.set_focus(); // This used to be setTimeout(set_focus,0) - why?\n          }, this)).bind(\"dblclick.jstree\", function (event) {\n            var sel;\n\n            if (document.selection && document.selection.empty) {\n              document.selection.empty();\n            } else {\n              if (window.getSelection) {\n                sel = window.getSelection();\n\n                try {\n                  sel.removeAllRanges();\n                  sel.collapse();\n                } catch (err) {}\n              }\n            }\n          });\n\n          if (this._get_settings().core.notify_plugins) {\n            this.get_container().bind(\"load_node.jstree\", $.proxy(function (e, data) {\n              var o = this._get_node(data.rslt.obj),\n                  t = this;\n\n              if (o === -1) {\n                o = this.get_container_ul();\n              }\n\n              if (!o.length) {\n                return;\n              }\n\n              o.find(\"li\").each(function () {\n                var th = $(this);\n\n                if (th.data(\"jstree\")) {\n                  $.each(th.data(\"jstree\"), function (plugin, values) {\n                    if (t.data[plugin] && $.isFunction(t[\"_\" + plugin + \"_notify\"])) {\n                      t[\"_\" + plugin + \"_notify\"].call(t, th, values);\n                    }\n                  });\n                }\n              });\n            }, this));\n          }\n\n          if (this._get_settings().core.load_open) {\n            this.get_container().bind(\"load_node.jstree\", $.proxy(function (e, data) {\n              var o = this._get_node(data.rslt.obj),\n                  t = this;\n\n              if (o === -1) {\n                o = this.get_container_ul();\n              }\n\n              if (!o.length) {\n                return;\n              }\n\n              o.find(\"li.jstree-open:not(:has(ul))\").each(function () {\n                t.load_node(this, $.noop, $.noop);\n              });\n            }, this));\n          }\n\n          this.__callback();\n\n          this.load_node(-1, function () {\n            this.loaded();\n            this.reload_nodes();\n          });\n        },\n        destroy: function destroy() {\n          var i,\n              n = this.get_index(),\n              s = this._get_settings(),\n              _this = this;\n\n          $.each(s.plugins, function (i, val) {\n            try {\n              plugins[val].__destroy.apply(_this);\n            } catch (err) {}\n          });\n\n          this.__callback(); // set focus to another instance if this one is focused\n\n\n          if (this.is_focused()) {\n            for (i in instances) {\n              if (instances.hasOwnProperty(i) && i != n) {\n                instances[i].set_focus();\n                break;\n              }\n            }\n          } // if no other instance found\n\n\n          if (n === focused_instance) {\n            focused_instance = -1;\n          } // remove all traces of jstree in the DOM (only the ones set using jstree*) and cleans all events\n\n\n          this.get_container().unbind(\".jstree\").undelegate(\".jstree\").removeData(\"jstree_instance_id\").find(\"[class^='jstree']\").addBack().attr(\"class\", function () {\n            return this.className.replace(/jstree[^ ]*|$/ig, '');\n          });\n          $(document).unbind(\".jstree-\" + n).undelegate(\".jstree-\" + n); // remove the actual data\n\n          instances[n] = null;\n          delete instances[n];\n        },\n        _core_notify: function _core_notify(n, data) {\n          if (data.opened) {\n            this.open_node(n, false, true);\n          }\n        },\n        lock: function lock() {\n          this.data.core.locked = true;\n          this.get_container().children(\"ul\").addClass(\"jstree-locked\").css(\"opacity\", \"0.7\");\n\n          this.__callback({});\n        },\n        unlock: function unlock() {\n          this.data.core.locked = false;\n          this.get_container().children(\"ul\").removeClass(\"jstree-locked\").css(\"opacity\", \"1\");\n\n          this.__callback({});\n        },\n        is_locked: function is_locked() {\n          return this.data.core.locked;\n        },\n        save_opened: function save_opened() {\n          var _this = this;\n\n          this.data.core.to_open = [];\n          this.get_container_ul().find(\"li.jstree-open\").each(function () {\n            if (this.id) {\n              _this.data.core.to_open.push(\"#\" + this.id.toString().replace(/^#/, \"\").replace(/\\\\\\//g, \"/\").replace(/\\//g, \"\\\\\\/\").replace(/\\\\\\./g, \".\").replace(/\\./g, \"\\\\.\").replace(/\\:/g, \"\\\\:\"));\n            }\n          });\n\n          this.__callback(_this.data.core.to_open);\n        },\n        save_loaded: function save_loaded() {},\n        reload_nodes: function reload_nodes(is_callback) {\n          var _this = this,\n              done = true,\n              current = [],\n              remaining = [];\n\n          if (!is_callback) {\n            this.data.core.reopen = false;\n            this.data.core.refreshing = true;\n            this.data.core.to_open = $.map($.makeArray(this.data.core.to_open), function (n) {\n              return \"#\" + n.toString().replace(/^#/, \"\").replace(/\\\\\\//g, \"/\").replace(/\\//g, \"\\\\\\/\").replace(/\\\\\\./g, \".\").replace(/\\./g, \"\\\\.\").replace(/\\:/g, \"\\\\:\");\n            });\n            this.data.core.to_load = $.map($.makeArray(this.data.core.to_load), function (n) {\n              return \"#\" + n.toString().replace(/^#/, \"\").replace(/\\\\\\//g, \"/\").replace(/\\//g, \"\\\\\\/\").replace(/\\\\\\./g, \".\").replace(/\\./g, \"\\\\.\").replace(/\\:/g, \"\\\\:\");\n            });\n\n            if (this.data.core.to_open.length) {\n              this.data.core.to_load = this.data.core.to_load.concat(this.data.core.to_open);\n            }\n          }\n\n          if (this.data.core.to_load.length) {\n            $.each(this.data.core.to_load, function (i, val) {\n              if (val == \"#\") {\n                return true;\n              }\n\n              if ($(val).length) {\n                current.push(val);\n              } else {\n                remaining.push(val);\n              }\n            });\n\n            if (current.length) {\n              this.data.core.to_load = remaining;\n              $.each(current, function (i, val) {\n                if (!_this._is_loaded(val)) {\n                  _this.load_node(val, function () {\n                    _this.reload_nodes(true);\n                  }, function () {\n                    _this.reload_nodes(true);\n                  });\n\n                  done = false;\n                }\n              });\n            }\n          }\n\n          if (this.data.core.to_open.length) {\n            $.each(this.data.core.to_open, function (i, val) {\n              _this.open_node(val, false, true);\n            });\n          }\n\n          if (done) {\n            // TODO: find a more elegant approach to syncronizing returning requests\n            if (this.data.core.reopen) {\n              clearTimeout(this.data.core.reopen);\n            }\n\n            this.data.core.reopen = setTimeout(function () {\n              _this.__callback({}, _this);\n            }, 50);\n            this.data.core.refreshing = false;\n            this.reopen();\n          }\n        },\n        reopen: function reopen() {\n          var _this = this;\n\n          if (this.data.core.to_open.length) {\n            $.each(this.data.core.to_open, function (i, val) {\n              _this.open_node(val, false, true);\n            });\n          }\n\n          this.__callback({});\n        },\n        refresh: function refresh(obj) {\n          var _this = this;\n\n          this.save_opened();\n\n          if (!obj) {\n            obj = -1;\n          }\n\n          obj = this._get_node(obj);\n\n          if (!obj) {\n            obj = -1;\n          }\n\n          if (obj !== -1) {\n            obj.children(\"UL\").remove();\n          } else {\n            this.get_container_ul().empty();\n          }\n\n          this.load_node(obj, function () {\n            _this.__callback({\n              \"obj\": obj\n            });\n\n            _this.reload_nodes();\n          });\n        },\n        // Dummy function to fire after the first load (so that there is a jstree.loaded event)\n        loaded: function loaded() {\n          this.__callback();\n        },\n        // deal with focus\n        set_focus: function set_focus() {\n          if (this.is_focused()) {\n            return;\n          }\n\n          var f = $.jstree._focused();\n\n          if (f) {\n            f.unset_focus();\n          }\n\n          this.get_container().addClass(\"jstree-focused\");\n          focused_instance = this.get_index();\n\n          this.__callback();\n        },\n        is_focused: function is_focused() {\n          return focused_instance == this.get_index();\n        },\n        unset_focus: function unset_focus() {\n          if (this.is_focused()) {\n            this.get_container().removeClass(\"jstree-focused\");\n            focused_instance = -1;\n          }\n\n          this.__callback();\n        },\n        // traverse\n        _get_node: function _get_node(obj) {\n          var $obj = $(obj, this.get_container());\n\n          if ($obj.is(\".jstree\") || obj == -1) {\n            return -1;\n          }\n\n          $obj = $obj.closest(\"li\", this.get_container());\n          return $obj.length ? $obj : false;\n        },\n        _get_next: function _get_next(obj, strict) {\n          obj = this._get_node(obj);\n\n          if (obj === -1) {\n            return this.get_container().find(\"> ul > li:first-child\");\n          }\n\n          if (!obj.length) {\n            return false;\n          }\n\n          if (strict) {\n            return obj.nextAll(\"li\").size() > 0 ? obj.nextAll(\"li:eq(0)\") : false;\n          }\n\n          if (obj.hasClass(\"jstree-open\")) {\n            return obj.find(\"li:eq(0)\");\n          } else if (obj.nextAll(\"li\").size() > 0) {\n            return obj.nextAll(\"li:eq(0)\");\n          } else {\n            return obj.parentsUntil(\".jstree\", \"li\").next(\"li\").eq(0);\n          }\n        },\n        _get_prev: function _get_prev(obj, strict) {\n          obj = this._get_node(obj);\n\n          if (obj === -1) {\n            return this.get_container().find(\"> ul > li:last-child\");\n          }\n\n          if (!obj.length) {\n            return false;\n          }\n\n          if (strict) {\n            return obj.prevAll(\"li\").length > 0 ? obj.prevAll(\"li:eq(0)\") : false;\n          }\n\n          if (obj.prev(\"li\").length) {\n            obj = obj.prev(\"li\").eq(0);\n\n            while (obj.hasClass(\"jstree-open\")) {\n              obj = obj.children(\"ul:eq(0)\").children(\"li:last\");\n            }\n\n            return obj;\n          } else {\n            var o = obj.parentsUntil(\".jstree\", \"li:eq(0)\");\n            return o.length ? o : false;\n          }\n        },\n        _get_parent: function _get_parent(obj) {\n          obj = this._get_node(obj);\n\n          if (obj == -1 || !obj.length) {\n            return false;\n          }\n\n          var o = obj.parentsUntil(\".jstree\", \"li:eq(0)\");\n          return o.length ? o : -1;\n        },\n        _get_children: function _get_children(obj) {\n          obj = this._get_node(obj);\n\n          if (obj === -1) {\n            return this.get_container().children(\"ul:eq(0)\").children(\"li\");\n          }\n\n          if (!obj.length) {\n            return false;\n          }\n\n          return obj.children(\"ul:eq(0)\").children(\"li\");\n        },\n        get_path: function get_path(obj, id_mode) {\n          var p = [],\n              _this = this;\n\n          obj = this._get_node(obj);\n\n          if (obj === -1 || !obj || !obj.length) {\n            return false;\n          }\n\n          obj.parentsUntil(\".jstree\", \"li\").each(function () {\n            p.push(id_mode ? this.id : _this.get_text(this));\n          });\n          p.reverse();\n          p.push(id_mode ? obj.attr(\"id\") : this.get_text(obj));\n          return p;\n        },\n        // string functions\n        _get_string: function _get_string(key) {\n          return this._get_settings().core.strings[key] || key;\n        },\n        is_open: function is_open(obj) {\n          obj = this._get_node(obj);\n          return obj && obj !== -1 && obj.hasClass(\"jstree-open\");\n        },\n        is_closed: function is_closed(obj) {\n          obj = this._get_node(obj);\n          return obj && obj !== -1 && obj.hasClass(\"jstree-closed\");\n        },\n        is_leaf: function is_leaf(obj) {\n          obj = this._get_node(obj);\n          return obj && obj !== -1 && obj.hasClass(\"jstree-leaf\");\n        },\n        correct_state: function correct_state(obj) {\n          obj = this._get_node(obj);\n\n          if (!obj || obj === -1) {\n            return false;\n          }\n\n          obj.removeClass(\"jstree-closed jstree-open\").addClass(\"jstree-leaf\").children(\"ul\").remove();\n\n          this.__callback({\n            \"obj\": obj\n          });\n        },\n        // open/close\n        open_node: function open_node(obj, callback, skip_animation) {\n          obj = this._get_node(obj);\n\n          if (!obj.length) {\n            return false;\n          }\n\n          if (!obj.hasClass(\"jstree-closed\")) {\n            if (callback) {\n              callback.call();\n            }\n\n            return false;\n          }\n\n          var s = skip_animation || is_ie6 ? 0 : this._get_settings().core.animation,\n              t = this;\n\n          if (!this._is_loaded(obj)) {\n            obj.children(\"a\").addClass(\"jstree-loading\");\n            this.load_node(obj, function () {\n              t.open_node(obj, callback, skip_animation);\n            }, callback);\n          } else {\n            if (this._get_settings().core.open_parents) {\n              obj.parentsUntil(\".jstree\", \".jstree-closed\").each(function () {\n                t.open_node(this, false, true);\n              });\n            }\n\n            if (s) {\n              obj.children(\"ul\").css(\"display\", \"none\");\n            }\n\n            obj.removeClass(\"jstree-closed\").addClass(\"jstree-open\").children(\"a\").removeClass(\"jstree-loading\");\n\n            if (s) {\n              obj.children(\"ul\").stop(true, true).slideDown(s, function () {\n                this.style.display = \"\";\n                t.after_open(obj);\n              });\n            } else {\n              t.after_open(obj);\n            }\n\n            this.__callback({\n              \"obj\": obj\n            });\n\n            if (callback) {\n              callback.call();\n            }\n          }\n        },\n        after_open: function after_open(obj) {\n          this.__callback({\n            \"obj\": obj\n          });\n        },\n        close_node: function close_node(obj, skip_animation) {\n          obj = this._get_node(obj);\n          var s = skip_animation || is_ie6 ? 0 : this._get_settings().core.animation,\n              t = this;\n\n          if (!obj.length || !obj.hasClass(\"jstree-open\")) {\n            return false;\n          }\n\n          if (s) {\n            obj.children(\"ul\").attr(\"style\", \"display:block !important\");\n          }\n\n          obj.removeClass(\"jstree-open\").addClass(\"jstree-closed\");\n\n          if (s) {\n            obj.children(\"ul\").stop(true, true).slideUp(s, function () {\n              this.style.display = \"\";\n              t.after_close(obj);\n            });\n          } else {\n            t.after_close(obj);\n          }\n\n          this.__callback({\n            \"obj\": obj\n          });\n        },\n        after_close: function after_close(obj) {\n          this.__callback({\n            \"obj\": obj\n          });\n        },\n        toggle_node: function toggle_node(obj) {\n          obj = this._get_node(obj);\n\n          if (obj.hasClass(\"jstree-closed\")) {\n            return this.open_node(obj);\n          }\n\n          if (obj.hasClass(\"jstree-open\")) {\n            return this.close_node(obj);\n          }\n        },\n        open_all: function open_all(obj, do_animation, original_obj) {\n          obj = obj ? this._get_node(obj) : -1;\n\n          if (!obj || obj === -1) {\n            obj = this.get_container_ul();\n          }\n\n          if (original_obj) {\n            obj = obj.find(\"li.jstree-closed\");\n          } else {\n            original_obj = obj;\n\n            if (obj.is(\".jstree-closed\")) {\n              obj = obj.find(\"li.jstree-closed\").addBack();\n            } else {\n              obj = obj.find(\"li.jstree-closed\");\n            }\n          }\n\n          var _this = this;\n\n          obj.each(function () {\n            var __this = this;\n\n            if (!_this._is_loaded(this)) {\n              _this.open_node(this, function () {\n                _this.open_all(__this, do_animation, original_obj);\n              }, !do_animation);\n            } else {\n              _this.open_node(this, false, !do_animation);\n            }\n          }); // so that callback is fired AFTER all nodes are open\n\n          if (original_obj.find('li.jstree-closed').length === 0) {\n            this.__callback({\n              \"obj\": original_obj\n            });\n          }\n        },\n        close_all: function close_all(obj, do_animation) {\n          var _this = this;\n\n          obj = obj ? this._get_node(obj) : this.get_container();\n\n          if (!obj || obj === -1) {\n            obj = this.get_container_ul();\n          }\n\n          obj.find(\"li.jstree-open\").addBack().each(function () {\n            _this.close_node(this, !do_animation);\n          });\n\n          this.__callback({\n            \"obj\": obj\n          });\n        },\n        clean_node: function clean_node(obj) {\n          obj = obj && obj != -1 ? $(obj) : this.get_container_ul();\n          obj = obj.is(\"li\") ? obj.find(\"li\").addBack() : obj.find(\"li\");\n          obj.removeClass(\"jstree-last\").filter(\"li:last-child\").addClass(\"jstree-last\").end().filter(\":has(li)\").not(\".jstree-open\").removeClass(\"jstree-leaf\").addClass(\"jstree-closed\");\n          obj.not(\".jstree-open, .jstree-closed\").addClass(\"jstree-leaf\").children(\"ul\").remove();\n\n          this.__callback({\n            \"obj\": obj\n          });\n        },\n        // rollback\n        get_rollback: function get_rollback() {\n          this.__callback();\n\n          return {\n            i: this.get_index(),\n            h: this.get_container().children(\"ul\").clone(true),\n            d: this.data\n          };\n        },\n        set_rollback: function set_rollback(html, data) {\n          this.get_container().empty().append(html);\n          this.data = data;\n\n          this.__callback();\n        },\n        // Dummy functions to be overwritten by any datastore plugin included\n        load_node: function load_node(obj, s_call, e_call) {\n          this.__callback({\n            \"obj\": obj\n          });\n        },\n        _is_loaded: function _is_loaded(obj) {\n          return true;\n        },\n        // Basic operations: create\n        create_node: function create_node(obj, position, js, callback, is_loaded) {\n          obj = this._get_node(obj);\n          position = typeof position === \"undefined\" ? \"last\" : position;\n\n          var d = $(\"<li />\"),\n              s = this._get_settings().core,\n              tmp;\n\n          if (obj !== -1 && !obj.length) {\n            return false;\n          }\n\n          if (!is_loaded && !this._is_loaded(obj)) {\n            this.load_node(obj, function () {\n              this.create_node(obj, position, js, callback, true);\n            });\n            return false;\n          }\n\n          this.__rollback();\n\n          if (typeof js === \"string\") {\n            js = {\n              \"data\": js\n            };\n          }\n\n          if (!js) {\n            js = {};\n          }\n\n          if (js.attr) {\n            d.attr(js.attr);\n          }\n\n          if (js.metadata) {\n            d.data(js.metadata);\n          }\n\n          if (js.state) {\n            d.addClass(\"jstree-\" + js.state);\n          }\n\n          if (!js.data) {\n            js.data = this._get_string(\"new_node\");\n          }\n\n          if (!$.isArray(js.data)) {\n            tmp = js.data;\n            js.data = [];\n            js.data.push(tmp);\n          }\n\n          $.each(js.data, function (i, m) {\n            tmp = $(\"<a />\");\n\n            if ($.isFunction(m)) {\n              m = m.call(this, js);\n            }\n\n            if (typeof m == \"string\") {\n              tmp.attr('href', '#')[s.html_titles ? \"html\" : \"text\"](m);\n            } else {\n              if (!m.attr) {\n                m.attr = {};\n              }\n\n              if (!m.attr.href) {\n                m.attr.href = '#';\n              }\n\n              tmp.attr(m.attr)[s.html_titles ? \"html\" : \"text\"](m.title);\n\n              if (m.language) {\n                tmp.addClass(m.language);\n              }\n            }\n\n            tmp.prepend(\"<ins class='jstree-icon'>&#160;</ins>\");\n\n            if (!m.icon && js.icon) {\n              m.icon = js.icon;\n            }\n\n            if (m.icon) {\n              if (m.icon.indexOf(\"/\") === -1) {\n                tmp.children(\"ins\").addClass(m.icon);\n              } else {\n                tmp.children(\"ins\").css(\"background\", \"url('\" + m.icon + \"') center center no-repeat\");\n              }\n            }\n\n            d.append(tmp);\n          });\n          d.prepend(\"<ins class='jstree-icon'>&#160;</ins>\");\n\n          if (obj === -1) {\n            obj = this.get_container();\n\n            if (position === \"before\") {\n              position = \"first\";\n            }\n\n            if (position === \"after\") {\n              position = \"last\";\n            }\n          }\n\n          switch (position) {\n            case \"before\":\n              obj.before(d);\n              tmp = this._get_parent(obj);\n              break;\n\n            case \"after\":\n              obj.after(d);\n              tmp = this._get_parent(obj);\n              break;\n\n            case \"inside\":\n            case \"first\":\n              if (!obj.children(\"ul\").length) {\n                obj.append(\"<ul />\");\n              }\n\n              obj.children(\"ul\").prepend(d);\n              tmp = obj;\n              break;\n\n            case \"last\":\n              if (!obj.children(\"ul\").length) {\n                obj.append(\"<ul />\");\n              }\n\n              obj.children(\"ul\").append(d);\n              tmp = obj;\n              break;\n\n            default:\n              if (!obj.children(\"ul\").length) {\n                obj.append(\"<ul />\");\n              }\n\n              if (!position) {\n                position = 0;\n              }\n\n              tmp = obj.children(\"ul\").children(\"li\").eq(position);\n\n              if (tmp.length) {\n                tmp.before(d);\n              } else {\n                obj.children(\"ul\").append(d);\n              }\n\n              tmp = obj;\n              break;\n          }\n\n          if (tmp === -1 || tmp.get(0) === this.get_container().get(0)) {\n            tmp = -1;\n          }\n\n          this.clean_node(tmp);\n\n          this.__callback({\n            \"obj\": d,\n            \"parent\": tmp\n          });\n\n          if (callback) {\n            callback.call(this, d);\n          }\n\n          return d;\n        },\n        // Basic operations: rename (deal with text)\n        get_text: function get_text(obj) {\n          obj = this._get_node(obj);\n\n          if (!obj.length) {\n            return false;\n          }\n\n          var s = this._get_settings().core.html_titles;\n\n          obj = obj.children(\"a:eq(0)\");\n\n          if (s) {\n            obj = obj.clone();\n            obj.children(\"INS\").remove();\n            return obj.html();\n          } else {\n            obj = obj.contents().filter(function () {\n              return this.nodeType == 3;\n            })[0];\n            return obj.nodeValue;\n          }\n        },\n        set_text: function set_text(obj, val) {\n          obj = this._get_node(obj);\n\n          if (!obj.length) {\n            return false;\n          }\n\n          obj = obj.children(\"a:eq(0)\");\n\n          if (this._get_settings().core.html_titles) {\n            var tmp = obj.children(\"INS\").clone();\n            obj.html(val).prepend(tmp);\n\n            this.__callback({\n              \"obj\": obj,\n              \"name\": val\n            });\n\n            return true;\n          } else {\n            obj = obj.contents().filter(function () {\n              return this.nodeType == 3;\n            })[0];\n\n            this.__callback({\n              \"obj\": obj,\n              \"name\": val\n            });\n\n            return obj.nodeValue = val;\n          }\n        },\n        rename_node: function rename_node(obj, val) {\n          obj = this._get_node(obj);\n\n          this.__rollback();\n\n          if (obj && obj.length && this.set_text.apply(this, Array.prototype.slice.call(arguments))) {\n            this.__callback({\n              \"obj\": obj,\n              \"name\": val\n            });\n          }\n        },\n        // Basic operations: deleting nodes\n        delete_node: function delete_node(obj) {\n          obj = this._get_node(obj);\n\n          if (!obj.length) {\n            return false;\n          }\n\n          this.__rollback();\n\n          var p = this._get_parent(obj),\n              prev = $([]),\n              t = this;\n\n          obj.each(function () {\n            prev = prev.add(t._get_prev(this));\n          });\n          obj = obj.detach();\n\n          if (p !== -1 && p.find(\"> ul > li\").length === 0) {\n            p.removeClass(\"jstree-open jstree-closed\").addClass(\"jstree-leaf\");\n          }\n\n          this.clean_node(p);\n\n          this.__callback({\n            \"obj\": obj,\n            \"prev\": prev,\n            \"parent\": p\n          });\n\n          return obj;\n        },\n        prepare_move: function prepare_move(o, r, pos, cb, is_cb) {\n          var p = {};\n          p.ot = $.jstree._reference(o) || this;\n          p.o = p.ot._get_node(o);\n          p.r = r === -1 ? -1 : this._get_node(r);\n          p.p = typeof pos === \"undefined\" || pos === false ? \"last\" : pos; // TODO: move to a setting\n\n          if (!is_cb && prepared_move.o && prepared_move.o[0] === p.o[0] && prepared_move.r[0] === p.r[0] && prepared_move.p === p.p) {\n            this.__callback(prepared_move);\n\n            if (cb) {\n              cb.call(this, prepared_move);\n            }\n\n            return;\n          }\n\n          p.ot = $.jstree._reference(p.o) || this;\n          p.rt = $.jstree._reference(p.r) || this; // r === -1 ? p.ot : $.jstree._reference(p.r) || this\n\n          if (p.r === -1 || !p.r) {\n            p.cr = -1;\n\n            switch (p.p) {\n              case \"first\":\n              case \"before\":\n              case \"inside\":\n                p.cp = 0;\n                break;\n\n              case \"after\":\n              case \"last\":\n                p.cp = p.rt.get_container().find(\" > ul > li\").length;\n                break;\n\n              default:\n                p.cp = p.p;\n                break;\n            }\n          } else {\n            if (!/^(before|after)$/.test(p.p) && !this._is_loaded(p.r)) {\n              return this.load_node(p.r, function () {\n                this.prepare_move(o, r, pos, cb, true);\n              });\n            }\n\n            switch (p.p) {\n              case \"before\":\n                p.cp = p.r.index();\n                p.cr = p.rt._get_parent(p.r);\n                break;\n\n              case \"after\":\n                p.cp = p.r.index() + 1;\n                p.cr = p.rt._get_parent(p.r);\n                break;\n\n              case \"inside\":\n              case \"first\":\n                p.cp = 0;\n                p.cr = p.r;\n                break;\n\n              case \"last\":\n                p.cp = p.r.find(\" > ul > li\").length;\n                p.cr = p.r;\n                break;\n\n              default:\n                p.cp = p.p;\n                p.cr = p.r;\n                break;\n            }\n          }\n\n          p.np = p.cr == -1 ? p.rt.get_container() : p.cr;\n          p.op = p.ot._get_parent(p.o);\n          p.cop = p.o.index();\n\n          if (p.op === -1) {\n            p.op = p.ot ? p.ot.get_container() : this.get_container();\n          }\n\n          if (!/^(before|after)$/.test(p.p) && p.op && p.np && p.op[0] === p.np[0] && p.o.index() < p.cp) {\n            p.cp++;\n          } //if(p.p === \"before\" && p.op && p.np && p.op[0] === p.np[0] && p.o.index() < p.cp) { p.cp--; }\n\n\n          p.or = p.np.find(\" > ul > li:nth-child(\" + (p.cp + 1) + \")\");\n          prepared_move = p;\n\n          this.__callback(prepared_move);\n\n          if (cb) {\n            cb.call(this, prepared_move);\n          }\n        },\n        check_move: function check_move() {\n          var obj = prepared_move,\n              ret = true,\n              r = obj.r === -1 ? this.get_container() : obj.r;\n\n          if (!obj || !obj.o || obj.or[0] === obj.o[0]) {\n            return false;\n          }\n\n          if (!obj.cy) {\n            if (obj.op && obj.np && obj.op[0] === obj.np[0] && obj.cp - 1 === obj.o.index()) {\n              return false;\n            }\n\n            obj.o.each(function () {\n              if (r.parentsUntil(\".jstree\", \"li\").addBack().index(this) !== -1) {\n                ret = false;\n                return false;\n              }\n            });\n          }\n\n          return ret;\n        },\n        move_node: function move_node(obj, ref, position, is_copy, is_prepared, skip_check) {\n          if (!is_prepared) {\n            return this.prepare_move(obj, ref, position, function (p) {\n              this.move_node(p, false, false, is_copy, true, skip_check);\n            });\n          }\n\n          if (is_copy) {\n            prepared_move.cy = true;\n          }\n\n          if (!skip_check && !this.check_move()) {\n            return false;\n          }\n\n          this.__rollback();\n\n          var o = false;\n\n          if (is_copy) {\n            o = obj.o.clone(true);\n            o.find(\"*[id]\").addBack().each(function () {\n              if (this.id) {\n                this.id = \"copy_\" + this.id;\n              }\n            });\n          } else {\n            o = obj.o;\n          }\n\n          if (obj.or.length) {\n            obj.or.before(o);\n          } else {\n            if (!obj.np.children(\"ul\").length) {\n              $(\"<ul />\").appendTo(obj.np);\n            }\n\n            obj.np.children(\"ul:eq(0)\").append(o);\n          }\n\n          try {\n            obj.ot.clean_node(obj.op);\n            obj.rt.clean_node(obj.np);\n\n            if (!obj.op.find(\"> ul > li\").length) {\n              obj.op.removeClass(\"jstree-open jstree-closed\").addClass(\"jstree-leaf\").children(\"ul\").remove();\n            }\n          } catch (e) {}\n\n          if (is_copy) {\n            prepared_move.cy = true;\n            prepared_move.oc = o;\n          }\n\n          this.__callback(prepared_move);\n\n          return prepared_move;\n        },\n        _get_move: function _get_move() {\n          return prepared_move;\n        }\n      }\n    });\n  })(jQuery); //*/\n\n  /* \n   * jsTree ui plugin\n   * This plugins handles selecting/deselecting/hovering/dehovering nodes\n   */\n\n\n  (function ($) {\n    var scrollbar_width, e1, e2;\n    $(function () {\n      if (/msie/.test(navigator.userAgent.toLowerCase())) {\n        e1 = $('<textarea cols=\"10\" rows=\"2\"></textarea>').css({\n          position: 'absolute',\n          top: -1000,\n          left: 0\n        }).appendTo('body');\n        e2 = $('<textarea cols=\"10\" rows=\"2\" style=\"overflow: hidden;\"></textarea>').css({\n          position: 'absolute',\n          top: -1000,\n          left: 0\n        }).appendTo('body');\n        scrollbar_width = e1.width() - e2.width();\n        e1.add(e2).remove();\n      } else {\n        e1 = $('<div />').css({\n          width: 100,\n          height: 100,\n          overflow: 'auto',\n          position: 'absolute',\n          top: -1000,\n          left: 0\n        }).prependTo('body').append('<div />').find('div').css({\n          width: '100%',\n          height: 200\n        });\n        scrollbar_width = 100 - e1.width();\n        e1.parent().remove();\n      }\n    });\n    $.jstree.plugin(\"ui\", {\n      __init: function __init() {\n        this.data.ui.selected = $();\n        this.data.ui.last_selected = false;\n        this.data.ui.hovered = null;\n        this.data.ui.to_select = this.get_settings().ui.initially_select;\n        this.get_container().delegate(\"a\", \"click.jstree\", $.proxy(function (event) {\n          event.preventDefault();\n          event.currentTarget.blur();\n\n          if (!$(event.currentTarget).hasClass(\"jstree-loading\")) {\n            this.select_node(event.currentTarget, true, event);\n          }\n        }, this)).delegate(\"a\", \"mouseenter.jstree\", $.proxy(function (event) {\n          if (!$(event.currentTarget).hasClass(\"jstree-loading\")) {\n            this.hover_node(event.target);\n          }\n        }, this)).delegate(\"a\", \"mouseleave.jstree\", $.proxy(function (event) {\n          if (!$(event.currentTarget).hasClass(\"jstree-loading\")) {\n            this.dehover_node(event.target);\n          }\n        }, this)).bind(\"reopen.jstree\", $.proxy(function () {\n          this.reselect();\n        }, this)).bind(\"get_rollback.jstree\", $.proxy(function () {\n          this.dehover_node();\n          this.save_selected();\n        }, this)).bind(\"set_rollback.jstree\", $.proxy(function () {\n          this.reselect();\n        }, this)).bind(\"close_node.jstree\", $.proxy(function (event, data) {\n          var s = this._get_settings().ui,\n              obj = this._get_node(data.rslt.obj),\n              clk = obj && obj.length ? obj.children(\"ul\").find(\"a.jstree-clicked\") : $(),\n              _this = this;\n\n          if (s.selected_parent_close === false || !clk.length) {\n            return;\n          }\n\n          clk.each(function () {\n            _this.deselect_node(this);\n\n            if (s.selected_parent_close === \"select_parent\") {\n              _this.select_node(obj);\n            }\n          });\n        }, this)).bind(\"delete_node.jstree\", $.proxy(function (event, data) {\n          var s = this._get_settings().ui.select_prev_on_delete,\n              obj = this._get_node(data.rslt.obj),\n              clk = obj && obj.length ? obj.find(\"a.jstree-clicked\") : [],\n              _this = this;\n\n          clk.each(function () {\n            _this.deselect_node(this);\n          });\n\n          if (s && clk.length) {\n            data.rslt.prev.each(function () {\n              if (this.parentNode) {\n                _this.select_node(this);\n\n                return false;\n                /* if return false is removed all prev nodes will be selected */\n              }\n            });\n          }\n        }, this)).bind(\"move_node.jstree\", $.proxy(function (event, data) {\n          if (data.rslt.cy) {\n            data.rslt.oc.find(\"a.jstree-clicked\").removeClass(\"jstree-clicked\");\n          }\n        }, this));\n      },\n      defaults: {\n        select_limit: -1,\n        // 0, 1, 2 ... or -1 for unlimited\n        select_multiple_modifier: \"ctrl\",\n        // on, or ctrl, shift, alt\n        select_range_modifier: \"shift\",\n        selected_parent_close: \"select_parent\",\n        // false, \"deselect\", \"select_parent\"\n        selected_parent_open: true,\n        select_prev_on_delete: true,\n        disable_selecting_children: false,\n        initially_select: []\n      },\n      _fn: {\n        _get_node: function _get_node(obj, allow_multiple) {\n          if (typeof obj === \"undefined\" || obj === null) {\n            return allow_multiple ? this.data.ui.selected : this.data.ui.last_selected;\n          }\n\n          var $obj = $(obj, this.get_container());\n\n          if ($obj.is(\".jstree\") || obj == -1) {\n            return -1;\n          }\n\n          $obj = $obj.closest(\"li\", this.get_container());\n          return $obj.length ? $obj : false;\n        },\n        _ui_notify: function _ui_notify(n, data) {\n          if (data.selected) {\n            this.select_node(n, false);\n          }\n        },\n        save_selected: function save_selected() {\n          var _this = this;\n\n          this.data.ui.to_select = [];\n          this.data.ui.selected.each(function () {\n            if (this.id) {\n              _this.data.ui.to_select.push(\"#\" + this.id.toString().replace(/^#/, \"\").replace(/\\\\\\//g, \"/\").replace(/\\//g, \"\\\\\\/\").replace(/\\\\\\./g, \".\").replace(/\\./g, \"\\\\.\").replace(/\\:/g, \"\\\\:\"));\n            }\n          });\n\n          this.__callback(this.data.ui.to_select);\n        },\n        reselect: function reselect() {\n          var _this = this,\n              s = this.data.ui.to_select;\n\n          s = $.map($.makeArray(s), function (n) {\n            return \"#\" + n.toString().replace(/^#/, \"\").replace(/\\\\\\//g, \"/\").replace(/\\//g, \"\\\\\\/\").replace(/\\\\\\./g, \".\").replace(/\\./g, \"\\\\.\").replace(/\\:/g, \"\\\\:\");\n          }); // this.deselect_all(); WHY deselect, breaks plugin state notifier?\n\n          $.each(s, function (i, val) {\n            if (val && val !== \"#\") {\n              _this.select_node(val);\n            }\n          });\n          this.data.ui.selected = this.data.ui.selected.filter(function () {\n            return this.parentNode;\n          });\n\n          this.__callback();\n        },\n        refresh: function refresh(obj) {\n          this.save_selected();\n          return this.__call_old();\n        },\n        hover_node: function hover_node(obj) {\n          obj = this._get_node(obj);\n\n          if (!obj.length) {\n            return false;\n          } //if(this.data.ui.hovered && obj.get(0) === this.data.ui.hovered.get(0)) { return; }\n\n\n          if (!obj.hasClass(\"jstree-hovered\")) {\n            this.dehover_node();\n          }\n\n          this.data.ui.hovered = obj.children(\"a\").addClass(\"jstree-hovered\").parent();\n\n          this._fix_scroll(obj);\n\n          this.__callback({\n            \"obj\": obj\n          });\n        },\n        dehover_node: function dehover_node() {\n          var obj = this.data.ui.hovered,\n              p;\n\n          if (!obj || !obj.length) {\n            return false;\n          }\n\n          p = obj.children(\"a\").removeClass(\"jstree-hovered\").parent();\n\n          if (this.data.ui.hovered[0] === p[0]) {\n            this.data.ui.hovered = null;\n          }\n\n          this.__callback({\n            \"obj\": obj\n          });\n        },\n        select_node: function select_node(obj, check, e) {\n          obj = this._get_node(obj);\n\n          if (obj == -1 || !obj || !obj.length) {\n            return false;\n          }\n\n          var s = this._get_settings().ui,\n              is_multiple = s.select_multiple_modifier == \"on\" || s.select_multiple_modifier !== false && e && e[s.select_multiple_modifier + \"Key\"],\n              is_range = s.select_range_modifier !== false && e && e[s.select_range_modifier + \"Key\"] && this.data.ui.last_selected && this.data.ui.last_selected[0] !== obj[0] && this.data.ui.last_selected.parent()[0] === obj.parent()[0],\n              is_selected = this.is_selected(obj),\n              proceed = true,\n              t = this;\n\n          if (check) {\n            if (s.disable_selecting_children && is_multiple && (obj.parentsUntil(\".jstree\", \"li\").children(\"a.jstree-clicked\").length || obj.children(\"ul\").find(\"a.jstree-clicked:eq(0)\").length)) {\n              return false;\n            }\n\n            proceed = false;\n\n            switch (!0) {\n              case is_range:\n                this.data.ui.last_selected.addClass(\"jstree-last-selected\");\n                obj = obj[obj.index() < this.data.ui.last_selected.index() ? \"nextUntil\" : \"prevUntil\"](\".jstree-last-selected\").addBack();\n\n                if (s.select_limit == -1 || obj.length < s.select_limit) {\n                  this.data.ui.last_selected.removeClass(\"jstree-last-selected\");\n                  this.data.ui.selected.each(function () {\n                    if (this !== t.data.ui.last_selected[0]) {\n                      t.deselect_node(this);\n                    }\n                  });\n                  is_selected = false;\n                  proceed = true;\n                } else {\n                  proceed = false;\n                }\n\n                break;\n\n              case is_selected && !is_multiple:\n                this.deselect_all();\n                is_selected = false;\n                proceed = true;\n                break;\n\n              case !is_selected && !is_multiple:\n                if (s.select_limit == -1 || s.select_limit > 0) {\n                  this.deselect_all();\n                  proceed = true;\n                }\n\n                break;\n\n              case is_selected && is_multiple:\n                this.deselect_node(obj);\n                break;\n\n              case !is_selected && is_multiple:\n                if (s.select_limit == -1 || this.data.ui.selected.length + 1 <= s.select_limit) {\n                  proceed = true;\n                }\n\n                break;\n            }\n          }\n\n          if (proceed && !is_selected) {\n            if (!is_range) {\n              this.data.ui.last_selected = obj;\n            }\n\n            obj.children(\"a\").addClass(\"jstree-clicked\");\n\n            if (s.selected_parent_open) {\n              obj.parents(\".jstree-closed\").each(function () {\n                t.open_node(this, false, true);\n              });\n            }\n\n            this.data.ui.selected = this.data.ui.selected.add(obj);\n\n            this._fix_scroll(obj.eq(0));\n\n            this.__callback({\n              \"obj\": obj,\n              \"e\": e\n            });\n          }\n        },\n        _fix_scroll: function _fix_scroll(obj) {\n          var c = this.get_container()[0],\n              t;\n\n          if (c.scrollHeight > c.offsetHeight) {\n            obj = this._get_node(obj);\n\n            if (!obj || obj === -1 || !obj.length || !obj.is(\":visible\")) {\n              return;\n            }\n\n            t = obj.offset().top - this.get_container().offset().top;\n\n            if (t < 0) {\n              c.scrollTop = c.scrollTop + t - 1;\n            }\n\n            if (t + this.data.core.li_height + (c.scrollWidth > c.offsetWidth ? scrollbar_width : 0) > c.offsetHeight) {\n              c.scrollTop = c.scrollTop + (t - c.offsetHeight + this.data.core.li_height + 1 + (c.scrollWidth > c.offsetWidth ? scrollbar_width : 0));\n            }\n          }\n        },\n        deselect_node: function deselect_node(obj) {\n          obj = this._get_node(obj);\n\n          if (!obj.length) {\n            return false;\n          }\n\n          if (this.is_selected(obj)) {\n            obj.children(\"a\").removeClass(\"jstree-clicked\");\n            this.data.ui.selected = this.data.ui.selected.not(obj);\n\n            if (this.data.ui.last_selected.get(0) === obj.get(0)) {\n              this.data.ui.last_selected = this.data.ui.selected.eq(0);\n            }\n\n            this.__callback({\n              \"obj\": obj\n            });\n          }\n        },\n        toggle_select: function toggle_select(obj) {\n          obj = this._get_node(obj);\n\n          if (!obj.length) {\n            return false;\n          }\n\n          if (this.is_selected(obj)) {\n            this.deselect_node(obj);\n          } else {\n            this.select_node(obj);\n          }\n        },\n        is_selected: function is_selected(obj) {\n          return this.data.ui.selected.index(this._get_node(obj)) >= 0;\n        },\n        get_selected: function get_selected(context) {\n          return context ? $(context).find(\"a.jstree-clicked\").parent() : this.data.ui.selected;\n        },\n        deselect_all: function deselect_all(context) {\n          var ret = context ? $(context).find(\"a.jstree-clicked\").parent() : this.get_container().find(\"a.jstree-clicked\").parent();\n          ret.children(\"a.jstree-clicked\").removeClass(\"jstree-clicked\");\n          this.data.ui.selected = $([]);\n          this.data.ui.last_selected = false;\n\n          this.__callback({\n            \"obj\": ret\n          });\n        }\n      }\n    }); // include the selection plugin by default\n\n    $.jstree.defaults.plugins.push(\"ui\");\n  })(jQuery); //*/\n\n  /* \n   * jsTree CRRM plugin\n   * Handles creating/renaming/removing/moving nodes by user interaction.\n   */\n\n\n  (function ($) {\n    $.jstree.plugin(\"crrm\", {\n      __init: function __init() {\n        this.get_container().bind(\"move_node.jstree\", $.proxy(function (e, data) {\n          if (this._get_settings().crrm.move.open_onmove) {\n            var t = this;\n            data.rslt.np.parentsUntil(\".jstree\").addBack().filter(\".jstree-closed\").each(function () {\n              t.open_node(this, false, true);\n            });\n          }\n        }, this));\n      },\n      defaults: {\n        input_width_limit: 200,\n        move: {\n          always_copy: false,\n          // false, true or \"multitree\"\n          open_onmove: true,\n          default_position: \"last\",\n          check_move: function check_move(m) {\n            return true;\n          }\n        }\n      },\n      _fn: {\n        _show_input: function _show_input(obj, callback) {\n          obj = this._get_node(obj);\n\n          var rtl = this._get_settings().core.rtl,\n              w = this._get_settings().crrm.input_width_limit,\n              w1 = obj.children(\"ins\").width(),\n              w2 = obj.find(\"> a:visible > ins\").width() * obj.find(\"> a:visible > ins\").length,\n              t = this.get_text(obj),\n              h1 = $(\"<div />\", {\n            css: {\n              \"position\": \"absolute\",\n              \"top\": \"-200px\",\n              \"left\": rtl ? \"0px\" : \"-1000px\",\n              \"visibility\": \"hidden\"\n            }\n          }).appendTo(\"body\"),\n              h2 = obj.css(\"position\", \"relative\").append($(\"<input />\", {\n            \"value\": t,\n            \"class\": \"jstree-rename-input\",\n            // \"size\" : t.length,\n            \"css\": {\n              \"padding\": \"0\",\n              \"border\": \"1px solid silver\",\n              \"position\": \"absolute\",\n              \"left\": rtl ? \"auto\" : w1 + w2 + 4 + \"px\",\n              \"right\": rtl ? w1 + w2 + 4 + \"px\" : \"auto\",\n              \"top\": \"0px\",\n              \"height\": this.data.core.li_height - 2 + \"px\",\n              \"lineHeight\": this.data.core.li_height - 2 + \"px\",\n              \"width\": \"150px\" // will be set a bit further down\n\n            },\n            \"blur\": $.proxy(function () {\n              var i = obj.children(\".jstree-rename-input\"),\n                  v = i.val();\n\n              if (v === \"\") {\n                v = t;\n              }\n\n              h1.remove();\n              i.remove(); // rollback purposes\n\n              this.set_text(obj, t); // rollback purposes\n\n              this.rename_node(obj, v);\n              callback.call(this, obj, v, t);\n              obj.css(\"position\", \"\");\n            }, this),\n            \"keyup\": function keyup(event) {\n              var key = event.keyCode || event.which;\n\n              if (key == 27) {\n                this.value = t;\n                this.blur();\n                return;\n              } else if (key == 13) {\n                this.blur();\n                return;\n              } else {\n                h2.width(Math.min(h1.text(\"pW\" + this.value).width(), w));\n              }\n            },\n            \"keypress\": function keypress(event) {\n              var key = event.keyCode || event.which;\n\n              if (key == 13) {\n                return false;\n              }\n            }\n          })).children(\".jstree-rename-input\");\n\n          this.set_text(obj, \"\");\n          h1.css({\n            fontFamily: h2.css('fontFamily') || '',\n            fontSize: h2.css('fontSize') || '',\n            fontWeight: h2.css('fontWeight') || '',\n            fontStyle: h2.css('fontStyle') || '',\n            fontStretch: h2.css('fontStretch') || '',\n            fontVariant: h2.css('fontVariant') || '',\n            letterSpacing: h2.css('letterSpacing') || '',\n            wordSpacing: h2.css('wordSpacing') || ''\n          });\n          h2.width(Math.min(h1.text(\"pW\" + h2[0].value).width(), w))[0].select();\n        },\n        rename: function rename(obj) {\n          obj = this._get_node(obj);\n\n          this.__rollback();\n\n          var f = this.__callback;\n\n          this._show_input(obj, function (obj, new_name, old_name) {\n            f.call(this, {\n              \"obj\": obj,\n              \"new_name\": new_name,\n              \"old_name\": old_name\n            });\n          });\n        },\n        create: function create(obj, position, js, callback, skip_rename) {\n          var t,\n              _this = this;\n\n          obj = this._get_node(obj);\n\n          if (!obj) {\n            obj = -1;\n          }\n\n          this.__rollback();\n\n          t = this.create_node(obj, position, js, function (t) {\n            var p = this._get_parent(t),\n                pos = $(t).index();\n\n            if (callback) {\n              callback.call(this, t);\n            }\n\n            if (p.length && p.hasClass(\"jstree-closed\")) {\n              this.open_node(p, false, true);\n            }\n\n            if (!skip_rename) {\n              this._show_input(t, function (obj, new_name, old_name) {\n                _this.__callback({\n                  \"obj\": obj,\n                  \"name\": new_name,\n                  \"parent\": p,\n                  \"position\": pos\n                });\n              });\n            } else {\n              _this.__callback({\n                \"obj\": t,\n                \"name\": this.get_text(t),\n                \"parent\": p,\n                \"position\": pos\n              });\n            }\n          });\n          return t;\n        },\n        remove: function remove(obj) {\n          obj = this._get_node(obj, true);\n\n          var p = this._get_parent(obj),\n              prev = this._get_prev(obj);\n\n          this.__rollback();\n\n          obj = this.delete_node(obj);\n\n          if (obj !== false) {\n            this.__callback({\n              \"obj\": obj,\n              \"prev\": prev,\n              \"parent\": p\n            });\n          }\n        },\n        check_move: function check_move() {\n          if (!this.__call_old()) {\n            return false;\n          }\n\n          var s = this._get_settings().crrm.move;\n\n          if (!s.check_move.call(this, this._get_move())) {\n            return false;\n          }\n\n          return true;\n        },\n        move_node: function move_node(obj, ref, position, is_copy, is_prepared, skip_check) {\n          var s = this._get_settings().crrm.move;\n\n          if (!is_prepared) {\n            if (typeof position === \"undefined\") {\n              position = s.default_position;\n            }\n\n            if (position === \"inside\" && !s.default_position.match(/^(before|after)$/)) {\n              position = s.default_position;\n            }\n\n            return this.__call_old(true, obj, ref, position, is_copy, false, skip_check);\n          } // if the move is already prepared\n\n\n          if (s.always_copy === true || s.always_copy === \"multitree\" && obj.rt.get_index() !== obj.ot.get_index()) {\n            is_copy = true;\n          }\n\n          this.__call_old(true, obj, ref, position, is_copy, true, skip_check);\n        },\n        cut: function cut(obj) {\n          obj = this._get_node(obj, true);\n\n          if (!obj || !obj.length) {\n            return false;\n          }\n\n          this.data.crrm.cp_nodes = false;\n          this.data.crrm.ct_nodes = obj;\n\n          this.__callback({\n            \"obj\": obj\n          });\n        },\n        copy: function copy(obj) {\n          obj = this._get_node(obj, true);\n\n          if (!obj || !obj.length) {\n            return false;\n          }\n\n          this.data.crrm.ct_nodes = false;\n          this.data.crrm.cp_nodes = obj;\n\n          this.__callback({\n            \"obj\": obj\n          });\n        },\n        paste: function paste(obj) {\n          obj = this._get_node(obj);\n\n          if (!obj || !obj.length) {\n            return false;\n          }\n\n          var nodes = this.data.crrm.ct_nodes ? this.data.crrm.ct_nodes : this.data.crrm.cp_nodes;\n\n          if (!this.data.crrm.ct_nodes && !this.data.crrm.cp_nodes) {\n            return false;\n          }\n\n          if (this.data.crrm.ct_nodes) {\n            this.move_node(this.data.crrm.ct_nodes, obj);\n            this.data.crrm.ct_nodes = false;\n          }\n\n          if (this.data.crrm.cp_nodes) {\n            this.move_node(this.data.crrm.cp_nodes, obj, false, true);\n          }\n\n          this.__callback({\n            \"obj\": obj,\n            \"nodes\": nodes\n          });\n        }\n      }\n    }); // include the crr plugin by default\n    // $.jstree.defaults.plugins.push(\"crrm\");\n  })(jQuery); //*/\n\n  /* \n   * jsTree themes plugin\n   * Handles loading and setting themes, as well as detecting path to themes, etc.\n   */\n\n\n  (function ($) {\n    var themes_loaded = []; // this variable stores the path to the themes folder - if left as false - it will be autodetected\n\n    $.jstree._themes = false;\n    $.jstree.plugin(\"themes\", {\n      __init: function __init() {\n        this.get_container().bind(\"init.jstree\", $.proxy(function () {\n          var s = this._get_settings().themes;\n\n          this.data.themes.dots = s.dots;\n          this.data.themes.icons = s.icons;\n          this.set_theme(s.theme, s.url);\n        }, this)).bind(\"loaded.jstree\", $.proxy(function () {\n          // bound here too, as simple HTML tree's won't honor dots & icons otherwise\n          if (!this.data.themes.dots) {\n            this.hide_dots();\n          } else {\n            this.show_dots();\n          }\n\n          if (!this.data.themes.icons) {\n            this.hide_icons();\n          } else {\n            this.show_icons();\n          }\n        }, this));\n      },\n      defaults: {\n        theme: \"default\",\n        url: false,\n        dots: true,\n        icons: true\n      },\n      _fn: {\n        set_theme: function set_theme(theme_name, theme_url) {\n          if (!theme_name) {\n            return false;\n          }\n\n          if (!theme_url) {\n            theme_url = $.jstree._themes + theme_name + '/style.css';\n          }\n\n          if ($.inArray(theme_url, themes_loaded) == -1) {\n            $.vakata.css.add_sheet({\n              \"url\": theme_url\n            });\n            themes_loaded.push(theme_url);\n          }\n\n          if (this.data.themes.theme != theme_name) {\n            this.get_container().removeClass('jstree-' + this.data.themes.theme);\n            this.data.themes.theme = theme_name;\n          }\n\n          this.get_container().addClass('jstree-' + theme_name);\n\n          if (!this.data.themes.dots) {\n            this.hide_dots();\n          } else {\n            this.show_dots();\n          }\n\n          if (!this.data.themes.icons) {\n            this.hide_icons();\n          } else {\n            this.show_icons();\n          }\n\n          this.__callback();\n        },\n        get_theme: function get_theme() {\n          return this.data.themes.theme;\n        },\n        show_dots: function show_dots() {\n          this.data.themes.dots = true;\n          this.get_container().children(\"ul\").removeClass(\"jstree-no-dots\");\n        },\n        hide_dots: function hide_dots() {\n          this.data.themes.dots = false;\n          this.get_container().children(\"ul\").addClass(\"jstree-no-dots\");\n        },\n        toggle_dots: function toggle_dots() {\n          if (this.data.themes.dots) {\n            this.hide_dots();\n          } else {\n            this.show_dots();\n          }\n        },\n        show_icons: function show_icons() {\n          this.data.themes.icons = true;\n          this.get_container().children(\"ul\").removeClass(\"jstree-no-icons\");\n        },\n        hide_icons: function hide_icons() {\n          this.data.themes.icons = false;\n          this.get_container().children(\"ul\").addClass(\"jstree-no-icons\");\n        },\n        toggle_icons: function toggle_icons() {\n          if (this.data.themes.icons) {\n            this.hide_icons();\n          } else {\n            this.show_icons();\n          }\n        }\n      }\n    }); // autodetect themes path\n\n    $(function () {\n      if ($.jstree._themes === false) {\n        $(\"script\").each(function () {\n          if (this.src.toString().match(/jquery\\.jstree[^\\/]*?\\.js(\\?.*)?$/)) {\n            $.jstree._themes = this.src.toString().replace(/jquery\\.jstree[^\\/]*?\\.js(\\?.*)?$/, \"\") + 'themes/';\n            return false;\n          }\n        });\n      }\n\n      if ($.jstree._themes === false) {\n        $.jstree._themes = \"themes/\";\n      }\n    }); // include the themes plugin by default\n\n    $.jstree.defaults.plugins.push(\"themes\");\n  })(jQuery); //*/\n\n  /*\n   * jsTree hotkeys plugin\n   * Enables keyboard navigation for all tree instances\n   * Depends on the jstree ui & jquery hotkeys plugins\n   */\n\n\n  (function ($) {\n    var bound = [];\n\n    function exec(i, event) {\n      var f = $.jstree._focused(),\n          tmp;\n\n      if (f && f.data && f.data.hotkeys && f.data.hotkeys.enabled) {\n        tmp = f._get_settings().hotkeys[i];\n\n        if (tmp) {\n          return tmp.call(f, event);\n        }\n      }\n    }\n\n    $.jstree.plugin(\"hotkeys\", {\n      __init: function __init() {\n        if (typeof $.hotkeys === \"undefined\") {\n          throw \"jsTree hotkeys: jQuery hotkeys plugin not included.\";\n        }\n\n        if (!this.data.ui) {\n          throw \"jsTree hotkeys: jsTree UI plugin not included.\";\n        }\n\n        $.each(this._get_settings().hotkeys, function (i, v) {\n          if (v !== false && $.inArray(i, bound) == -1) {\n            $(document).bind(\"keydown\", i, function (event) {\n              return exec(i, event);\n            });\n            bound.push(i);\n          }\n        });\n        this.get_container().bind(\"lock.jstree\", $.proxy(function () {\n          if (this.data.hotkeys.enabled) {\n            this.data.hotkeys.enabled = false;\n            this.data.hotkeys.revert = true;\n          }\n        }, this)).bind(\"unlock.jstree\", $.proxy(function () {\n          if (this.data.hotkeys.revert) {\n            this.data.hotkeys.enabled = true;\n          }\n        }, this));\n        this.enable_hotkeys();\n      },\n      defaults: {\n        \"up\": function up() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected || -1;\n          this.hover_node(this._get_prev(o));\n          return false;\n        },\n        \"ctrl+up\": function ctrlUp() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected || -1;\n          this.hover_node(this._get_prev(o));\n          return false;\n        },\n        \"shift+up\": function shiftUp() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected || -1;\n          this.hover_node(this._get_prev(o));\n          return false;\n        },\n        \"down\": function down() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected || -1;\n          this.hover_node(this._get_next(o));\n          return false;\n        },\n        \"ctrl+down\": function ctrlDown() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected || -1;\n          this.hover_node(this._get_next(o));\n          return false;\n        },\n        \"shift+down\": function shiftDown() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected || -1;\n          this.hover_node(this._get_next(o));\n          return false;\n        },\n        \"left\": function left() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected;\n\n          if (o) {\n            if (o.hasClass(\"jstree-open\")) {\n              this.close_node(o);\n            } else {\n              this.hover_node(this._get_prev(o));\n            }\n          }\n\n          return false;\n        },\n        \"ctrl+left\": function ctrlLeft() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected;\n\n          if (o) {\n            if (o.hasClass(\"jstree-open\")) {\n              this.close_node(o);\n            } else {\n              this.hover_node(this._get_prev(o));\n            }\n          }\n\n          return false;\n        },\n        \"shift+left\": function shiftLeft() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected;\n\n          if (o) {\n            if (o.hasClass(\"jstree-open\")) {\n              this.close_node(o);\n            } else {\n              this.hover_node(this._get_prev(o));\n            }\n          }\n\n          return false;\n        },\n        \"right\": function right() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected;\n\n          if (o && o.length) {\n            if (o.hasClass(\"jstree-closed\")) {\n              this.open_node(o);\n            } else {\n              this.hover_node(this._get_next(o));\n            }\n          }\n\n          return false;\n        },\n        \"ctrl+right\": function ctrlRight() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected;\n\n          if (o && o.length) {\n            if (o.hasClass(\"jstree-closed\")) {\n              this.open_node(o);\n            } else {\n              this.hover_node(this._get_next(o));\n            }\n          }\n\n          return false;\n        },\n        \"shift+right\": function shiftRight() {\n          var o = this.data.ui.hovered || this.data.ui.last_selected;\n\n          if (o && o.length) {\n            if (o.hasClass(\"jstree-closed\")) {\n              this.open_node(o);\n            } else {\n              this.hover_node(this._get_next(o));\n            }\n          }\n\n          return false;\n        },\n        \"space\": function space() {\n          if (this.data.ui.hovered) {\n            this.data.ui.hovered.children(\"a:eq(0)\").click();\n          }\n\n          return false;\n        },\n        \"ctrl+space\": function ctrlSpace(event) {\n          event.type = \"click\";\n\n          if (this.data.ui.hovered) {\n            this.data.ui.hovered.children(\"a:eq(0)\").trigger(event);\n          }\n\n          return false;\n        },\n        \"shift+space\": function shiftSpace(event) {\n          event.type = \"click\";\n\n          if (this.data.ui.hovered) {\n            this.data.ui.hovered.children(\"a:eq(0)\").trigger(event);\n          }\n\n          return false;\n        },\n        \"f2\": function f2() {\n          this.rename(this.data.ui.hovered || this.data.ui.last_selected);\n        },\n        \"del\": function del() {\n          this.remove(this.data.ui.hovered || this._get_node(null));\n        }\n      },\n      _fn: {\n        enable_hotkeys: function enable_hotkeys() {\n          this.data.hotkeys.enabled = true;\n        },\n        disable_hotkeys: function disable_hotkeys() {\n          this.data.hotkeys.enabled = false;\n        }\n      }\n    });\n  })(jQuery); //*/\n\n  /* \n   * jsTree JSON plugin\n   * The JSON data store. Datastores are build by overriding the `load_node` and `_is_loaded` functions.\n   */\n\n\n  (function ($) {\n    $.jstree.plugin(\"json_data\", {\n      __init: function __init() {\n        var s = this._get_settings().json_data;\n\n        if (s.progressive_unload) {\n          this.get_container().bind(\"after_close.jstree\", function (e, data) {\n            data.rslt.obj.children(\"ul\").remove();\n          });\n        }\n      },\n      defaults: {\n        // `data` can be a function:\n        //  * accepts two arguments - node being loaded and a callback to pass the result to\n        //  * will be executed in the current tree's scope & ajax won't be supported\n        data: false,\n        ajax: false,\n        correct_state: true,\n        progressive_render: false,\n        progressive_unload: false\n      },\n      _fn: {\n        load_node: function load_node(obj, s_call, e_call) {\n          var _this = this;\n\n          this.load_node_json(obj, function () {\n            _this.__callback({\n              \"obj\": _this._get_node(obj)\n            });\n\n            s_call.call(this);\n          }, e_call);\n        },\n        _is_loaded: function _is_loaded(obj) {\n          var s = this._get_settings().json_data;\n\n          obj = this._get_node(obj);\n          return obj == -1 || !obj || !s.ajax && !s.progressive_render && !$.isFunction(s.data) || obj.is(\".jstree-open, .jstree-leaf\") || obj.children(\"ul\").children(\"li\").length > 0;\n        },\n        refresh: function refresh(obj) {\n          obj = this._get_node(obj);\n\n          var s = this._get_settings().json_data;\n\n          if (obj && obj !== -1 && s.progressive_unload && ($.isFunction(s.data) || !!s.ajax)) {\n            obj.removeData(\"jstree_children\");\n          }\n\n          return this.__call_old();\n        },\n        load_node_json: function load_node_json(obj, s_call, e_call) {\n          var s = this.get_settings().json_data,\n              d,\n              error_func = function error_func() {},\n              success_func = function success_func() {};\n\n          obj = this._get_node(obj);\n\n          if (obj && obj !== -1 && (s.progressive_render || s.progressive_unload) && !obj.is(\".jstree-open, .jstree-leaf\") && obj.children(\"ul\").children(\"li\").length === 0 && obj.data(\"jstree_children\")) {\n            d = this._parse_json(obj.data(\"jstree_children\"), obj);\n\n            if (d) {\n              obj.append(d);\n\n              if (!s.progressive_unload) {\n                obj.removeData(\"jstree_children\");\n              }\n            }\n\n            this.clean_node(obj);\n\n            if (s_call) {\n              s_call.call(this);\n            }\n\n            return;\n          }\n\n          if (obj && obj !== -1) {\n            if (obj.data(\"jstree_is_loading\")) {\n              return;\n            } else {\n              obj.data(\"jstree_is_loading\", true);\n            }\n          }\n\n          switch (!0) {\n            case !s.data && !s.ajax:\n              throw \"Neither data nor ajax settings supplied.\";\n            // function option added here for easier model integration (also supporting async - see callback)\n\n            case $.isFunction(s.data):\n              s.data.call(this, obj, $.proxy(function (d) {\n                d = this._parse_json(d, obj);\n\n                if (!d) {\n                  if (obj === -1 || !obj) {\n                    if (s.correct_state) {\n                      this.get_container().children(\"ul\").empty();\n                    }\n                  } else {\n                    obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                    obj.removeData(\"jstree_is_loading\");\n\n                    if (s.correct_state) {\n                      this.correct_state(obj);\n                    }\n                  }\n\n                  if (e_call) {\n                    e_call.call(this);\n                  }\n                } else {\n                  if (obj === -1 || !obj) {\n                    this.get_container().children(\"ul\").empty().append(d.children());\n                  } else {\n                    obj.append(d).children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                    obj.removeData(\"jstree_is_loading\");\n                  }\n\n                  this.clean_node(obj);\n\n                  if (s_call) {\n                    s_call.call(this);\n                  }\n                }\n              }, this));\n              break;\n\n            case !!s.data && !s.ajax || !!s.data && !!s.ajax && (!obj || obj === -1):\n              if (!obj || obj == -1) {\n                d = this._parse_json(s.data, obj);\n\n                if (d) {\n                  this.get_container().children(\"ul\").empty().append(d.children());\n                  this.clean_node();\n                } else {\n                  if (s.correct_state) {\n                    this.get_container().children(\"ul\").empty();\n                  }\n                }\n              }\n\n              if (s_call) {\n                s_call.call(this);\n              }\n\n              break;\n\n            case !s.data && !!s.ajax || !!s.data && !!s.ajax && obj && obj !== -1:\n              error_func = function error_func(x, t, e) {\n                var ef = this.get_settings().json_data.ajax.error;\n\n                if (ef) {\n                  ef.call(this, x, t, e);\n                }\n\n                if (obj != -1 && obj.length) {\n                  obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                  obj.removeData(\"jstree_is_loading\");\n\n                  if (t === \"success\" && s.correct_state) {\n                    this.correct_state(obj);\n                  }\n                } else {\n                  if (t === \"success\" && s.correct_state) {\n                    this.get_container().children(\"ul\").empty();\n                  }\n                }\n\n                if (e_call) {\n                  e_call.call(this);\n                }\n              };\n\n              success_func = function success_func(d, t, x) {\n                var sf = this.get_settings().json_data.ajax.success;\n\n                if (sf) {\n                  d = sf.call(this, d, t, x) || d;\n                }\n\n                if (d === \"\" || d && d.toString && d.toString().replace(/^[\\s\\n]+$/, \"\") === \"\" || !$.isArray(d) && !$.isPlainObject(d)) {\n                  return error_func.call(this, x, t, \"\");\n                }\n\n                d = this._parse_json(d, obj);\n\n                if (d) {\n                  if (obj === -1 || !obj) {\n                    this.get_container().children(\"ul\").empty().append(d.children());\n                  } else {\n                    obj.append(d).children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                    obj.removeData(\"jstree_is_loading\");\n                  }\n\n                  this.clean_node(obj);\n\n                  if (s_call) {\n                    s_call.call(this);\n                  }\n                } else {\n                  if (obj === -1 || !obj) {\n                    if (s.correct_state) {\n                      this.get_container().children(\"ul\").empty();\n\n                      if (s_call) {\n                        s_call.call(this);\n                      }\n                    }\n                  } else {\n                    obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                    obj.removeData(\"jstree_is_loading\");\n\n                    if (s.correct_state) {\n                      this.correct_state(obj);\n\n                      if (s_call) {\n                        s_call.call(this);\n                      }\n                    }\n                  }\n                }\n              };\n\n              s.ajax.context = this;\n              s.ajax.error = error_func;\n              s.ajax.success = success_func;\n\n              if (!s.ajax.dataType) {\n                s.ajax.dataType = \"json\";\n              }\n\n              if ($.isFunction(s.ajax.url)) {\n                s.ajax.url = s.ajax.url.call(this, obj);\n              }\n\n              if ($.isFunction(s.ajax.data)) {\n                s.ajax.data = s.ajax.data.call(this, obj);\n              }\n\n              $.ajax(s.ajax);\n              break;\n          }\n        },\n        _parse_json: function _parse_json(js, obj, is_callback) {\n          var d = false,\n              p = this._get_settings(),\n              s = p.json_data,\n              t = p.core.html_titles,\n              tmp,\n              i,\n              j,\n              ul1,\n              ul2;\n\n          if (!js) {\n            return d;\n          }\n\n          if (s.progressive_unload && obj && obj !== -1) {\n            obj.data(\"jstree_children\", d);\n          }\n\n          if ($.isArray(js)) {\n            d = $('<ul>');\n\n            if (!js.length) {\n              return false;\n            }\n\n            for (i = 0, j = js.length; i < j; i++) {\n              tmp = this._parse_json(js[i], obj, true);\n\n              if (tmp.length) {\n                d = d.append(tmp);\n              }\n            }\n\n            d = d.children();\n          } else {\n            if (typeof js == \"string\") {\n              js = {\n                data: js\n              };\n            }\n\n            if (!js.data && js.data !== \"\") {\n              return d;\n            }\n\n            d = $(\"<li />\");\n\n            if (js.attr) {\n              d.attr(js.attr);\n            }\n\n            if (js.metadata) {\n              d.data(js.metadata);\n            }\n\n            if (js.state) {\n              d.addClass(\"jstree-\" + js.state);\n            }\n\n            if (!$.isArray(js.data)) {\n              tmp = js.data;\n              js.data = [];\n              js.data.push(tmp);\n            }\n\n            $.each(js.data, function (i, m) {\n              tmp = $(\"<a />\");\n\n              if ($.isFunction(m)) {\n                m = m.call(this, js);\n              }\n\n              if (typeof m == \"string\") {\n                tmp.attr('href', '#')[t ? \"html\" : \"text\"](m);\n              } else {\n                if (!m.attr) {\n                  m.attr = {};\n                }\n\n                if (!m.attr.href) {\n                  m.attr.href = '#';\n                }\n\n                tmp.attr(m.attr)[t ? \"html\" : \"text\"](m.title);\n\n                if (m.language) {\n                  tmp.addClass(m.language);\n                }\n              }\n\n              tmp.prepend(\"<ins class='jstree-icon'>&#160;</ins>\");\n\n              if (!m.icon && js.icon) {\n                m.icon = js.icon;\n              }\n\n              if (m.icon) {\n                if (m.icon.indexOf(\"/\") === -1) {\n                  tmp.children(\"ins\").addClass(m.icon);\n                } else {\n                  tmp.children(\"ins\").css(\"background\", \"url('\" + m.icon + \"') center center no-repeat\");\n                }\n              }\n\n              d.append(tmp);\n            });\n            d.prepend(\"<ins class='jstree-icon'>&#160;</ins>\");\n\n            if (js.children) {\n              if (s.progressive_render && js.state !== \"open\") {\n                d.addClass(\"jstree-closed\").data(\"jstree_children\", js.children);\n              } else {\n                if (s.progressive_unload) {\n                  d.data(\"jstree_children\", js.children);\n                }\n\n                if ($.isArray(js.children) && js.children.length) {\n                  tmp = this._parse_json(js.children, obj, true);\n\n                  if (tmp.length) {\n                    ul2 = $(\"<ul />\");\n                    ul2.append(tmp);\n                    d.append(ul2);\n                  }\n                }\n              }\n            }\n          }\n\n          if (!is_callback) {\n            ul1 = $(\"<ul />\");\n            ul1.append(d);\n            d = ul1;\n          }\n\n          return d;\n        },\n        get_json: function get_json(obj, li_attr, a_attr, is_callback) {\n          var result = [],\n              s = this._get_settings(),\n              _this = this,\n              tmp1,\n              tmp2,\n              li,\n              a,\n              t,\n              lang;\n\n          obj = this._get_node(obj);\n\n          if (!obj || obj === -1) {\n            obj = this.get_container().find(\"> ul > li\");\n          }\n\n          li_attr = $.isArray(li_attr) ? li_attr : [\"id\", \"class\"];\n\n          if (!is_callback && this.data.types) {\n            li_attr.push(s.types.type_attr);\n          }\n\n          a_attr = $.isArray(a_attr) ? a_attr : [];\n          obj.each(function () {\n            li = $(this);\n            tmp1 = {\n              data: []\n            };\n\n            if (li_attr.length) {\n              tmp1.attr = {};\n            }\n\n            $.each(li_attr, function (i, v) {\n              tmp2 = li.attr(v);\n\n              if (tmp2 && tmp2.length && tmp2.replace(/jstree[^ ]*/ig, '').length) {\n                tmp1.attr[v] = (\" \" + tmp2).replace(/ jstree[^ ]*/ig, '').replace(/\\s+$/ig, \" \").replace(/^ /, \"\").replace(/ $/, \"\");\n              }\n            });\n\n            if (li.hasClass(\"jstree-open\")) {\n              tmp1.state = \"open\";\n            }\n\n            if (li.hasClass(\"jstree-closed\")) {\n              tmp1.state = \"closed\";\n            }\n\n            if (li.data()) {\n              tmp1.metadata = li.data();\n            }\n\n            a = li.children(\"a\");\n            a.each(function () {\n              t = $(this);\n\n              if (a_attr.length || $.inArray(\"languages\", s.plugins) !== -1 || t.children(\"ins\").get(0).style.backgroundImage.length || t.children(\"ins\").get(0).className && t.children(\"ins\").get(0).className.replace(/jstree[^ ]*|$/ig, '').length) {\n                lang = false;\n\n                if ($.inArray(\"languages\", s.plugins) !== -1 && $.isArray(s.languages) && s.languages.length) {\n                  $.each(s.languages, function (l, lv) {\n                    if (t.hasClass(lv)) {\n                      lang = lv;\n                      return false;\n                    }\n                  });\n                }\n\n                tmp2 = {\n                  attr: {},\n                  title: _this.get_text(t, lang)\n                };\n                $.each(a_attr, function (k, z) {\n                  tmp2.attr[z] = (\" \" + (t.attr(z) || \"\")).replace(/ jstree[^ ]*/ig, '').replace(/\\s+$/ig, \" \").replace(/^ /, \"\").replace(/ $/, \"\");\n                });\n\n                if ($.inArray(\"languages\", s.plugins) !== -1 && $.isArray(s.languages) && s.languages.length) {\n                  $.each(s.languages, function (k, z) {\n                    if (t.hasClass(z)) {\n                      tmp2.language = z;\n                      return true;\n                    }\n                  });\n                }\n\n                if (t.children(\"ins\").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/^\\s+$/ig, \"\").length) {\n                  tmp2.icon = t.children(\"ins\").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/\\s+$/ig, \" \").replace(/^ /, \"\").replace(/ $/, \"\");\n                }\n\n                if (t.children(\"ins\").get(0).style.backgroundImage.length) {\n                  tmp2.icon = t.children(\"ins\").get(0).style.backgroundImage.replace(\"url(\", \"\").replace(\")\", \"\");\n                }\n              } else {\n                tmp2 = _this.get_text(t);\n              }\n\n              if (a.length > 1) {\n                tmp1.data.push(tmp2);\n              } else {\n                tmp1.data = tmp2;\n              }\n            });\n            li = li.find(\"> ul > li\");\n\n            if (li.length) {\n              tmp1.children = _this.get_json(li, li_attr, a_attr, true);\n            }\n\n            result.push(tmp1);\n          });\n          return result;\n        }\n      }\n    });\n  })(jQuery); //*/\n\n  /* \n   * jsTree languages plugin\n   * Adds support for multiple language versions in one tree\n   * This basically allows for many titles coexisting in one node, but only one of them being visible at any given time\n   * This is useful for maintaining the same structure in many languages (hence the name of the plugin)\n   */\n\n\n  (function ($) {\n    var sh = false;\n    $.jstree.plugin(\"languages\", {\n      __init: function __init() {\n        this._load_css();\n      },\n      defaults: [],\n      _fn: {\n        set_lang: function set_lang(i) {\n          var langs = this._get_settings().languages,\n              st = false,\n              selector = \".jstree-\" + this.get_index() + ' a';\n\n          if (!$.isArray(langs) || langs.length === 0) {\n            return false;\n          }\n\n          if ($.inArray(i, langs) == -1) {\n            if (!!langs[i]) {\n              i = langs[i];\n            } else {\n              return false;\n            }\n          }\n\n          if (i == this.data.languages.current_language) {\n            return true;\n          }\n\n          st = $.vakata.css.get_css(selector + \".\" + this.data.languages.current_language, false, sh);\n\n          if (st !== false) {\n            st.style.display = \"none\";\n          }\n\n          st = $.vakata.css.get_css(selector + \".\" + i, false, sh);\n\n          if (st !== false) {\n            st.style.display = \"\";\n          }\n\n          this.data.languages.current_language = i;\n\n          this.__callback(i);\n\n          return true;\n        },\n        get_lang: function get_lang() {\n          return this.data.languages.current_language;\n        },\n        _get_string: function _get_string(key, lang) {\n          var langs = this._get_settings().languages,\n              s = this._get_settings().core.strings;\n\n          if ($.isArray(langs) && langs.length) {\n            lang = lang && $.inArray(lang, langs) != -1 ? lang : this.data.languages.current_language;\n          }\n\n          if (s[lang] && s[lang][key]) {\n            return s[lang][key];\n          }\n\n          if (s[key]) {\n            return s[key];\n          }\n\n          return key;\n        },\n        get_text: function get_text(obj, lang) {\n          obj = this._get_node(obj) || this.data.ui.last_selected;\n\n          if (!obj.size()) {\n            return false;\n          }\n\n          var langs = this._get_settings().languages,\n              s = this._get_settings().core.html_titles;\n\n          if ($.isArray(langs) && langs.length) {\n            lang = lang && $.inArray(lang, langs) != -1 ? lang : this.data.languages.current_language;\n            obj = obj.children(\"a.\" + lang);\n          } else {\n            obj = obj.children(\"a:eq(0)\");\n          }\n\n          if (s) {\n            obj = obj.clone();\n            obj.children(\"INS\").remove();\n            return obj.html();\n          } else {\n            obj = obj.contents().filter(function () {\n              return this.nodeType == 3;\n            })[0];\n            return obj.nodeValue;\n          }\n        },\n        set_text: function set_text(obj, val, lang) {\n          obj = this._get_node(obj) || this.data.ui.last_selected;\n\n          if (!obj.size()) {\n            return false;\n          }\n\n          var langs = this._get_settings().languages,\n              s = this._get_settings().core.html_titles,\n              tmp;\n\n          if ($.isArray(langs) && langs.length) {\n            lang = lang && $.inArray(lang, langs) != -1 ? lang : this.data.languages.current_language;\n            obj = obj.children(\"a.\" + lang);\n          } else {\n            obj = obj.children(\"a:eq(0)\");\n          }\n\n          if (s) {\n            tmp = obj.children(\"INS\").clone();\n            obj.html(val).prepend(tmp);\n\n            this.__callback({\n              \"obj\": obj,\n              \"name\": val,\n              \"lang\": lang\n            });\n\n            return true;\n          } else {\n            obj = obj.contents().filter(function () {\n              return this.nodeType == 3;\n            })[0];\n\n            this.__callback({\n              \"obj\": obj,\n              \"name\": val,\n              \"lang\": lang\n            });\n\n            return obj.nodeValue = val;\n          }\n        },\n        _load_css: function _load_css() {\n          var langs = this._get_settings().languages,\n              str = \"/* languages css */\",\n              selector = \".jstree-\" + this.get_index() + ' a',\n              ln;\n\n          if ($.isArray(langs) && langs.length) {\n            this.data.languages.current_language = langs[0];\n\n            for (ln = 0; ln < langs.length; ln++) {\n              str += selector + \".\" + langs[ln] + \" {\";\n\n              if (langs[ln] != this.data.languages.current_language) {\n                str += \" display:none; \";\n              }\n\n              str += \" } \";\n            }\n\n            sh = $.vakata.css.add_sheet({\n              'str': str,\n              'title': \"jstree-languages\"\n            });\n          }\n        },\n        create_node: function create_node(obj, position, js, callback) {\n          var t = this.__call_old(true, obj, position, js, function (t) {\n            var langs = this._get_settings().languages,\n                a = t.children(\"a\"),\n                ln;\n\n            if ($.isArray(langs) && langs.length) {\n              for (ln = 0; ln < langs.length; ln++) {\n                if (!a.is(\".\" + langs[ln])) {\n                  t.append(a.eq(0).clone().removeClass(langs.join(\" \")).addClass(langs[ln]));\n                }\n              }\n\n              a.not(\".\" + langs.join(\", .\")).remove();\n            }\n\n            if (callback) {\n              callback.call(this, t);\n            }\n          });\n\n          return t;\n        }\n      }\n    });\n  })(jQuery); //*/\n\n  /*\n   * jsTree cookies plugin\n   * Stores the currently opened/selected nodes in a cookie and then restores them\n   * Depends on the jquery.cookie plugin\n   */\n\n\n  (function ($) {\n    $.jstree.plugin(\"cookies\", {\n      __init: function __init() {\n        if (typeof $.cookie === \"undefined\") {\n          throw \"jsTree cookie: jQuery cookie plugin not included.\";\n        }\n\n        var s = this._get_settings().cookies,\n            tmp;\n\n        if (!!s.save_loaded) {\n          tmp = $.cookie(s.save_loaded);\n\n          if (tmp && tmp.length) {\n            this.data.core.to_load = tmp.split(\",\");\n          }\n        }\n\n        if (!!s.save_opened) {\n          tmp = $.cookie(s.save_opened);\n\n          if (tmp && tmp.length) {\n            this.data.core.to_open = tmp.split(\",\");\n          }\n        }\n\n        if (!!s.save_selected) {\n          tmp = $.cookie(s.save_selected);\n\n          if (tmp && tmp.length && this.data.ui) {\n            this.data.ui.to_select = tmp.split(\",\");\n          }\n        }\n\n        this.get_container().one((this.data.ui ? \"reselect\" : \"reopen\") + \".jstree\", $.proxy(function () {\n          this.get_container().bind(\"open_node.jstree close_node.jstree select_node.jstree deselect_node.jstree\", $.proxy(function (e) {\n            if (this._get_settings().cookies.auto_save) {\n              this.save_cookie((e.handleObj.namespace + e.handleObj.type).replace(\"jstree\", \"\"));\n            }\n          }, this));\n        }, this));\n      },\n      defaults: {\n        save_loaded: \"jstree_load\",\n        save_opened: \"jstree_open\",\n        save_selected: \"jstree_select\",\n        auto_save: true,\n        cookie_options: {}\n      },\n      _fn: {\n        save_cookie: function save_cookie(c) {\n          if (this.data.core.refreshing) {\n            return;\n          }\n\n          var s = this._get_settings().cookies;\n\n          if (!c) {\n            // if called manually and not by event\n            if (s.save_loaded) {\n              this.save_loaded();\n              $.cookie(s.save_loaded, this.data.core.to_load.join(\",\"), s.cookie_options);\n            }\n\n            if (s.save_opened) {\n              this.save_opened();\n              $.cookie(s.save_opened, this.data.core.to_open.join(\",\"), s.cookie_options);\n            }\n\n            if (s.save_selected && this.data.ui) {\n              this.save_selected();\n              $.cookie(s.save_selected, this.data.ui.to_select.join(\",\"), s.cookie_options);\n            }\n\n            return;\n          }\n\n          switch (c) {\n            case \"open_node\":\n            case \"close_node\":\n              if (!!s.save_opened) {\n                this.save_opened();\n                $.cookie(s.save_opened, this.data.core.to_open.join(\",\"), s.cookie_options);\n              }\n\n              if (!!s.save_loaded) {\n                this.save_loaded();\n                $.cookie(s.save_loaded, this.data.core.to_load.join(\",\"), s.cookie_options);\n              }\n\n              break;\n\n            case \"select_node\":\n            case \"deselect_node\":\n              if (!!s.save_selected && this.data.ui) {\n                this.save_selected();\n                $.cookie(s.save_selected, this.data.ui.to_select.join(\",\"), s.cookie_options);\n              }\n\n              break;\n          }\n        }\n      }\n    }); // include cookies by default\n    // $.jstree.defaults.plugins.push(\"cookies\");\n  })(jQuery); //*/\n\n  /*\n   * jsTree sort plugin\n   * Sorts items alphabetically (or using any other function)\n   */\n\n\n  (function ($) {\n    $.jstree.plugin(\"sort\", {\n      __init: function __init() {\n        this.get_container().bind(\"load_node.jstree\", $.proxy(function (e, data) {\n          var obj = this._get_node(data.rslt.obj);\n\n          obj = obj === -1 ? this.get_container().children(\"ul\") : obj.children(\"ul\");\n          this.sort(obj);\n        }, this)).bind(\"rename_node.jstree create_node.jstree create.jstree\", $.proxy(function (e, data) {\n          this.sort(data.rslt.obj.parent());\n        }, this)).bind(\"move_node.jstree\", $.proxy(function (e, data) {\n          var m = data.rslt.np == -1 ? this.get_container() : data.rslt.np;\n          this.sort(m.children(\"ul\"));\n        }, this));\n      },\n      defaults: function defaults(a, b) {\n        return this.get_text(a) > this.get_text(b) ? 1 : -1;\n      },\n      _fn: {\n        sort: function sort(obj) {\n          var s = this._get_settings().sort,\n              t = this;\n\n          obj.append($.makeArray(obj.children(\"li\")).sort($.proxy(s, t)));\n          obj.find(\"> li > ul\").each(function () {\n            t.sort($(this));\n          });\n          this.clean_node(obj);\n        }\n      }\n    });\n  })(jQuery); //*/\n\n  /*\n   * jsTree DND plugin\n   * Drag and drop plugin for moving/copying nodes\n   */\n\n\n  (function ($) {\n    var o = false,\n        r = false,\n        m = false,\n        ml = false,\n        sli = false,\n        sti = false,\n        dir1 = false,\n        dir2 = false,\n        last_pos = false;\n    $.vakata.dnd = {\n      is_down: false,\n      is_drag: false,\n      helper: false,\n      scroll_spd: 10,\n      init_x: 0,\n      init_y: 0,\n      threshold: 5,\n      helper_left: 5,\n      helper_top: 10,\n      user_data: {},\n      drag_start: function drag_start(e, data, html) {\n        if ($.vakata.dnd.is_drag) {\n          $.vakata.drag_stop({});\n        }\n\n        try {\n          e.currentTarget.unselectable = \"on\";\n\n          e.currentTarget.onselectstart = function () {\n            return false;\n          };\n\n          if (e.currentTarget.style) {\n            e.currentTarget.style.MozUserSelect = \"none\";\n          }\n        } catch (err) {}\n\n        $.vakata.dnd.init_x = e.pageX;\n        $.vakata.dnd.init_y = e.pageY;\n        $.vakata.dnd.user_data = data;\n        $.vakata.dnd.is_down = true;\n        $.vakata.dnd.helper = $(\"<div id='vakata-dragged' />\").html(html); //.fadeTo(10,0.25);\n\n        $(document).bind(\"mousemove\", $.vakata.dnd.drag);\n        $(document).bind(\"mouseup\", $.vakata.dnd.drag_stop);\n        return false;\n      },\n      drag: function drag(e) {\n        if (!$.vakata.dnd.is_down) {\n          return;\n        }\n\n        if (!$.vakata.dnd.is_drag) {\n          if (Math.abs(e.pageX - $.vakata.dnd.init_x) > 5 || Math.abs(e.pageY - $.vakata.dnd.init_y) > 5) {\n            $.vakata.dnd.helper.appendTo(\"body\");\n            $.vakata.dnd.is_drag = true;\n            $(document).triggerHandler(\"drag_start.vakata\", {\n              \"event\": e,\n              \"data\": $.vakata.dnd.user_data\n            });\n          } else {\n            return;\n          }\n        } // maybe use a scrolling parent element instead of document?\n\n\n        if (e.type === \"mousemove\") {\n          // thought of adding scroll in order to move the helper, but mouse poisition is n/a\n          var d = $(document),\n              t = d.scrollTop(),\n              l = d.scrollLeft();\n\n          if (e.pageY - t < 20) {\n            if (sti && dir1 === \"down\") {\n              clearInterval(sti);\n              sti = false;\n            }\n\n            if (!sti) {\n              dir1 = \"up\";\n              sti = setInterval(function () {\n                $(document).scrollTop($(document).scrollTop() - $.vakata.dnd.scroll_spd);\n              }, 150);\n            }\n          } else {\n            if (sti && dir1 === \"up\") {\n              clearInterval(sti);\n              sti = false;\n            }\n          }\n\n          if ($(window).height() - (e.pageY - t) < 20) {\n            if (sti && dir1 === \"up\") {\n              clearInterval(sti);\n              sti = false;\n            }\n\n            if (!sti) {\n              dir1 = \"down\";\n              sti = setInterval(function () {\n                $(document).scrollTop($(document).scrollTop() + $.vakata.dnd.scroll_spd);\n              }, 150);\n            }\n          } else {\n            if (sti && dir1 === \"down\") {\n              clearInterval(sti);\n              sti = false;\n            }\n          }\n\n          if (e.pageX - l < 20) {\n            if (sli && dir2 === \"right\") {\n              clearInterval(sli);\n              sli = false;\n            }\n\n            if (!sli) {\n              dir2 = \"left\";\n              sli = setInterval(function () {\n                $(document).scrollLeft($(document).scrollLeft() - $.vakata.dnd.scroll_spd);\n              }, 150);\n            }\n          } else {\n            if (sli && dir2 === \"left\") {\n              clearInterval(sli);\n              sli = false;\n            }\n          }\n\n          if ($(window).width() - (e.pageX - l) < 20) {\n            if (sli && dir2 === \"left\") {\n              clearInterval(sli);\n              sli = false;\n            }\n\n            if (!sli) {\n              dir2 = \"right\";\n              sli = setInterval(function () {\n                $(document).scrollLeft($(document).scrollLeft() + $.vakata.dnd.scroll_spd);\n              }, 150);\n            }\n          } else {\n            if (sli && dir2 === \"right\") {\n              clearInterval(sli);\n              sli = false;\n            }\n          }\n        }\n\n        $.vakata.dnd.helper.css({\n          left: e.pageX + $.vakata.dnd.helper_left + \"px\",\n          top: e.pageY + $.vakata.dnd.helper_top + \"px\"\n        });\n        $(document).triggerHandler(\"drag.vakata\", {\n          \"event\": e,\n          \"data\": $.vakata.dnd.user_data\n        });\n      },\n      drag_stop: function drag_stop(e) {\n        if (sli) {\n          clearInterval(sli);\n        }\n\n        if (sti) {\n          clearInterval(sti);\n        }\n\n        $(document).unbind(\"mousemove\", $.vakata.dnd.drag);\n        $(document).unbind(\"mouseup\", $.vakata.dnd.drag_stop);\n        $(document).triggerHandler(\"drag_stop.vakata\", {\n          \"event\": e,\n          \"data\": $.vakata.dnd.user_data\n        });\n        $.vakata.dnd.helper.remove();\n        $.vakata.dnd.init_x = 0;\n        $.vakata.dnd.init_y = 0;\n        $.vakata.dnd.user_data = {};\n        $.vakata.dnd.is_down = false;\n        $.vakata.dnd.is_drag = false;\n      }\n    };\n    $(function () {\n      var css_string = '#vakata-dragged { display:block; margin:0 0 0 0; padding:4px 4px 4px 24px; position:absolute; top:-2000px; line-height:16px; z-index:10000; } ';\n      $.vakata.css.add_sheet({\n        str: css_string,\n        title: \"vakata\"\n      });\n    });\n    $.jstree.plugin(\"dnd\", {\n      __init: function __init() {\n        this.data.dnd = {\n          active: false,\n          after: false,\n          inside: false,\n          before: false,\n          off: false,\n          prepared: false,\n          w: 0,\n          to1: false,\n          to2: false,\n          cof: false,\n          cw: false,\n          ch: false,\n          i1: false,\n          i2: false,\n          mto: false\n        };\n        this.get_container().bind(\"mouseenter.jstree\", $.proxy(function (e) {\n          if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {\n            if (this.data.themes) {\n              m.attr(\"class\", \"jstree-\" + this.data.themes.theme);\n\n              if (ml) {\n                ml.attr(\"class\", \"jstree-\" + this.data.themes.theme);\n              }\n\n              $.vakata.dnd.helper.attr(\"class\", \"jstree-dnd-helper jstree-\" + this.data.themes.theme);\n            } //if($(e.currentTarget).find(\"> ul > li\").length === 0) {\n\n\n            if (e.currentTarget === e.target && $.vakata.dnd.user_data.obj && $($.vakata.dnd.user_data.obj).length && $($.vakata.dnd.user_data.obj).parents(\".jstree:eq(0)\")[0] !== e.target) {\n              // node should not be from the same tree\n              var tr = $.jstree._reference(e.target),\n                  dc;\n\n              if (tr.data.dnd.foreign) {\n                dc = tr._get_settings().dnd.drag_check.call(this, {\n                  \"o\": o,\n                  \"r\": tr.get_container(),\n                  is_root: true\n                });\n\n                if (dc === true || dc.inside === true || dc.before === true || dc.after === true) {\n                  $.vakata.dnd.helper.children(\"ins\").attr(\"class\", \"jstree-ok\");\n                }\n              } else {\n                tr.prepare_move(o, tr.get_container(), \"last\");\n\n                if (tr.check_move()) {\n                  $.vakata.dnd.helper.children(\"ins\").attr(\"class\", \"jstree-ok\");\n                }\n              }\n            }\n          }\n        }, this)).bind(\"mouseup.jstree\", $.proxy(function (e) {\n          //if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && $(e.currentTarget).find(\"> ul > li\").length === 0) {\n          if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && e.currentTarget === e.target && $.vakata.dnd.user_data.obj && $($.vakata.dnd.user_data.obj).length && $($.vakata.dnd.user_data.obj).parents(\".jstree:eq(0)\")[0] !== e.target) {\n            // node should not be from the same tree\n            var tr = $.jstree._reference(e.currentTarget),\n                dc;\n\n            if (tr.data.dnd.foreign) {\n              dc = tr._get_settings().dnd.drag_check.call(this, {\n                \"o\": o,\n                \"r\": tr.get_container(),\n                is_root: true\n              });\n\n              if (dc === true || dc.inside === true || dc.before === true || dc.after === true) {\n                tr._get_settings().dnd.drag_finish.call(this, {\n                  \"o\": o,\n                  \"r\": tr.get_container(),\n                  is_root: true\n                });\n              }\n            } else {\n              tr.move_node(o, tr.get_container(), \"last\", e[tr._get_settings().dnd.copy_modifier + \"Key\"]);\n            }\n          }\n        }, this)).bind(\"mouseleave.jstree\", $.proxy(function (e) {\n          if (e.relatedTarget && e.relatedTarget.id && e.relatedTarget.id === \"jstree-marker-line\") {\n            return false;\n          }\n\n          if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {\n            if (this.data.dnd.i1) {\n              clearInterval(this.data.dnd.i1);\n            }\n\n            if (this.data.dnd.i2) {\n              clearInterval(this.data.dnd.i2);\n            }\n\n            if (this.data.dnd.to1) {\n              clearTimeout(this.data.dnd.to1);\n            }\n\n            if (this.data.dnd.to2) {\n              clearTimeout(this.data.dnd.to2);\n            }\n\n            if ($.vakata.dnd.helper.children(\"ins\").hasClass(\"jstree-ok\")) {\n              $.vakata.dnd.helper.children(\"ins\").attr(\"class\", \"jstree-invalid\");\n            }\n          }\n        }, this)).bind(\"mousemove.jstree\", $.proxy(function (e) {\n          if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {\n            var cnt = this.get_container()[0]; // Horizontal scroll\n\n            if (e.pageX + 24 > this.data.dnd.cof.left + this.data.dnd.cw) {\n              if (this.data.dnd.i1) {\n                clearInterval(this.data.dnd.i1);\n              }\n\n              this.data.dnd.i1 = setInterval($.proxy(function () {\n                this.scrollLeft += $.vakata.dnd.scroll_spd;\n              }, cnt), 100);\n            } else if (e.pageX - 24 < this.data.dnd.cof.left) {\n              if (this.data.dnd.i1) {\n                clearInterval(this.data.dnd.i1);\n              }\n\n              this.data.dnd.i1 = setInterval($.proxy(function () {\n                this.scrollLeft -= $.vakata.dnd.scroll_spd;\n              }, cnt), 100);\n            } else {\n              if (this.data.dnd.i1) {\n                clearInterval(this.data.dnd.i1);\n              }\n            } // Vertical scroll\n\n\n            if (e.pageY + 24 > this.data.dnd.cof.top + this.data.dnd.ch) {\n              if (this.data.dnd.i2) {\n                clearInterval(this.data.dnd.i2);\n              }\n\n              this.data.dnd.i2 = setInterval($.proxy(function () {\n                this.scrollTop += $.vakata.dnd.scroll_spd;\n              }, cnt), 100);\n            } else if (e.pageY - 24 < this.data.dnd.cof.top) {\n              if (this.data.dnd.i2) {\n                clearInterval(this.data.dnd.i2);\n              }\n\n              this.data.dnd.i2 = setInterval($.proxy(function () {\n                this.scrollTop -= $.vakata.dnd.scroll_spd;\n              }, cnt), 100);\n            } else {\n              if (this.data.dnd.i2) {\n                clearInterval(this.data.dnd.i2);\n              }\n            }\n          }\n        }, this)).bind(\"scroll.jstree\", $.proxy(function (e) {\n          if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && m && ml) {\n            m.hide();\n            ml.hide();\n          }\n        }, this)).delegate(\"a\", \"mousedown.jstree\", $.proxy(function (e) {\n          if (e.which === 1) {\n            this.start_drag(e.currentTarget, e);\n            return false;\n          }\n        }, this)).delegate(\"a\", \"mouseenter.jstree\", $.proxy(function (e) {\n          if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {\n            this.dnd_enter(e.currentTarget);\n          }\n        }, this)).delegate(\"a\", \"mousemove.jstree\", $.proxy(function (e) {\n          if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {\n            if (!r || !r.length || r.children(\"a\")[0] !== e.currentTarget) {\n              this.dnd_enter(e.currentTarget);\n            }\n\n            if (typeof this.data.dnd.off.top === \"undefined\") {\n              this.data.dnd.off = $(e.target).offset();\n            }\n\n            this.data.dnd.w = (e.pageY - (this.data.dnd.off.top || 0)) % this.data.core.li_height;\n\n            if (this.data.dnd.w < 0) {\n              this.data.dnd.w += this.data.core.li_height;\n            }\n\n            this.dnd_show();\n          }\n        }, this)).delegate(\"a\", \"mouseleave.jstree\", $.proxy(function (e) {\n          if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {\n            if (e.relatedTarget && e.relatedTarget.id && e.relatedTarget.id === \"jstree-marker-line\") {\n              return false;\n            }\n\n            if (m) {\n              m.hide();\n            }\n\n            if (ml) {\n              ml.hide();\n            }\n            /*\n            var ec = $(e.currentTarget).closest(\"li\"), \n            \ter = $(e.relatedTarget).closest(\"li\");\n            if(er[0] !== ec.prev()[0] && er[0] !== ec.next()[0]) {\n            \tif(m) { m.hide(); }\n            \tif(ml) { ml.hide(); }\n            }\n            */\n\n\n            this.data.dnd.mto = setTimeout(function (t) {\n              return function () {\n                t.dnd_leave(e);\n              };\n            }(this), 0);\n          }\n        }, this)).delegate(\"a\", \"mouseup.jstree\", $.proxy(function (e) {\n          if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {\n            this.dnd_finish(e);\n          }\n        }, this));\n        $(document).bind(\"drag_stop.vakata\", $.proxy(function () {\n          if (this.data.dnd.to1) {\n            clearTimeout(this.data.dnd.to1);\n          }\n\n          if (this.data.dnd.to2) {\n            clearTimeout(this.data.dnd.to2);\n          }\n\n          if (this.data.dnd.i1) {\n            clearInterval(this.data.dnd.i1);\n          }\n\n          if (this.data.dnd.i2) {\n            clearInterval(this.data.dnd.i2);\n          }\n\n          this.data.dnd.after = false;\n          this.data.dnd.before = false;\n          this.data.dnd.inside = false;\n          this.data.dnd.off = false;\n          this.data.dnd.prepared = false;\n          this.data.dnd.w = false;\n          this.data.dnd.to1 = false;\n          this.data.dnd.to2 = false;\n          this.data.dnd.i1 = false;\n          this.data.dnd.i2 = false;\n          this.data.dnd.active = false;\n          this.data.dnd.foreign = false;\n\n          if (m) {\n            m.css({\n              \"top\": \"-2000px\"\n            });\n          }\n\n          if (ml) {\n            ml.css({\n              \"top\": \"-2000px\"\n            });\n          }\n        }, this)).bind(\"drag_start.vakata\", $.proxy(function (e, data) {\n          if (data.data.jstree) {\n            var et = $(data.event.target);\n\n            if (et.closest(\".jstree\").hasClass(\"jstree-\" + this.get_index())) {\n              this.dnd_enter(et);\n            }\n          }\n        }, this));\n        /*\n        .bind(\"keydown.jstree-\" + this.get_index() + \" keyup.jstree-\" + this.get_index(), $.proxy(function(e) {\n        \t\tif($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && !this.data.dnd.foreign) {\n        \t\t\tvar h = $.vakata.dnd.helper.children(\"ins\");\n        \t\t\tif(e[this._get_settings().dnd.copy_modifier + \"Key\"] && h.hasClass(\"jstree-ok\")) {\n        \t\t\t\th.parent().html(h.parent().html().replace(/ \\(Copy\\)$/, \"\") + \" (Copy)\");\n        \t\t\t} \n        \t\t\telse {\n        \t\t\t\th.parent().html(h.parent().html().replace(/ \\(Copy\\)$/, \"\"));\n        \t\t\t}\n        \t\t}\n        \t}, this)); */\n\n        var s = this._get_settings().dnd;\n\n        if (s.drag_target) {\n          $(document).delegate(s.drag_target, \"mousedown.jstree-\" + this.get_index(), $.proxy(function (e) {\n            o = e.target;\n            $.vakata.dnd.drag_start(e, {\n              jstree: true,\n              obj: e.target\n            }, \"<ins class='jstree-icon'></ins>\" + $(e.target).text());\n\n            if (this.data.themes) {\n              if (m) {\n                m.attr(\"class\", \"jstree-\" + this.data.themes.theme);\n              }\n\n              if (ml) {\n                ml.attr(\"class\", \"jstree-\" + this.data.themes.theme);\n              }\n\n              $.vakata.dnd.helper.attr(\"class\", \"jstree-dnd-helper jstree-\" + this.data.themes.theme);\n            }\n\n            $.vakata.dnd.helper.children(\"ins\").attr(\"class\", \"jstree-invalid\");\n            var cnt = this.get_container();\n            this.data.dnd.cof = cnt.offset();\n            this.data.dnd.cw = parseInt(cnt.width(), 10);\n            this.data.dnd.ch = parseInt(cnt.height(), 10);\n            this.data.dnd.foreign = true;\n            e.preventDefault();\n          }, this));\n        }\n\n        if (s.drop_target) {\n          $(document).delegate(s.drop_target, \"mouseenter.jstree-\" + this.get_index(), $.proxy(function (e) {\n            if (this.data.dnd.active && this._get_settings().dnd.drop_check.call(this, {\n              \"o\": o,\n              \"r\": $(e.target),\n              \"e\": e\n            })) {\n              $.vakata.dnd.helper.children(\"ins\").attr(\"class\", \"jstree-ok\");\n            }\n          }, this)).delegate(s.drop_target, \"mouseleave.jstree-\" + this.get_index(), $.proxy(function (e) {\n            if (this.data.dnd.active) {\n              $.vakata.dnd.helper.children(\"ins\").attr(\"class\", \"jstree-invalid\");\n            }\n          }, this)).delegate(s.drop_target, \"mouseup.jstree-\" + this.get_index(), $.proxy(function (e) {\n            if (this.data.dnd.active && $.vakata.dnd.helper.children(\"ins\").hasClass(\"jstree-ok\")) {\n              this._get_settings().dnd.drop_finish.call(this, {\n                \"o\": o,\n                \"r\": $(e.target),\n                \"e\": e\n              });\n            }\n          }, this));\n        }\n      },\n      defaults: {\n        copy_modifier: \"ctrl\",\n        check_timeout: 100,\n        open_timeout: 500,\n        drop_target: \".jstree-drop\",\n        drop_check: function drop_check(data) {\n          return true;\n        },\n        drop_finish: $.noop,\n        drag_target: \".jstree-draggable\",\n        drag_finish: $.noop,\n        drag_check: function drag_check(data) {\n          return {\n            after: false,\n            before: false,\n            inside: true\n          };\n        }\n      },\n      _fn: {\n        dnd_prepare: function dnd_prepare() {\n          if (!r || !r.length) {\n            return;\n          }\n\n          this.data.dnd.off = r.offset();\n\n          if (this._get_settings().core.rtl) {\n            this.data.dnd.off.right = this.data.dnd.off.left + r.width();\n          }\n\n          if (this.data.dnd.foreign) {\n            var a = this._get_settings().dnd.drag_check.call(this, {\n              \"o\": o,\n              \"r\": r\n            });\n\n            this.data.dnd.after = a.after;\n            this.data.dnd.before = a.before;\n            this.data.dnd.inside = a.inside;\n            this.data.dnd.prepared = true;\n            return this.dnd_show();\n          }\n\n          this.prepare_move(o, r, \"before\");\n          this.data.dnd.before = this.check_move();\n          this.prepare_move(o, r, \"after\");\n          this.data.dnd.after = this.check_move();\n\n          if (this._is_loaded(r)) {\n            this.prepare_move(o, r, \"inside\");\n            this.data.dnd.inside = this.check_move();\n          } else {\n            this.data.dnd.inside = false;\n          }\n\n          this.data.dnd.prepared = true;\n          return this.dnd_show();\n        },\n        dnd_show: function dnd_show() {\n          if (!this.data.dnd.prepared) {\n            return;\n          }\n\n          var o = [\"before\", \"inside\", \"after\"],\n              r = false,\n              rtl = this._get_settings().core.rtl,\n              pos;\n\n          if (this.data.dnd.w < this.data.core.li_height / 3) {\n            o = [\"before\", \"inside\", \"after\"];\n          } else if (this.data.dnd.w <= this.data.core.li_height * 2 / 3) {\n            o = this.data.dnd.w < this.data.core.li_height / 2 ? [\"inside\", \"before\", \"after\"] : [\"inside\", \"after\", \"before\"];\n          } else {\n            o = [\"after\", \"inside\", \"before\"];\n          }\n\n          $.each(o, $.proxy(function (i, val) {\n            if (this.data.dnd[val]) {\n              $.vakata.dnd.helper.children(\"ins\").attr(\"class\", \"jstree-ok\");\n              r = val;\n              return false;\n            }\n          }, this));\n\n          if (r === false) {\n            $.vakata.dnd.helper.children(\"ins\").attr(\"class\", \"jstree-invalid\");\n          }\n\n          pos = rtl ? this.data.dnd.off.right - 18 : this.data.dnd.off.left + 10;\n\n          switch (r) {\n            case \"before\":\n              m.css({\n                \"left\": pos + \"px\",\n                \"top\": this.data.dnd.off.top - 6 + \"px\"\n              }).show();\n\n              if (ml) {\n                ml.css({\n                  \"left\": pos + 8 + \"px\",\n                  \"top\": this.data.dnd.off.top - 1 + \"px\"\n                }).show();\n              }\n\n              break;\n\n            case \"after\":\n              m.css({\n                \"left\": pos + \"px\",\n                \"top\": this.data.dnd.off.top + this.data.core.li_height - 6 + \"px\"\n              }).show();\n\n              if (ml) {\n                ml.css({\n                  \"left\": pos + 8 + \"px\",\n                  \"top\": this.data.dnd.off.top + this.data.core.li_height - 1 + \"px\"\n                }).show();\n              }\n\n              break;\n\n            case \"inside\":\n              m.css({\n                \"left\": pos + (rtl ? -4 : 4) + \"px\",\n                \"top\": this.data.dnd.off.top + this.data.core.li_height / 2 - 5 + \"px\"\n              }).show();\n\n              if (ml) {\n                ml.hide();\n              }\n\n              break;\n\n            default:\n              m.hide();\n\n              if (ml) {\n                ml.hide();\n              }\n\n              break;\n          }\n\n          last_pos = r;\n          return r;\n        },\n        dnd_open: function dnd_open() {\n          this.data.dnd.to2 = false;\n          this.open_node(r, $.proxy(this.dnd_prepare, this), true);\n        },\n        dnd_finish: function dnd_finish(e) {\n          if (this.data.dnd.foreign) {\n            if (this.data.dnd.after || this.data.dnd.before || this.data.dnd.inside) {\n              this._get_settings().dnd.drag_finish.call(this, {\n                \"o\": o,\n                \"r\": r,\n                \"p\": last_pos\n              });\n            }\n          } else {\n            this.dnd_prepare();\n            this.move_node(o, r, last_pos, e[this._get_settings().dnd.copy_modifier + \"Key\"]);\n          }\n\n          o = false;\n          r = false;\n          m.hide();\n\n          if (ml) {\n            ml.hide();\n          }\n        },\n        dnd_enter: function dnd_enter(obj) {\n          if (this.data.dnd.mto) {\n            clearTimeout(this.data.dnd.mto);\n            this.data.dnd.mto = false;\n          }\n\n          var s = this._get_settings().dnd;\n\n          this.data.dnd.prepared = false;\n          r = this._get_node(obj);\n\n          if (s.check_timeout) {\n            // do the calculations after a minimal timeout (users tend to drag quickly to the desired location)\n            if (this.data.dnd.to1) {\n              clearTimeout(this.data.dnd.to1);\n            }\n\n            this.data.dnd.to1 = setTimeout($.proxy(this.dnd_prepare, this), s.check_timeout);\n          } else {\n            this.dnd_prepare();\n          }\n\n          if (s.open_timeout) {\n            if (this.data.dnd.to2) {\n              clearTimeout(this.data.dnd.to2);\n            }\n\n            if (r && r.length && r.hasClass(\"jstree-closed\")) {\n              // if the node is closed - open it, then recalculate\n              this.data.dnd.to2 = setTimeout($.proxy(this.dnd_open, this), s.open_timeout);\n            }\n          } else {\n            if (r && r.length && r.hasClass(\"jstree-closed\")) {\n              this.dnd_open();\n            }\n          }\n        },\n        dnd_leave: function dnd_leave(e) {\n          this.data.dnd.after = false;\n          this.data.dnd.before = false;\n          this.data.dnd.inside = false;\n          $.vakata.dnd.helper.children(\"ins\").attr(\"class\", \"jstree-invalid\");\n          m.hide();\n\n          if (ml) {\n            ml.hide();\n          }\n\n          if (r && r[0] === e.target.parentNode) {\n            if (this.data.dnd.to1) {\n              clearTimeout(this.data.dnd.to1);\n              this.data.dnd.to1 = false;\n            }\n\n            if (this.data.dnd.to2) {\n              clearTimeout(this.data.dnd.to2);\n              this.data.dnd.to2 = false;\n            }\n          }\n        },\n        start_drag: function start_drag(obj, e) {\n          o = this._get_node(obj);\n\n          if (this.data.ui && this.is_selected(o)) {\n            o = this._get_node(null, true);\n          }\n\n          var dt = o.length > 1 ? this._get_string(\"multiple_selection\") : this.get_text(o),\n              cnt = this.get_container();\n\n          if (!this._get_settings().core.html_titles) {\n            dt = dt.replace(/</ig, \"&lt;\").replace(/>/ig, \"&gt;\");\n          }\n\n          $.vakata.dnd.drag_start(e, {\n            jstree: true,\n            obj: o\n          }, \"<ins class='jstree-icon'></ins>\" + dt);\n\n          if (this.data.themes) {\n            if (m) {\n              m.attr(\"class\", \"jstree-\" + this.data.themes.theme);\n            }\n\n            if (ml) {\n              ml.attr(\"class\", \"jstree-\" + this.data.themes.theme);\n            }\n\n            $.vakata.dnd.helper.attr(\"class\", \"jstree-dnd-helper jstree-\" + this.data.themes.theme);\n          }\n\n          this.data.dnd.cof = cnt.offset();\n          this.data.dnd.cw = parseInt(cnt.width(), 10);\n          this.data.dnd.ch = parseInt(cnt.height(), 10);\n          this.data.dnd.active = true;\n        }\n      }\n    });\n    $(function () {\n      var css_string = '' + '#vakata-dragged ins { display:block; text-decoration:none; width:16px; height:16px; margin:0 0 0 0; padding:0; position:absolute; top:4px; left:4px; ' + ' -moz-border-radius:4px; border-radius:4px; -webkit-border-radius:4px; ' + '} ' + '#vakata-dragged .jstree-ok { background:green; } ' + '#vakata-dragged .jstree-invalid { background:red; } ' + '#jstree-marker { padding:0; margin:0; font-size:12px; overflow:hidden; height:12px; width:8px; position:absolute; top:-30px; z-index:10001; background-repeat:no-repeat; display:none; background-color:transparent; text-shadow:1px 1px 1px white; color:black; line-height:10px; } ' + '#jstree-marker-line { padding:0; margin:0; line-height:0%; font-size:1px; overflow:hidden; height:1px; width:100px; position:absolute; top:-30px; z-index:10000; background-repeat:no-repeat; display:none; background-color:#456c43; ' + ' cursor:pointer; border:1px solid #eeeeee; border-left:0; -moz-box-shadow: 0px 0px 2px #666; -webkit-box-shadow: 0px 0px 2px #666; box-shadow: 0px 0px 2px #666; ' + ' -moz-border-radius:1px; border-radius:1px; -webkit-border-radius:1px; ' + '}' + '';\n      $.vakata.css.add_sheet({\n        str: css_string,\n        title: \"jstree\"\n      });\n      m = $(\"<div />\").attr({\n        id: \"jstree-marker\"\n      }).hide().html(\"&raquo;\").bind(\"mouseleave mouseenter\", function (e) {\n        m.hide();\n        ml.hide();\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        return false;\n      }).appendTo(\"body\");\n      ml = $(\"<div />\").attr({\n        id: \"jstree-marker-line\"\n      }).hide().bind(\"mouseup\", function (e) {\n        if (r && r.length) {\n          r.children(\"a\").trigger(e);\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          return false;\n        }\n      }).bind(\"mouseleave\", function (e) {\n        var rt = $(e.relatedTarget);\n\n        if (rt.is(\".jstree\") || rt.closest(\".jstree\").length === 0) {\n          if (r && r.length) {\n            r.children(\"a\").trigger(e);\n            m.hide();\n            ml.hide();\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            return false;\n          }\n        }\n      }).appendTo(\"body\");\n      $(document).bind(\"drag_start.vakata\", function (e, data) {\n        if (data.data.jstree) {\n          m.show();\n\n          if (ml) {\n            ml.show();\n          }\n        }\n      });\n      $(document).bind(\"drag_stop.vakata\", function (e, data) {\n        if (data.data.jstree) {\n          m.hide();\n\n          if (ml) {\n            ml.hide();\n          }\n        }\n      });\n    });\n  })(jQuery); //*/\n\n  /*\n   * jsTree checkbox plugin\n   * Inserts checkboxes in front of every node\n   * Depends on the ui plugin\n   * DOES NOT WORK NICELY WITH MULTITREE DRAG'N'DROP\n   */\n\n\n  (function ($) {\n    $.jstree.plugin(\"checkbox\", {\n      __init: function __init() {\n        this.data.checkbox.noui = this._get_settings().checkbox.override_ui;\n\n        if (this.data.ui && this.data.checkbox.noui) {\n          this.select_node = this.deselect_node = this.deselect_all = $.noop;\n          this.get_selected = this.get_checked;\n        }\n\n        this.get_container().bind(\"open_node.jstree create_node.jstree clean_node.jstree refresh.jstree\", $.proxy(function (e, data) {\n          this._prepare_checkboxes(data.rslt.obj);\n        }, this)).bind(\"loaded.jstree\", $.proxy(function (e) {\n          this._prepare_checkboxes();\n        }, this)).delegate(this.data.ui && this.data.checkbox.noui ? \"a\" : \"ins.jstree-checkbox\", \"click.jstree\", $.proxy(function (e) {\n          e.preventDefault();\n\n          if (this._get_node(e.target).hasClass(\"jstree-checked\")) {\n            this.uncheck_node(e.target);\n          } else {\n            this.check_node(e.target);\n          }\n\n          if (this.data.ui && this.data.checkbox.noui) {\n            this.save_selected();\n\n            if (this.data.cookies) {\n              this.save_cookie(\"select_node\");\n            }\n          } else {\n            e.stopImmediatePropagation();\n            return false;\n          }\n        }, this));\n      },\n      defaults: {\n        override_ui: false,\n        two_state: false,\n        real_checkboxes: false,\n        checked_parent_open: true,\n        real_checkboxes_names: function real_checkboxes_names(n) {\n          return [\"check_\" + (n[0].id || Math.ceil(Math.random() * 10000)), 1];\n        }\n      },\n      __destroy: function __destroy() {\n        this.get_container().find(\"input.jstree-real-checkbox\").removeClass(\"jstree-real-checkbox\").end().find(\"ins.jstree-checkbox\").remove();\n      },\n      _fn: {\n        _checkbox_notify: function _checkbox_notify(n, data) {\n          if (data.checked) {\n            this.check_node(n, false);\n          }\n        },\n        _prepare_checkboxes: function _prepare_checkboxes(obj) {\n          obj = !obj || obj == -1 ? this.get_container().find(\"> ul > li\") : this._get_node(obj);\n\n          if (obj === false) {\n            return;\n          } // added for removing root nodes\n\n\n          var c,\n              _this = this,\n              t,\n              ts = this._get_settings().checkbox.two_state,\n              rc = this._get_settings().checkbox.real_checkboxes,\n              rcn = this._get_settings().checkbox.real_checkboxes_names;\n\n          obj.each(function () {\n            t = $(this);\n            c = t.is(\"li\") && (t.hasClass(\"jstree-checked\") || rc && t.children(\":checked\").length) ? \"jstree-checked\" : \"jstree-unchecked\";\n            t.find(\"li\").addBack().each(function () {\n              var $t = $(this),\n                  nm;\n              $t.children(\"a\" + (_this.data.languages ? \"\" : \":eq(0)\")).not(\":has(.jstree-checkbox)\").prepend(\"<ins class='jstree-checkbox'>&#160;</ins>\").parent().not(\".jstree-checked, .jstree-unchecked\").addClass(ts ? \"jstree-unchecked\" : c);\n\n              if (rc) {\n                if (!$t.children(\":checkbox\").length) {\n                  nm = rcn.call(_this, $t);\n                  $t.prepend(\"<input type='checkbox' class='jstree-real-checkbox' id='\" + nm[0] + \"' name='\" + nm[0] + \"' value='\" + nm[1] + \"' />\");\n                } else {\n                  $t.children(\":checkbox\").addClass(\"jstree-real-checkbox\");\n                }\n              }\n\n              if (!ts) {\n                if (c === \"jstree-checked\" || $t.hasClass(\"jstree-checked\") || $t.children(':checked').length) {\n                  $t.find(\"li\").addBack().addClass(\"jstree-checked\").children(\":checkbox\").prop(\"checked\", true);\n                }\n              } else {\n                if ($t.hasClass(\"jstree-checked\") || $t.children(':checked').length) {\n                  $t.addClass(\"jstree-checked\").children(\":checkbox\").prop(\"checked\", true);\n                }\n              }\n            });\n          });\n\n          if (!ts) {\n            obj.find(\".jstree-checked\").parent().parent().each(function () {\n              _this._repair_state(this);\n            });\n          }\n        },\n        change_state: function change_state(obj, state) {\n          obj = this._get_node(obj);\n\n          var coll = false,\n              rc = this._get_settings().checkbox.real_checkboxes;\n\n          if (!obj || obj === -1) {\n            return false;\n          }\n\n          state = state === false || state === true ? state : obj.hasClass(\"jstree-checked\");\n\n          if (this._get_settings().checkbox.two_state) {\n            if (state) {\n              obj.removeClass(\"jstree-checked\").addClass(\"jstree-unchecked\");\n\n              if (rc) {\n                obj.children(\":checkbox\").prop(\"checked\", false);\n              }\n            } else {\n              obj.removeClass(\"jstree-unchecked\").addClass(\"jstree-checked\");\n\n              if (rc) {\n                obj.children(\":checkbox\").prop(\"checked\", true);\n              }\n            }\n          } else {\n            if (state) {\n              coll = obj.find(\"li\").addBack();\n\n              if (!coll.filter(\".jstree-checked, .jstree-undetermined\").length) {\n                return false;\n              }\n\n              coll.removeClass(\"jstree-checked jstree-undetermined\").addClass(\"jstree-unchecked\");\n\n              if (rc) {\n                coll.children(\":checkbox\").prop(\"checked\", false);\n              }\n            } else {\n              coll = obj.find(\"li\").addBack();\n\n              if (!coll.filter(\".jstree-unchecked, .jstree-undetermined\").length) {\n                return false;\n              }\n\n              coll.removeClass(\"jstree-unchecked jstree-undetermined\").addClass(\"jstree-checked\");\n\n              if (rc) {\n                coll.children(\":checkbox\").prop(\"checked\", true);\n              }\n\n              if (this.data.ui) {\n                this.data.ui.last_selected = obj;\n              }\n\n              this.data.checkbox.last_selected = obj;\n            }\n\n            obj.parentsUntil(\".jstree\", \"li\").each(function () {\n              var $this = $(this);\n\n              if (state) {\n                if ($this.children(\"ul\").children(\"li.jstree-checked, li.jstree-undetermined\").length) {\n                  $this.parentsUntil(\".jstree\", \"li\").addBack().removeClass(\"jstree-checked jstree-unchecked\").addClass(\"jstree-undetermined\");\n\n                  if (rc) {\n                    $this.parentsUntil(\".jstree\", \"li\").addBack().children(\":checkbox\").prop(\"checked\", false);\n                  }\n\n                  return false;\n                } else {\n                  $this.removeClass(\"jstree-checked jstree-undetermined\").addClass(\"jstree-unchecked\");\n\n                  if (rc) {\n                    $this.children(\":checkbox\").prop(\"checked\", false);\n                  }\n                }\n              } else {\n                if ($this.children(\"ul\").children(\"li.jstree-unchecked, li.jstree-undetermined\").length) {\n                  $this.parentsUntil(\".jstree\", \"li\").addBack().removeClass(\"jstree-checked jstree-unchecked\").addClass(\"jstree-undetermined\");\n\n                  if (rc) {\n                    $this.parentsUntil(\".jstree\", \"li\").addBack().children(\":checkbox\").prop(\"checked\", false);\n                  }\n\n                  return false;\n                } else {\n                  $this.removeClass(\"jstree-unchecked jstree-undetermined\").addClass(\"jstree-checked\");\n\n                  if (rc) {\n                    $this.children(\":checkbox\").prop(\"checked\", true);\n                  }\n                }\n              }\n            });\n          }\n\n          if (this.data.ui && this.data.checkbox.noui) {\n            this.data.ui.selected = this.get_checked();\n          }\n\n          this.__callback(obj);\n\n          return true;\n        },\n        check_node: function check_node(obj) {\n          if (this.change_state(obj, false)) {\n            obj = this._get_node(obj);\n\n            if (this._get_settings().checkbox.checked_parent_open) {\n              var t = this;\n              obj.parents(\".jstree-closed\").each(function () {\n                t.open_node(this, false, true);\n              });\n            }\n\n            this.__callback({\n              \"obj\": obj\n            });\n          }\n        },\n        uncheck_node: function uncheck_node(obj) {\n          if (this.change_state(obj, true)) {\n            this.__callback({\n              \"obj\": this._get_node(obj)\n            });\n          }\n        },\n        check_all: function check_all() {\n          var _this = this,\n              coll = this._get_settings().checkbox.two_state ? this.get_container_ul().find(\"li\") : this.get_container_ul().children(\"li\");\n\n          coll.each(function () {\n            _this.change_state(this, false);\n          });\n\n          this.__callback();\n        },\n        uncheck_all: function uncheck_all() {\n          var _this = this,\n              coll = this._get_settings().checkbox.two_state ? this.get_container_ul().find(\"li\") : this.get_container_ul().children(\"li\");\n\n          coll.each(function () {\n            _this.change_state(this, true);\n          });\n\n          this.__callback();\n        },\n        is_checked: function is_checked(obj) {\n          obj = this._get_node(obj);\n          return obj.length ? obj.is(\".jstree-checked\") : false;\n        },\n        get_checked: function get_checked(obj, get_all) {\n          obj = !obj || obj === -1 ? this.get_container() : this._get_node(obj);\n          return get_all || this._get_settings().checkbox.two_state ? obj.find(\".jstree-checked\") : obj.find(\"> ul > .jstree-checked, .jstree-undetermined > ul > .jstree-checked\");\n        },\n        get_unchecked: function get_unchecked(obj, get_all) {\n          obj = !obj || obj === -1 ? this.get_container() : this._get_node(obj);\n          return get_all || this._get_settings().checkbox.two_state ? obj.find(\".jstree-unchecked\") : obj.find(\"> ul > .jstree-unchecked, .jstree-undetermined > ul > .jstree-unchecked\");\n        },\n        show_checkboxes: function show_checkboxes() {\n          this.get_container().children(\"ul\").removeClass(\"jstree-no-checkboxes\");\n        },\n        hide_checkboxes: function hide_checkboxes() {\n          this.get_container().children(\"ul\").addClass(\"jstree-no-checkboxes\");\n        },\n        _repair_state: function _repair_state(obj) {\n          obj = this._get_node(obj);\n\n          if (!obj.length) {\n            return;\n          }\n\n          if (this._get_settings().checkbox.two_state) {\n            obj.find('li').addBack().not('.jstree-checked').removeClass('jstree-undetermined').addClass('jstree-unchecked').children(':checkbox').prop('checked', true);\n            return;\n          }\n\n          var rc = this._get_settings().checkbox.real_checkboxes,\n              a = obj.find(\"> ul > .jstree-checked\").length,\n              b = obj.find(\"> ul > .jstree-undetermined\").length,\n              c = obj.find(\"> ul > li\").length;\n\n          if (c === 0) {\n            if (obj.hasClass(\"jstree-undetermined\")) {\n              this.change_state(obj, false);\n            }\n          } else if (a === 0 && b === 0) {\n            this.change_state(obj, true);\n          } else if (a === c) {\n            this.change_state(obj, false);\n          } else {\n            obj.parentsUntil(\".jstree\", \"li\").addBack().removeClass(\"jstree-checked jstree-unchecked\").addClass(\"jstree-undetermined\");\n\n            if (rc) {\n              obj.parentsUntil(\".jstree\", \"li\").addBack().children(\":checkbox\").prop(\"checked\", false);\n            }\n          }\n        },\n        reselect: function reselect() {\n          if (this.data.ui && this.data.checkbox.noui) {\n            var _this = this,\n                s = this.data.ui.to_select;\n\n            s = $.map($.makeArray(s), function (n) {\n              return \"#\" + n.toString().replace(/^#/, \"\").replace(/\\\\\\//g, \"/\").replace(/\\//g, \"\\\\\\/\").replace(/\\\\\\./g, \".\").replace(/\\./g, \"\\\\.\").replace(/\\:/g, \"\\\\:\");\n            });\n            this.deselect_all();\n            $.each(s, function (i, val) {\n              _this.check_node(val);\n            });\n\n            this.__callback();\n          } else {\n            this.__call_old();\n          }\n        },\n        save_loaded: function save_loaded() {\n          var _this = this;\n\n          this.data.core.to_load = [];\n          this.get_container_ul().find(\"li.jstree-closed.jstree-undetermined\").each(function () {\n            if (this.id) {\n              _this.data.core.to_load.push(\"#\" + this.id);\n            }\n          });\n        }\n      }\n    });\n    $(function () {\n      var css_string = '.jstree .jstree-real-checkbox { display:none; } ';\n      $.vakata.css.add_sheet({\n        str: css_string,\n        title: \"jstree\"\n      });\n    });\n  })(jQuery); //*/\n\n  /* \n   * jsTree XML plugin\n   * The XML data store. Datastores are build by overriding the `load_node` and `_is_loaded` functions.\n   */\n\n\n  (function ($) {\n    $.vakata.xslt = function (xml, xsl, callback) {\n      var r = false,\n          p,\n          q,\n          s; // IE9\n\n      if (r === false && window.ActiveXObject) {\n        try {\n          r = new ActiveXObject(\"Msxml2.XSLTemplate\");\n          q = new ActiveXObject(\"Msxml2.DOMDocument\");\n          q.loadXML(xml);\n          s = new ActiveXObject(\"Msxml2.FreeThreadedDOMDocument\");\n          s.loadXML(xsl);\n          r.stylesheet = s;\n          p = r.createProcessor();\n          p.input = q;\n          p.transform();\n          r = p.output;\n        } catch (e) {}\n      }\n\n      xml = $.parseXML(xml);\n      xsl = $.parseXML(xsl); // FF, Chrome\n\n      if (r === false && typeof XSLTProcessor !== \"undefined\") {\n        p = new XSLTProcessor();\n        p.importStylesheet(xsl);\n        r = p.transformToFragment(xml, document);\n        r = $('<div />').append(r).html();\n      } // OLD IE\n\n\n      if (r === false && typeof xml.transformNode !== \"undefined\") {\n        r = xml.transformNode(xsl);\n      }\n\n      callback.call(null, r);\n    };\n\n    var xsl = {\n      'nest': '<' + '?xml version=\"1.0\" encoding=\"utf-8\" ?>' + '<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" >' + '<xsl:output method=\"html\" encoding=\"utf-8\" omit-xml-declaration=\"yes\" standalone=\"no\" indent=\"no\" media-type=\"text/html\" />' + '<xsl:template match=\"/\">' + '\t<xsl:call-template name=\"nodes\">' + '\t\t<xsl:with-param name=\"node\" select=\"/root\" />' + '\t</xsl:call-template>' + '</xsl:template>' + '<xsl:template name=\"nodes\">' + '\t<xsl:param name=\"node\" />' + '\t<ul>' + '\t<xsl:for-each select=\"$node/item\">' + '\t\t<xsl:variable name=\"children\" select=\"count(./item) &gt; 0\" />' + '\t\t<li>' + '\t\t\t<xsl:attribute name=\"class\">' + '\t\t\t\t<xsl:if test=\"position() = last()\">jstree-last </xsl:if>' + '\t\t\t\t<xsl:choose>' + '\t\t\t\t\t<xsl:when test=\"@state = \\'open\\'\">jstree-open </xsl:when>' + '\t\t\t\t\t<xsl:when test=\"$children or @hasChildren or @state = \\'closed\\'\">jstree-closed </xsl:when>' + '\t\t\t\t\t<xsl:otherwise>jstree-leaf </xsl:otherwise>' + '\t\t\t\t</xsl:choose>' + '\t\t\t\t<xsl:value-of select=\"@class\" />' + '\t\t\t</xsl:attribute>' + '\t\t\t<xsl:for-each select=\"@*\">' + '\t\t\t\t<xsl:if test=\"name() != \\'class\\' and name() != \\'state\\' and name() != \\'hasChildren\\'\">' + '\t\t\t\t\t<xsl:attribute name=\"{name()}\"><xsl:value-of select=\".\" /></xsl:attribute>' + '\t\t\t\t</xsl:if>' + '\t\t\t</xsl:for-each>' + '\t<ins class=\"jstree-icon\"><xsl:text>&#xa0;</xsl:text></ins>' + '\t\t\t<xsl:for-each select=\"content/name\">' + '\t\t\t\t<a>' + '\t\t\t\t<xsl:attribute name=\"href\">' + '\t\t\t\t\t<xsl:choose>' + '\t\t\t\t\t<xsl:when test=\"@href\"><xsl:value-of select=\"@href\" /></xsl:when>' + '\t\t\t\t\t<xsl:otherwise>#</xsl:otherwise>' + '\t\t\t\t\t</xsl:choose>' + '\t\t\t\t</xsl:attribute>' + '\t\t\t\t<xsl:attribute name=\"class\"><xsl:value-of select=\"@lang\" /> <xsl:value-of select=\"@class\" /></xsl:attribute>' + '\t\t\t\t<xsl:attribute name=\"style\"><xsl:value-of select=\"@style\" /></xsl:attribute>' + '\t\t\t\t<xsl:for-each select=\"@*\">' + '\t\t\t\t\t<xsl:if test=\"name() != \\'style\\' and name() != \\'class\\' and name() != \\'href\\'\">' + '\t\t\t\t\t\t<xsl:attribute name=\"{name()}\"><xsl:value-of select=\".\" /></xsl:attribute>' + '\t\t\t\t\t</xsl:if>' + '\t\t\t\t</xsl:for-each>' + '\t\t\t\t\t<ins>' + '\t\t\t\t\t\t<xsl:attribute name=\"class\">jstree-icon ' + '\t\t\t\t\t\t\t<xsl:if test=\"string-length(attribute::icon) > 0 and not(contains(@icon,\\'/\\'))\"><xsl:value-of select=\"@icon\" /></xsl:if>' + '\t\t\t\t\t\t</xsl:attribute>' + '\t\t\t\t\t\t<xsl:if test=\"string-length(attribute::icon) > 0 and contains(@icon,\\'/\\')\"><xsl:attribute name=\"style\">background:url(<xsl:value-of select=\"@icon\" />) center center no-repeat;</xsl:attribute></xsl:if>' + '\t\t\t\t\t\t<xsl:text>&#xa0;</xsl:text>' + '\t\t\t\t\t</ins>' + '\t\t\t\t\t<xsl:copy-of select=\"./child::node()\" />' + '\t\t\t\t</a>' + '\t\t\t</xsl:for-each>' + '\t\t\t<xsl:if test=\"$children or @hasChildren\"><xsl:call-template name=\"nodes\"><xsl:with-param name=\"node\" select=\"current()\" /></xsl:call-template></xsl:if>' + '\t\t</li>' + '\t</xsl:for-each>' + '\t</ul>' + '</xsl:template>' + '</xsl:stylesheet>',\n      'flat': '<' + '?xml version=\"1.0\" encoding=\"utf-8\" ?>' + '<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" >' + '<xsl:output method=\"html\" encoding=\"utf-8\" omit-xml-declaration=\"yes\" standalone=\"no\" indent=\"no\" media-type=\"text/xml\" />' + '<xsl:template match=\"/\">' + '\t<ul>' + '\t<xsl:for-each select=\"//item[not(@parent_id) or @parent_id=0 or not(@parent_id = //item/@id)]\">' +\n      /* the last `or` may be removed */\n      '\t\t<xsl:call-template name=\"nodes\">' + '\t\t\t<xsl:with-param name=\"node\" select=\".\" />' + '\t\t\t<xsl:with-param name=\"is_last\" select=\"number(position() = last())\" />' + '\t\t</xsl:call-template>' + '\t</xsl:for-each>' + '\t</ul>' + '</xsl:template>' + '<xsl:template name=\"nodes\">' + '\t<xsl:param name=\"node\" />' + '\t<xsl:param name=\"is_last\" />' + '\t<xsl:variable name=\"children\" select=\"count(//item[@parent_id=$node/attribute::id]) &gt; 0\" />' + '\t<li>' + '\t<xsl:attribute name=\"class\">' + '\t\t<xsl:if test=\"$is_last = true()\">jstree-last </xsl:if>' + '\t\t<xsl:choose>' + '\t\t\t<xsl:when test=\"@state = \\'open\\'\">jstree-open </xsl:when>' + '\t\t\t<xsl:when test=\"$children or @hasChildren or @state = \\'closed\\'\">jstree-closed </xsl:when>' + '\t\t\t<xsl:otherwise>jstree-leaf </xsl:otherwise>' + '\t\t</xsl:choose>' + '\t\t<xsl:value-of select=\"@class\" />' + '\t</xsl:attribute>' + '\t<xsl:for-each select=\"@*\">' + '\t\t<xsl:if test=\"name() != \\'parent_id\\' and name() != \\'hasChildren\\' and name() != \\'class\\' and name() != \\'state\\'\">' + '\t\t<xsl:attribute name=\"{name()}\"><xsl:value-of select=\".\" /></xsl:attribute>' + '\t\t</xsl:if>' + '\t</xsl:for-each>' + '\t<ins class=\"jstree-icon\"><xsl:text>&#xa0;</xsl:text></ins>' + '\t<xsl:for-each select=\"content/name\">' + '\t\t<a>' + '\t\t<xsl:attribute name=\"href\">' + '\t\t\t<xsl:choose>' + '\t\t\t<xsl:when test=\"@href\"><xsl:value-of select=\"@href\" /></xsl:when>' + '\t\t\t<xsl:otherwise>#</xsl:otherwise>' + '\t\t\t</xsl:choose>' + '\t\t</xsl:attribute>' + '\t\t<xsl:attribute name=\"class\"><xsl:value-of select=\"@lang\" /> <xsl:value-of select=\"@class\" /></xsl:attribute>' + '\t\t<xsl:attribute name=\"style\"><xsl:value-of select=\"@style\" /></xsl:attribute>' + '\t\t<xsl:for-each select=\"@*\">' + '\t\t\t<xsl:if test=\"name() != \\'style\\' and name() != \\'class\\' and name() != \\'href\\'\">' + '\t\t\t\t<xsl:attribute name=\"{name()}\"><xsl:value-of select=\".\" /></xsl:attribute>' + '\t\t\t</xsl:if>' + '\t\t</xsl:for-each>' + '\t\t\t<ins>' + '\t\t\t\t<xsl:attribute name=\"class\">jstree-icon ' + '\t\t\t\t\t<xsl:if test=\"string-length(attribute::icon) > 0 and not(contains(@icon,\\'/\\'))\"><xsl:value-of select=\"@icon\" /></xsl:if>' + '\t\t\t\t</xsl:attribute>' + '\t\t\t\t<xsl:if test=\"string-length(attribute::icon) > 0 and contains(@icon,\\'/\\')\"><xsl:attribute name=\"style\">background:url(<xsl:value-of select=\"@icon\" />) center center no-repeat;</xsl:attribute></xsl:if>' + '\t\t\t\t<xsl:text>&#xa0;</xsl:text>' + '\t\t\t</ins>' + '\t\t\t<xsl:copy-of select=\"./child::node()\" />' + '\t\t</a>' + '\t</xsl:for-each>' + '\t<xsl:if test=\"$children\">' + '\t\t<ul>' + '\t\t<xsl:for-each select=\"//item[@parent_id=$node/attribute::id]\">' + '\t\t\t<xsl:call-template name=\"nodes\">' + '\t\t\t\t<xsl:with-param name=\"node\" select=\".\" />' + '\t\t\t\t<xsl:with-param name=\"is_last\" select=\"number(position() = last())\" />' + '\t\t\t</xsl:call-template>' + '\t\t</xsl:for-each>' + '\t\t</ul>' + '\t</xsl:if>' + '\t</li>' + '</xsl:template>' + '</xsl:stylesheet>'\n    },\n        escape_xml = function escape_xml(string) {\n      return string.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n    };\n\n    $.jstree.plugin(\"xml_data\", {\n      defaults: {\n        data: false,\n        ajax: false,\n        xsl: \"flat\",\n        clean_node: false,\n        correct_state: true,\n        get_skip_empty: false,\n        get_include_preamble: true\n      },\n      _fn: {\n        load_node: function load_node(obj, s_call, e_call) {\n          var _this = this;\n\n          this.load_node_xml(obj, function () {\n            _this.__callback({\n              \"obj\": _this._get_node(obj)\n            });\n\n            s_call.call(this);\n          }, e_call);\n        },\n        _is_loaded: function _is_loaded(obj) {\n          var s = this._get_settings().xml_data;\n\n          obj = this._get_node(obj);\n          return obj == -1 || !obj || !s.ajax && !$.isFunction(s.data) || obj.is(\".jstree-open, .jstree-leaf\") || obj.children(\"ul\").children(\"li\").size() > 0;\n        },\n        load_node_xml: function load_node_xml(obj, s_call, e_call) {\n          var s = this.get_settings().xml_data,\n              error_func = function error_func() {},\n              success_func = function success_func() {};\n\n          obj = this._get_node(obj);\n\n          if (obj && obj !== -1) {\n            if (obj.data(\"jstree_is_loading\")) {\n              return;\n            } else {\n              obj.data(\"jstree_is_loading\", true);\n            }\n          }\n\n          switch (!0) {\n            case !s.data && !s.ajax:\n              throw \"Neither data nor ajax settings supplied.\";\n\n            case $.isFunction(s.data):\n              s.data.call(this, obj, $.proxy(function (d) {\n                this.parse_xml(d, $.proxy(function (d) {\n                  if (d) {\n                    d = d.replace(/ ?xmlns=\"[^\"]*\"/ig, \"\");\n\n                    if (d.length > 10) {\n                      d = $(d);\n\n                      if (obj === -1 || !obj) {\n                        this.get_container().children(\"ul\").empty().append(d.children());\n                      } else {\n                        obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                        obj.append(d);\n                        obj.removeData(\"jstree_is_loading\");\n                      }\n\n                      if (s.clean_node) {\n                        this.clean_node(obj);\n                      }\n\n                      if (s_call) {\n                        s_call.call(this);\n                      }\n                    } else {\n                      if (obj && obj !== -1) {\n                        obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                        obj.removeData(\"jstree_is_loading\");\n\n                        if (s.correct_state) {\n                          this.correct_state(obj);\n\n                          if (s_call) {\n                            s_call.call(this);\n                          }\n                        }\n                      } else {\n                        if (s.correct_state) {\n                          this.get_container().children(\"ul\").empty();\n\n                          if (s_call) {\n                            s_call.call(this);\n                          }\n                        }\n                      }\n                    }\n                  }\n                }, this));\n              }, this));\n              break;\n\n            case !!s.data && !s.ajax || !!s.data && !!s.ajax && (!obj || obj === -1):\n              if (!obj || obj == -1) {\n                this.parse_xml(s.data, $.proxy(function (d) {\n                  if (d) {\n                    d = d.replace(/ ?xmlns=\"[^\"]*\"/ig, \"\");\n\n                    if (d.length > 10) {\n                      d = $(d);\n                      this.get_container().children(\"ul\").empty().append(d.children());\n\n                      if (s.clean_node) {\n                        this.clean_node(obj);\n                      }\n\n                      if (s_call) {\n                        s_call.call(this);\n                      }\n                    }\n                  } else {\n                    if (s.correct_state) {\n                      this.get_container().children(\"ul\").empty();\n\n                      if (s_call) {\n                        s_call.call(this);\n                      }\n                    }\n                  }\n                }, this));\n              }\n\n              break;\n\n            case !s.data && !!s.ajax || !!s.data && !!s.ajax && obj && obj !== -1:\n              error_func = function error_func(x, t, e) {\n                var ef = this.get_settings().xml_data.ajax.error;\n\n                if (ef) {\n                  ef.call(this, x, t, e);\n                }\n\n                if (obj !== -1 && obj.length) {\n                  obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                  obj.removeData(\"jstree_is_loading\");\n\n                  if (t === \"success\" && s.correct_state) {\n                    this.correct_state(obj);\n                  }\n                } else {\n                  if (t === \"success\" && s.correct_state) {\n                    this.get_container().children(\"ul\").empty();\n                  }\n                }\n\n                if (e_call) {\n                  e_call.call(this);\n                }\n              };\n\n              success_func = function success_func(d, t, x) {\n                d = x.responseText;\n                var sf = this.get_settings().xml_data.ajax.success;\n\n                if (sf) {\n                  d = sf.call(this, d, t, x) || d;\n                }\n\n                if (d === \"\" || d && d.toString && d.toString().replace(/^[\\s\\n]+$/, \"\") === \"\") {\n                  return error_func.call(this, x, t, \"\");\n                }\n\n                this.parse_xml(d, $.proxy(function (d) {\n                  if (d) {\n                    d = d.replace(/ ?xmlns=\"[^\"]*\"/ig, \"\");\n\n                    if (d.length > 10) {\n                      d = $(d);\n\n                      if (obj === -1 || !obj) {\n                        this.get_container().children(\"ul\").empty().append(d.children());\n                      } else {\n                        obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                        obj.append(d);\n                        obj.removeData(\"jstree_is_loading\");\n                      }\n\n                      if (s.clean_node) {\n                        this.clean_node(obj);\n                      }\n\n                      if (s_call) {\n                        s_call.call(this);\n                      }\n                    } else {\n                      if (obj && obj !== -1) {\n                        obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                        obj.removeData(\"jstree_is_loading\");\n\n                        if (s.correct_state) {\n                          this.correct_state(obj);\n\n                          if (s_call) {\n                            s_call.call(this);\n                          }\n                        }\n                      } else {\n                        if (s.correct_state) {\n                          this.get_container().children(\"ul\").empty();\n\n                          if (s_call) {\n                            s_call.call(this);\n                          }\n                        }\n                      }\n                    }\n                  }\n                }, this));\n              };\n\n              s.ajax.context = this;\n              s.ajax.error = error_func;\n              s.ajax.success = success_func;\n\n              if (!s.ajax.dataType) {\n                s.ajax.dataType = \"xml\";\n              }\n\n              if ($.isFunction(s.ajax.url)) {\n                s.ajax.url = s.ajax.url.call(this, obj);\n              }\n\n              if ($.isFunction(s.ajax.data)) {\n                s.ajax.data = s.ajax.data.call(this, obj);\n              }\n\n              $.ajax(s.ajax);\n              break;\n          }\n        },\n        parse_xml: function parse_xml(xml, callback) {\n          var s = this._get_settings().xml_data;\n\n          $.vakata.xslt(xml, xsl[s.xsl], callback);\n        },\n        get_xml: function get_xml(tp, obj, li_attr, a_attr, is_callback) {\n          var result = \"\",\n              s = this._get_settings(),\n              _this = this,\n              tmp1,\n              tmp2,\n              li,\n              a,\n              lang;\n\n          if (!tp) {\n            tp = \"flat\";\n          }\n\n          if (!is_callback) {\n            is_callback = 0;\n          }\n\n          obj = this._get_node(obj);\n\n          if (!obj || obj === -1) {\n            obj = this.get_container().find(\"> ul > li\");\n          }\n\n          li_attr = $.isArray(li_attr) ? li_attr : [\"id\", \"class\"];\n\n          if (!is_callback && this.data.types && $.inArray(s.types.type_attr, li_attr) === -1) {\n            li_attr.push(s.types.type_attr);\n          }\n\n          a_attr = $.isArray(a_attr) ? a_attr : [];\n\n          if (!is_callback) {\n            if (s.xml_data.get_include_preamble) {\n              result += '<' + '?xml version=\"1.0\" encoding=\"UTF-8\"?' + '>';\n            }\n\n            result += \"<root>\";\n          }\n\n          obj.each(function () {\n            result += \"<item\";\n            li = $(this);\n            $.each(li_attr, function (i, v) {\n              var t = li.attr(v);\n\n              if (!s.xml_data.get_skip_empty || typeof t !== \"undefined\") {\n                result += \" \" + v + \"=\\\"\" + escape_xml((\" \" + (t || \"\")).replace(/ jstree[^ ]*/ig, '').replace(/\\s+$/ig, \" \").replace(/^ /, \"\").replace(/ $/, \"\")) + \"\\\"\";\n              }\n            });\n\n            if (li.hasClass(\"jstree-open\")) {\n              result += \" state=\\\"open\\\"\";\n            }\n\n            if (li.hasClass(\"jstree-closed\")) {\n              result += \" state=\\\"closed\\\"\";\n            }\n\n            if (tp === \"flat\") {\n              result += \" parent_id=\\\"\" + escape_xml(is_callback) + \"\\\"\";\n            }\n\n            result += \">\";\n            result += \"<content>\";\n            a = li.children(\"a\");\n            a.each(function () {\n              tmp1 = $(this);\n              lang = false;\n              result += \"<name\";\n\n              if ($.inArray(\"languages\", s.plugins) !== -1) {\n                $.each(s.languages, function (k, z) {\n                  if (tmp1.hasClass(z)) {\n                    result += \" lang=\\\"\" + escape_xml(z) + \"\\\"\";\n                    lang = z;\n                    return false;\n                  }\n                });\n              }\n\n              if (a_attr.length) {\n                $.each(a_attr, function (k, z) {\n                  var t = tmp1.attr(z);\n\n                  if (!s.xml_data.get_skip_empty || typeof t !== \"undefined\") {\n                    result += \" \" + z + \"=\\\"\" + escape_xml((\" \" + t || false).replace(/ jstree[^ ]*/ig, '').replace(/\\s+$/ig, \" \").replace(/^ /, \"\").replace(/ $/, \"\")) + \"\\\"\";\n                  }\n                });\n              }\n\n              if (tmp1.children(\"ins\").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/^\\s+$/ig, \"\").length) {\n                result += ' icon=\"' + escape_xml(tmp1.children(\"ins\").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/\\s+$/ig, \" \").replace(/^ /, \"\").replace(/ $/, \"\")) + '\"';\n              }\n\n              if (tmp1.children(\"ins\").get(0).style.backgroundImage.length) {\n                result += ' icon=\"' + escape_xml(tmp1.children(\"ins\").get(0).style.backgroundImage.replace(\"url(\", \"\").replace(\")\", \"\").replace(/'/ig, \"\").replace(/\"/ig, \"\")) + '\"';\n              }\n\n              result += \">\";\n              result += \"<![CDATA[\" + _this.get_text(tmp1, lang) + \"]]>\";\n              result += \"</name>\";\n            });\n            result += \"</content>\";\n            tmp2 = li[0].id || true;\n            li = li.find(\"> ul > li\");\n\n            if (li.length) {\n              tmp2 = _this.get_xml(tp, li, li_attr, a_attr, tmp2);\n            } else {\n              tmp2 = \"\";\n            }\n\n            if (tp == \"nest\") {\n              result += tmp2;\n            }\n\n            result += \"</item>\";\n\n            if (tp == \"flat\") {\n              result += tmp2;\n            }\n          });\n\n          if (!is_callback) {\n            result += \"</root>\";\n          }\n\n          return result;\n        }\n      }\n    });\n  })(jQuery); //*/\n\n  /*\n   * jsTree search plugin\n   * Enables both sync and async search on the tree\n   * DOES NOT WORK WITH JSON PROGRESSIVE RENDER\n   */\n\n\n  (function ($) {\n    if ($().jquery.split('.')[1] >= 8) {\n      $.expr[':'].jstree_contains = $.expr.createPseudo(function (search) {\n        return function (a) {\n          return (a.textContent || a.innerText || \"\").toLowerCase().indexOf(search.toLowerCase()) >= 0;\n        };\n      });\n      $.expr[':'].jstree_title_contains = $.expr.createPseudo(function (search) {\n        return function (a) {\n          return (a.getAttribute(\"title\") || \"\").toLowerCase().indexOf(search.toLowerCase()) >= 0;\n        };\n      });\n    } else {\n      $.expr[':'].jstree_contains = function (a, i, m) {\n        return (a.textContent || a.innerText || \"\").toLowerCase().indexOf(m[3].toLowerCase()) >= 0;\n      };\n\n      $.expr[':'].jstree_title_contains = function (a, i, m) {\n        return (a.getAttribute(\"title\") || \"\").toLowerCase().indexOf(m[3].toLowerCase()) >= 0;\n      };\n    }\n\n    $.jstree.plugin(\"search\", {\n      __init: function __init() {\n        this.data.search.str = \"\";\n        this.data.search.result = $();\n\n        if (this._get_settings().search.show_only_matches) {\n          this.get_container().bind(\"search.jstree\", function (e, data) {\n            $(this).children(\"ul\").find(\"li\").hide().removeClass(\"jstree-last\");\n            data.rslt.nodes.parentsUntil(\".jstree\").addBack().show().filter(\"ul\").each(function () {\n              $(this).children(\"li:visible\").eq(-1).addClass(\"jstree-last\");\n            });\n          }).bind(\"clear_search.jstree\", function () {\n            $(this).children(\"ul\").find(\"li\").css(\"display\", \"\").end().end().jstree(\"clean_node\", -1);\n          });\n        }\n      },\n      defaults: {\n        ajax: false,\n        search_method: \"jstree_contains\",\n        // for case insensitive - jstree_contains\n        show_only_matches: false\n      },\n      _fn: {\n        search: function search(str, skip_async) {\n          if ($.trim(str) === \"\") {\n            this.clear_search();\n            return;\n          }\n\n          var s = this.get_settings().search,\n              t = this,\n              error_func = function error_func() {},\n              success_func = function success_func() {};\n\n          this.data.search.str = str;\n\n          if (!skip_async && s.ajax !== false && this.get_container_ul().find(\"li.jstree-closed:not(:has(ul)):eq(0)\").length > 0) {\n            this.search.supress_callback = true;\n\n            error_func = function error_func() {};\n\n            success_func = function success_func(d, t, x) {\n              var sf = this.get_settings().search.ajax.success;\n\n              if (sf) {\n                d = sf.call(this, d, t, x) || d;\n              }\n\n              this.data.search.to_open = d;\n\n              this._search_open();\n            };\n\n            s.ajax.context = this;\n            s.ajax.error = error_func;\n            s.ajax.success = success_func;\n\n            if ($.isFunction(s.ajax.url)) {\n              s.ajax.url = s.ajax.url.call(this, str);\n            }\n\n            if ($.isFunction(s.ajax.data)) {\n              s.ajax.data = s.ajax.data.call(this, str);\n            }\n\n            if (!s.ajax.data) {\n              s.ajax.data = {\n                \"search_string\": str\n              };\n            }\n\n            if (!s.ajax.dataType || /^json/.exec(s.ajax.dataType)) {\n              s.ajax.dataType = \"json\";\n            }\n\n            $.ajax(s.ajax);\n            return;\n          }\n\n          if (this.data.search.result.length) {\n            this.clear_search();\n          }\n\n          this.data.search.result = this.get_container().find(\"a\" + (this.data.languages ? \".\" + this.get_lang() : \"\") + \":\" + s.search_method + \"(\" + this.data.search.str + \")\");\n          this.data.search.result.addClass(\"jstree-search\").parent().parents(\".jstree-closed\").each(function () {\n            t.open_node(this, false, true);\n          });\n\n          this.__callback({\n            nodes: this.data.search.result,\n            str: str\n          });\n        },\n        clear_search: function clear_search(str) {\n          this.data.search.result.removeClass(\"jstree-search\");\n\n          this.__callback(this.data.search.result);\n\n          this.data.search.result = $();\n        },\n        _search_open: function _search_open(is_callback) {\n          var _this = this,\n              done = true,\n              current = [],\n              remaining = [];\n\n          if (this.data.search.to_open.length) {\n            $.each(this.data.search.to_open, function (i, val) {\n              if (val == \"#\") {\n                return true;\n              }\n\n              if ($(val).length && $(val).is(\".jstree-closed\")) {\n                current.push(val);\n              } else {\n                remaining.push(val);\n              }\n            });\n\n            if (current.length) {\n              this.data.search.to_open = remaining;\n              $.each(current, function (i, val) {\n                _this.open_node(val, function () {\n                  _this._search_open(true);\n                });\n              });\n              done = false;\n            }\n          }\n\n          if (done) {\n            this.search(this.data.search.str, true);\n          }\n        }\n      }\n    });\n  })(jQuery); //*/\n\n  /* \n   * jsTree contextmenu plugin\n   */\n\n\n  (function ($) {\n    $.vakata.context = {\n      hide_on_mouseleave: false,\n      cnt: $(\"<div id='vakata-contextmenu' />\"),\n      vis: false,\n      tgt: false,\n      par: false,\n      func: false,\n      data: false,\n      rtl: false,\n      show: function show(s, t, x, y, d, p, rtl) {\n        $.vakata.context.rtl = !!rtl;\n        var html = $.vakata.context.parse(s),\n            h,\n            w;\n\n        if (!html) {\n          return;\n        }\n\n        $.vakata.context.vis = true;\n        $.vakata.context.tgt = t;\n        $.vakata.context.par = p || t || null;\n        $.vakata.context.data = d || null;\n        $.vakata.context.cnt.html(html).css({\n          \"visibility\": \"hidden\",\n          \"display\": \"block\",\n          \"left\": 0,\n          \"top\": 0\n        });\n\n        if ($.vakata.context.hide_on_mouseleave) {\n          $.vakata.context.cnt.one(\"mouseleave\", function (e) {\n            $.vakata.context.hide();\n          });\n        }\n\n        h = $.vakata.context.cnt.height();\n        w = $.vakata.context.cnt.width();\n\n        if (x + w > $(document).width()) {\n          x = $(document).width() - (w + 5);\n          $.vakata.context.cnt.find(\"li > ul\").addClass(\"right\");\n        }\n\n        if (y + h > $(document).height()) {\n          y = y - (h + t[0].offsetHeight);\n          $.vakata.context.cnt.find(\"li > ul\").addClass(\"bottom\");\n        }\n\n        $.vakata.context.cnt.css({\n          \"left\": x,\n          \"top\": y\n        }).find(\"li:has(ul)\").bind(\"mouseenter\", function (e) {\n          var w = $(document).width(),\n              h = $(document).height(),\n              ul = $(this).children(\"ul\").show();\n\n          if (w !== $(document).width()) {\n            ul.toggleClass(\"right\");\n          }\n\n          if (h !== $(document).height()) {\n            ul.toggleClass(\"bottom\");\n          }\n        }).bind(\"mouseleave\", function (e) {\n          $(this).children(\"ul\").hide();\n        }).end().css({\n          \"visibility\": \"visible\"\n        }).show();\n        $(document).triggerHandler(\"context_show.vakata\");\n      },\n      hide: function hide() {\n        $.vakata.context.vis = false;\n        $.vakata.context.cnt.attr(\"class\", \"\").css({\n          \"visibility\": \"hidden\"\n        });\n        $(document).triggerHandler(\"context_hide.vakata\");\n      },\n      parse: function parse(s, is_callback) {\n        if (!s) {\n          return false;\n        }\n\n        var str = \"\",\n            tmp = false,\n            was_sep = true;\n\n        if (!is_callback) {\n          $.vakata.context.func = {};\n        }\n\n        str += \"<ul>\";\n        $.each(s, function (i, val) {\n          if (!val) {\n            return true;\n          }\n\n          $.vakata.context.func[i] = val.action;\n\n          if (!was_sep && val.separator_before) {\n            str += \"<li class='vakata-separator vakata-separator-before'></li>\";\n          }\n\n          was_sep = false;\n          str += \"<li class='\" + (val._class || \"\") + (val._disabled ? \" jstree-contextmenu-disabled \" : \"\") + \"'><ins \";\n\n          if (val.icon && val.icon.indexOf(\"/\") === -1) {\n            str += \" class='\" + val.icon + \"' \";\n          }\n\n          if (val.icon && val.icon.indexOf(\"/\") !== -1) {\n            str += \" style='background:url(\" + val.icon + \") center center no-repeat;' \";\n          }\n\n          str += \">&#160;</ins><a href='#' rel='\" + i + \"'>\";\n\n          if (val.submenu) {\n            str += \"<span style='float:\" + ($.vakata.context.rtl ? \"left\" : \"right\") + \";'>&raquo;</span>\";\n          }\n\n          str += val.label + \"</a>\";\n\n          if (val.submenu) {\n            tmp = $.vakata.context.parse(val.submenu, true);\n\n            if (tmp) {\n              str += tmp;\n            }\n          }\n\n          str += \"</li>\";\n\n          if (val.separator_after) {\n            str += \"<li class='vakata-separator vakata-separator-after'></li>\";\n            was_sep = true;\n          }\n        });\n        str = str.replace(/<li class\\='vakata-separator vakata-separator-after'\\><\\/li\\>$/, \"\");\n        str += \"</ul>\";\n        $(document).triggerHandler(\"context_parse.vakata\");\n        return str.length > 10 ? str : false;\n      },\n      exec: function exec(i) {\n        if ($.isFunction($.vakata.context.func[i])) {\n          // if is string - eval and call it!\n          $.vakata.context.func[i].call($.vakata.context.data, $.vakata.context.par);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n    $(function () {\n      var css_string = '' + '#vakata-contextmenu { display:block; visibility:hidden; left:0; top:-200px; position:absolute; margin:0; padding:0; min-width:180px; background:#ebebeb; border:1px solid silver; z-index:10000; *width:180px; } ' + '#vakata-contextmenu ul { min-width:180px; *width:180px; } ' + '#vakata-contextmenu ul, #vakata-contextmenu li { margin:0; padding:0; list-style-type:none; display:block; } ' + '#vakata-contextmenu li { line-height:20px; min-height:20px; position:relative; padding:0px; } ' + '#vakata-contextmenu li a { padding:1px 6px; line-height:17px; display:block; text-decoration:none; margin:1px 1px 0 1px; } ' + '#vakata-contextmenu li ins { float:left; width:16px; height:16px; text-decoration:none; margin-right:2px; } ' + '#vakata-contextmenu li a:hover, #vakata-contextmenu li.vakata-hover > a { background:gray; color:white; } ' + '#vakata-contextmenu li ul { display:none; position:absolute; top:-2px; left:100%; background:#ebebeb; border:1px solid gray; } ' + '#vakata-contextmenu .right { right:100%; left:auto; } ' + '#vakata-contextmenu .bottom { bottom:-1px; top:auto; } ' + '#vakata-contextmenu li.vakata-separator { min-height:0; height:1px; line-height:1px; font-size:1px; overflow:hidden; margin:0 2px; background:silver; /* border-top:1px solid #fefefe; */ padding:0; } ';\n      $.vakata.css.add_sheet({\n        str: css_string,\n        title: \"vakata\"\n      });\n      $.vakata.context.cnt.delegate(\"a\", \"click\", function (e) {\n        e.preventDefault();\n      }).delegate(\"a\", \"mouseup\", function (e) {\n        if (!$(this).parent().hasClass(\"jstree-contextmenu-disabled\") && $.vakata.context.exec($(this).attr(\"rel\"))) {\n          $.vakata.context.hide();\n        } else {\n          $(this).blur();\n        }\n      }).delegate(\"a\", \"mouseover\", function () {\n        $.vakata.context.cnt.find(\".vakata-hover\").removeClass(\"vakata-hover\");\n      }).appendTo(\"body\");\n      $(document).bind(\"mousedown\", function (e) {\n        if ($.vakata.context.vis && !$.contains($.vakata.context.cnt[0], e.target)) {\n          $.vakata.context.hide();\n        }\n      });\n\n      if (typeof $.hotkeys !== \"undefined\") {\n        $(document).bind(\"keydown\", \"up\", function (e) {\n          if ($.vakata.context.vis) {\n            var o = $.vakata.context.cnt.find(\"ul:visible\").last().children(\".vakata-hover\").removeClass(\"vakata-hover\").prevAll(\"li:not(.vakata-separator)\").first();\n\n            if (!o.length) {\n              o = $.vakata.context.cnt.find(\"ul:visible\").last().children(\"li:not(.vakata-separator)\").last();\n            }\n\n            o.addClass(\"vakata-hover\");\n            e.stopImmediatePropagation();\n            e.preventDefault();\n          }\n        }).bind(\"keydown\", \"down\", function (e) {\n          if ($.vakata.context.vis) {\n            var o = $.vakata.context.cnt.find(\"ul:visible\").last().children(\".vakata-hover\").removeClass(\"vakata-hover\").nextAll(\"li:not(.vakata-separator)\").first();\n\n            if (!o.length) {\n              o = $.vakata.context.cnt.find(\"ul:visible\").last().children(\"li:not(.vakata-separator)\").first();\n            }\n\n            o.addClass(\"vakata-hover\");\n            e.stopImmediatePropagation();\n            e.preventDefault();\n          }\n        }).bind(\"keydown\", \"right\", function (e) {\n          if ($.vakata.context.vis) {\n            $.vakata.context.cnt.find(\".vakata-hover\").children(\"ul\").show().children(\"li:not(.vakata-separator)\").removeClass(\"vakata-hover\").first().addClass(\"vakata-hover\");\n            e.stopImmediatePropagation();\n            e.preventDefault();\n          }\n        }).bind(\"keydown\", \"left\", function (e) {\n          if ($.vakata.context.vis) {\n            $.vakata.context.cnt.find(\".vakata-hover\").children(\"ul\").hide().children(\".vakata-separator\").removeClass(\"vakata-hover\");\n            e.stopImmediatePropagation();\n            e.preventDefault();\n          }\n        }).bind(\"keydown\", \"esc\", function (e) {\n          $.vakata.context.hide();\n          e.preventDefault();\n        }).bind(\"keydown\", \"space\", function (e) {\n          $.vakata.context.cnt.find(\".vakata-hover\").last().children(\"a\").click();\n          e.preventDefault();\n        });\n      }\n    });\n    $.jstree.plugin(\"contextmenu\", {\n      __init: function __init() {\n        this.get_container().delegate(\"a\", \"contextmenu.jstree\", $.proxy(function (e) {\n          e.preventDefault();\n\n          if (!$(e.currentTarget).hasClass(\"jstree-loading\")) {\n            this.show_contextmenu(e.currentTarget, e.pageX, e.pageY);\n          }\n        }, this)).delegate(\"a\", \"click.jstree\", $.proxy(function (e) {\n          if (this.data.contextmenu) {\n            $.vakata.context.hide();\n          }\n        }, this)).bind(\"destroy.jstree\", $.proxy(function () {\n          // TODO: move this to descruct method\n          if (this.data.contextmenu) {\n            $.vakata.context.hide();\n          }\n        }, this));\n        $(document).bind(\"context_hide.vakata\", $.proxy(function () {\n          this.data.contextmenu = false;\n        }, this));\n      },\n      defaults: {\n        select_node: false,\n        // requires UI plugin\n        show_at_node: true,\n        items: {\n          // Could be a function that should return an object like this one\n          \"create\": {\n            \"separator_before\": false,\n            \"separator_after\": true,\n            \"label\": \"Create\",\n            \"action\": function action(obj) {\n              this.create(obj);\n            }\n          },\n          \"rename\": {\n            \"separator_before\": false,\n            \"separator_after\": false,\n            \"label\": \"Rename\",\n            \"action\": function action(obj) {\n              this.rename(obj);\n            }\n          },\n          \"remove\": {\n            \"separator_before\": false,\n            \"icon\": false,\n            \"separator_after\": false,\n            \"label\": \"Delete\",\n            \"action\": function action(obj) {\n              if (this.is_selected(obj)) {\n                this.remove();\n              } else {\n                this.remove(obj);\n              }\n            }\n          },\n          \"ccp\": {\n            \"separator_before\": true,\n            \"icon\": false,\n            \"separator_after\": false,\n            \"label\": \"Edit\",\n            \"action\": false,\n            \"submenu\": {\n              \"cut\": {\n                \"separator_before\": false,\n                \"separator_after\": false,\n                \"label\": \"Cut\",\n                \"action\": function action(obj) {\n                  this.cut(obj);\n                }\n              },\n              \"copy\": {\n                \"separator_before\": false,\n                \"icon\": false,\n                \"separator_after\": false,\n                \"label\": \"Copy\",\n                \"action\": function action(obj) {\n                  this.copy(obj);\n                }\n              },\n              \"paste\": {\n                \"separator_before\": false,\n                \"icon\": false,\n                \"separator_after\": false,\n                \"label\": \"Paste\",\n                \"action\": function action(obj) {\n                  this.paste(obj);\n                }\n              }\n            }\n          }\n        }\n      },\n      _fn: {\n        show_contextmenu: function show_contextmenu(obj, x, y) {\n          obj = this._get_node(obj);\n          var s = this.get_settings().contextmenu,\n              a = obj.children(\"a:visible:eq(0)\"),\n              o = false,\n              i = false;\n\n          if (s.select_node && this.data.ui && !this.is_selected(obj)) {\n            this.deselect_all();\n            this.select_node(obj, true);\n          }\n\n          if (s.show_at_node || typeof x === \"undefined\" || typeof y === \"undefined\") {\n            o = a.offset();\n            x = o.left;\n            y = o.top + this.data.core.li_height;\n          }\n\n          i = obj.data(\"jstree\") && obj.data(\"jstree\").contextmenu ? obj.data(\"jstree\").contextmenu : s.items;\n\n          if ($.isFunction(i)) {\n            i = i.call(this, obj);\n          }\n\n          this.data.contextmenu = true;\n          $.vakata.context.show(i, a, x, y, this, obj, this._get_settings().core.rtl);\n\n          if (this.data.themes) {\n            $.vakata.context.cnt.attr(\"class\", \"jstree-\" + this.data.themes.theme + \"-context\");\n          }\n        }\n      }\n    });\n  })(jQuery); //*/\n\n  /* \n   * jsTree types plugin\n   * Adds support types of nodes\n   * You can set an attribute on each li node, that represents its type.\n   * According to the type setting the node may get custom icon/validation rules\n   */\n\n\n  (function ($) {\n    $.jstree.plugin(\"types\", {\n      __init: function __init() {\n        var s = this._get_settings().types;\n\n        this.data.types.attach_to = [];\n        this.get_container().bind(\"init.jstree\", $.proxy(function () {\n          var types = s.types,\n              attr = s.type_attr,\n              icons_css = \"\",\n              _this = this;\n\n          $.each(types, function (i, tp) {\n            $.each(tp, function (k, v) {\n              if (!/^(max_depth|max_children|icon|valid_children)$/.test(k)) {\n                _this.data.types.attach_to.push(k);\n              }\n            });\n\n            if (!tp.icon) {\n              return true;\n            }\n\n            if (tp.icon.image || tp.icon.position) {\n              if (i == \"default\") {\n                icons_css += '.jstree-' + _this.get_index() + ' a > .jstree-icon { ';\n              } else {\n                icons_css += '.jstree-' + _this.get_index() + ' li[' + attr + '=\"' + i + '\"] > a > .jstree-icon { ';\n              }\n\n              if (tp.icon.image) {\n                icons_css += ' background-image:url(' + tp.icon.image + '); ';\n              }\n\n              if (tp.icon.position) {\n                icons_css += ' background-position:' + tp.icon.position + '; ';\n              } else {\n                icons_css += ' background-position:0 0; ';\n              }\n\n              icons_css += '} ';\n            }\n          });\n\n          if (icons_css !== \"\") {\n            $.vakata.css.add_sheet({\n              'str': icons_css,\n              title: \"jstree-types\"\n            });\n          }\n        }, this)).bind(\"before.jstree\", $.proxy(function (e, data) {\n          var s,\n              t,\n              o = this._get_settings().types.use_data ? this._get_node(data.args[0]) : false,\n              d = o && o !== -1 && o.length ? o.data(\"jstree\") : false;\n\n          if (d && d.types && d.types[data.func] === false) {\n            e.stopImmediatePropagation();\n            return false;\n          }\n\n          if ($.inArray(data.func, this.data.types.attach_to) !== -1) {\n            if (!data.args[0] || !data.args[0].tagName && !data.args[0].jquery) {\n              return;\n            }\n\n            s = this._get_settings().types.types;\n            t = this._get_type(data.args[0]);\n\n            if ((s[t] && typeof s[t][data.func] !== \"undefined\" || s[\"default\"] && typeof s[\"default\"][data.func] !== \"undefined\") && this._check(data.func, data.args[0]) === false) {\n              e.stopImmediatePropagation();\n              return false;\n            }\n          }\n        }, this));\n\n        if (is_ie6) {\n          this.get_container().bind(\"load_node.jstree set_type.jstree\", $.proxy(function (e, data) {\n            var r = data && data.rslt && data.rslt.obj && data.rslt.obj !== -1 ? this._get_node(data.rslt.obj).parent() : this.get_container_ul(),\n                c = false,\n                s = this._get_settings().types;\n\n            $.each(s.types, function (i, tp) {\n              if (tp.icon && (tp.icon.image || tp.icon.position)) {\n                c = i === \"default\" ? r.find(\"li > a > .jstree-icon\") : r.find(\"li[\" + s.type_attr + \"='\" + i + \"'] > a > .jstree-icon\");\n\n                if (tp.icon.image) {\n                  c.css(\"backgroundImage\", \"url(\" + tp.icon.image + \")\");\n                }\n\n                c.css(\"backgroundPosition\", tp.icon.position || \"0 0\");\n              }\n            });\n          }, this));\n        }\n      },\n      defaults: {\n        // defines maximum number of root nodes (-1 means unlimited, -2 means disable max_children checking)\n        max_children: -1,\n        // defines the maximum depth of the tree (-1 means unlimited, -2 means disable max_depth checking)\n        max_depth: -1,\n        // defines valid node types for the root nodes\n        valid_children: \"all\",\n        // whether to use $.data\n        use_data: false,\n        // where is the type stores (the rel attribute of the LI element)\n        type_attr: \"rel\",\n        // a list of types\n        types: {\n          // the default type\n          \"default\": {\n            \"max_children\": -1,\n            \"max_depth\": -1,\n            \"valid_children\": \"all\" // Bound functions - you can bind any other function here (using boolean or function)\n            //\"select_node\"\t: true\n\n          }\n        }\n      },\n      _fn: {\n        _types_notify: function _types_notify(n, data) {\n          if (data.type && this._get_settings().types.use_data) {\n            this.set_type(data.type, n);\n          }\n        },\n        _get_type: function _get_type(obj) {\n          obj = this._get_node(obj);\n          return !obj || !obj.length ? false : obj.attr(this._get_settings().types.type_attr) || \"default\";\n        },\n        set_type: function set_type(str, obj) {\n          obj = this._get_node(obj);\n          var ret = !obj.length || !str ? false : obj.attr(this._get_settings().types.type_attr, str);\n\n          if (ret) {\n            this.__callback({\n              obj: obj,\n              type: str\n            });\n          }\n\n          return ret;\n        },\n        _check: function _check(rule, obj, opts) {\n          obj = this._get_node(obj);\n\n          var v = false,\n              t = this._get_type(obj),\n              d = 0,\n              _this = this,\n              s = this._get_settings().types,\n              data = false;\n\n          if (obj === -1) {\n            if (!!s[rule]) {\n              v = s[rule];\n            } else {\n              return;\n            }\n          } else {\n            if (t === false) {\n              return;\n            }\n\n            data = s.use_data ? obj.data(\"jstree\") : false;\n\n            if (data && data.types && typeof data.types[rule] !== \"undefined\") {\n              v = data.types[rule];\n            } else if (!!s.types[t] && typeof s.types[t][rule] !== \"undefined\") {\n              v = s.types[t][rule];\n            } else if (!!s.types[\"default\"] && typeof s.types[\"default\"][rule] !== \"undefined\") {\n              v = s.types[\"default\"][rule];\n            }\n          }\n\n          if ($.isFunction(v)) {\n            v = v.call(this, obj);\n          }\n\n          if (rule === \"max_depth\" && obj !== -1 && opts !== false && s.max_depth !== -2 && v !== 0) {\n            // also include the node itself - otherwise if root node it is not checked\n            obj.children(\"a:eq(0)\").parentsUntil(\".jstree\", \"li\").each(function (i) {\n              // check if current depth already exceeds global tree depth\n              if (s.max_depth !== -1 && s.max_depth - (i + 1) <= 0) {\n                v = 0;\n                return false;\n              }\n\n              d = i === 0 ? v : _this._check(rule, this, false); // check if current node max depth is already matched or exceeded\n\n              if (d !== -1 && d - (i + 1) <= 0) {\n                v = 0;\n                return false;\n              } // otherwise - set the max depth to the current value minus current depth\n\n\n              if (d >= 0 && (d - (i + 1) < v || v < 0)) {\n                v = d - (i + 1);\n              } // if the global tree depth exists and it minus the nodes calculated so far is less than `v` or `v` is unlimited\n\n\n              if (s.max_depth >= 0 && (s.max_depth - (i + 1) < v || v < 0)) {\n                v = s.max_depth - (i + 1);\n              }\n            });\n          }\n\n          return v;\n        },\n        check_move: function check_move() {\n          if (!this.__call_old()) {\n            return false;\n          }\n\n          var m = this._get_move(),\n              s = m.rt._get_settings().types,\n              mc = m.rt._check(\"max_children\", m.cr),\n              md = m.rt._check(\"max_depth\", m.cr),\n              vc = m.rt._check(\"valid_children\", m.cr),\n              ch = 0,\n              d = 1,\n              t;\n\n          if (vc === \"none\") {\n            return false;\n          }\n\n          if ($.isArray(vc) && m.ot && m.ot._get_type) {\n            m.o.each(function () {\n              if ($.inArray(m.ot._get_type(this), vc) === -1) {\n                d = false;\n                return false;\n              }\n            });\n\n            if (d === false) {\n              return false;\n            }\n          }\n\n          if (s.max_children !== -2 && mc !== -1) {\n            ch = m.cr === -1 ? this.get_container().find(\"> ul > li\").not(m.o).length : m.cr.find(\"> ul > li\").not(m.o).length;\n\n            if (ch + m.o.length > mc) {\n              return false;\n            }\n          }\n\n          if (s.max_depth !== -2 && md !== -1) {\n            d = 0;\n\n            if (md === 0) {\n              return false;\n            }\n\n            if (typeof m.o.d === \"undefined\") {\n              // TODO: deal with progressive rendering and async when checking max_depth (how to know the depth of the moved node)\n              t = m.o;\n\n              while (t.length > 0) {\n                t = t.find(\"> ul > li\");\n                d++;\n              }\n\n              m.o.d = d;\n            }\n\n            if (md - m.o.d < 0) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        create_node: function create_node(obj, position, js, callback, is_loaded, skip_check) {\n          if (!skip_check && (is_loaded || this._is_loaded(obj))) {\n            var p = typeof position == \"string\" && position.match(/^before|after$/i) && obj !== -1 ? this._get_parent(obj) : this._get_node(obj),\n                s = this._get_settings().types,\n                mc = this._check(\"max_children\", p),\n                md = this._check(\"max_depth\", p),\n                vc = this._check(\"valid_children\", p),\n                ch;\n\n            if (typeof js === \"string\") {\n              js = {\n                data: js\n              };\n            }\n\n            if (!js) {\n              js = {};\n            }\n\n            if (vc === \"none\") {\n              return false;\n            }\n\n            if ($.isArray(vc)) {\n              if (!js.attr || !js.attr[s.type_attr]) {\n                if (!js.attr) {\n                  js.attr = {};\n                }\n\n                js.attr[s.type_attr] = vc[0];\n              } else {\n                if ($.inArray(js.attr[s.type_attr], vc) === -1) {\n                  return false;\n                }\n              }\n            }\n\n            if (s.max_children !== -2 && mc !== -1) {\n              ch = p === -1 ? this.get_container().find(\"> ul > li\").length : p.find(\"> ul > li\").length;\n\n              if (ch + 1 > mc) {\n                return false;\n              }\n            }\n\n            if (s.max_depth !== -2 && md !== -1 && md - 1 < 0) {\n              return false;\n            }\n          }\n\n          return this.__call_old(true, obj, position, js, callback, is_loaded, skip_check);\n        }\n      }\n    });\n  })(jQuery); //*/\n\n  /* \n   * jsTree HTML plugin\n   * The HTML data store. Datastores are build by replacing the `load_node` and `_is_loaded` functions.\n   */\n\n\n  (function ($) {\n    $.jstree.plugin(\"html_data\", {\n      __init: function __init() {\n        // this used to use html() and clean the whitespace, but this way any attached data was lost\n        this.data.html_data.original_container_html = this.get_container().find(\" > ul > li\").clone(true); // remove white space from LI node - otherwise nodes appear a bit to the right\n\n        this.data.html_data.original_container_html.find(\"li\").addBack().contents().filter(function () {\n          return this.nodeType == 3;\n        }).remove();\n      },\n      defaults: {\n        data: false,\n        ajax: false,\n        correct_state: true\n      },\n      _fn: {\n        load_node: function load_node(obj, s_call, e_call) {\n          var _this = this;\n\n          this.load_node_html(obj, function () {\n            _this.__callback({\n              \"obj\": _this._get_node(obj)\n            });\n\n            s_call.call(this);\n          }, e_call);\n        },\n        _is_loaded: function _is_loaded(obj) {\n          obj = this._get_node(obj);\n          return obj == -1 || !obj || !this._get_settings().html_data.ajax && !$.isFunction(this._get_settings().html_data.data) || obj.is(\".jstree-open, .jstree-leaf\") || obj.children(\"ul\").children(\"li\").size() > 0;\n        },\n        load_node_html: function load_node_html(obj, s_call, e_call) {\n          var d,\n              s = this.get_settings().html_data,\n              error_func = function error_func() {},\n              success_func = function success_func() {};\n\n          obj = this._get_node(obj);\n\n          if (obj && obj !== -1) {\n            if (obj.data(\"jstree_is_loading\")) {\n              return;\n            } else {\n              obj.data(\"jstree_is_loading\", true);\n            }\n          }\n\n          switch (!0) {\n            case $.isFunction(s.data):\n              s.data.call(this, obj, $.proxy(function (d) {\n                if (d && d !== \"\" && d.toString && d.toString().replace(/^[\\s\\n]+$/, \"\") !== \"\") {\n                  d = $(d);\n\n                  if (!d.is(\"ul\")) {\n                    d = $(\"<ul />\").append(d);\n                  }\n\n                  if (obj == -1 || !obj) {\n                    this.get_container().children(\"ul\").empty().append(d.children()).find(\"li, a\").filter(function () {\n                      return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== \"INS\";\n                    }).prepend(\"<ins class='jstree-icon'>&#160;</ins>\").end().filter(\"a\").children(\"ins:first-child\").not(\".jstree-icon\").addClass(\"jstree-icon\");\n                  } else {\n                    obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                    obj.append(d).children(\"ul\").find(\"li, a\").filter(function () {\n                      return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== \"INS\";\n                    }).prepend(\"<ins class='jstree-icon'>&#160;</ins>\").end().filter(\"a\").children(\"ins:first-child\").not(\".jstree-icon\").addClass(\"jstree-icon\");\n                    obj.removeData(\"jstree_is_loading\");\n                  }\n\n                  this.clean_node(obj);\n\n                  if (s_call) {\n                    s_call.call(this);\n                  }\n                } else {\n                  if (obj && obj !== -1) {\n                    obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                    obj.removeData(\"jstree_is_loading\");\n\n                    if (s.correct_state) {\n                      this.correct_state(obj);\n\n                      if (s_call) {\n                        s_call.call(this);\n                      }\n                    }\n                  } else {\n                    if (s.correct_state) {\n                      this.get_container().children(\"ul\").empty();\n\n                      if (s_call) {\n                        s_call.call(this);\n                      }\n                    }\n                  }\n                }\n              }, this));\n              break;\n\n            case !s.data && !s.ajax:\n              if (!obj || obj == -1) {\n                this.get_container().children(\"ul\").empty().append(this.data.html_data.original_container_html).find(\"li, a\").filter(function () {\n                  return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== \"INS\";\n                }).prepend(\"<ins class='jstree-icon'>&#160;</ins>\").end().filter(\"a\").children(\"ins:first-child\").not(\".jstree-icon\").addClass(\"jstree-icon\");\n                this.clean_node();\n              }\n\n              if (s_call) {\n                s_call.call(this);\n              }\n\n              break;\n\n            case !!s.data && !s.ajax || !!s.data && !!s.ajax && (!obj || obj === -1):\n              if (!obj || obj == -1) {\n                d = $(s.data);\n\n                if (!d.is(\"ul\")) {\n                  d = $(\"<ul />\").append(d);\n                }\n\n                this.get_container().children(\"ul\").empty().append(d.children()).find(\"li, a\").filter(function () {\n                  return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== \"INS\";\n                }).prepend(\"<ins class='jstree-icon'>&#160;</ins>\").end().filter(\"a\").children(\"ins:first-child\").not(\".jstree-icon\").addClass(\"jstree-icon\");\n                this.clean_node();\n              }\n\n              if (s_call) {\n                s_call.call(this);\n              }\n\n              break;\n\n            case !s.data && !!s.ajax || !!s.data && !!s.ajax && obj && obj !== -1:\n              obj = this._get_node(obj);\n\n              error_func = function error_func(x, t, e) {\n                var ef = this.get_settings().html_data.ajax.error;\n\n                if (ef) {\n                  ef.call(this, x, t, e);\n                }\n\n                if (obj != -1 && obj.length) {\n                  obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                  obj.removeData(\"jstree_is_loading\");\n\n                  if (t === \"success\" && s.correct_state) {\n                    this.correct_state(obj);\n                  }\n                } else {\n                  if (t === \"success\" && s.correct_state) {\n                    this.get_container().children(\"ul\").empty();\n                  }\n                }\n\n                if (e_call) {\n                  e_call.call(this);\n                }\n              };\n\n              success_func = function success_func(d, t, x) {\n                var sf = this.get_settings().html_data.ajax.success;\n\n                if (sf) {\n                  d = sf.call(this, d, t, x) || d;\n                }\n\n                if (d === \"\" || d && d.toString && d.toString().replace(/^[\\s\\n]+$/, \"\") === \"\") {\n                  return error_func.call(this, x, t, \"\");\n                }\n\n                if (d) {\n                  d = $(d);\n\n                  if (!d.is(\"ul\")) {\n                    d = $(\"<ul />\").append(d);\n                  }\n\n                  if (obj == -1 || !obj) {\n                    this.get_container().children(\"ul\").empty().append(d.children()).find(\"li, a\").filter(function () {\n                      return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== \"INS\";\n                    }).prepend(\"<ins class='jstree-icon'>&#160;</ins>\").end().filter(\"a\").children(\"ins:first-child\").not(\".jstree-icon\").addClass(\"jstree-icon\");\n                  } else {\n                    obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                    obj.append(d).children(\"ul\").find(\"li, a\").filter(function () {\n                      return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== \"INS\";\n                    }).prepend(\"<ins class='jstree-icon'>&#160;</ins>\").end().filter(\"a\").children(\"ins:first-child\").not(\".jstree-icon\").addClass(\"jstree-icon\");\n                    obj.removeData(\"jstree_is_loading\");\n                  }\n\n                  this.clean_node(obj);\n\n                  if (s_call) {\n                    s_call.call(this);\n                  }\n                } else {\n                  if (obj && obj !== -1) {\n                    obj.children(\"a.jstree-loading\").removeClass(\"jstree-loading\");\n                    obj.removeData(\"jstree_is_loading\");\n\n                    if (s.correct_state) {\n                      this.correct_state(obj);\n\n                      if (s_call) {\n                        s_call.call(this);\n                      }\n                    }\n                  } else {\n                    if (s.correct_state) {\n                      this.get_container().children(\"ul\").empty();\n\n                      if (s_call) {\n                        s_call.call(this);\n                      }\n                    }\n                  }\n                }\n              };\n\n              s.ajax.context = this;\n              s.ajax.error = error_func;\n              s.ajax.success = success_func;\n\n              if (!s.ajax.dataType) {\n                s.ajax.dataType = \"html\";\n              }\n\n              if ($.isFunction(s.ajax.url)) {\n                s.ajax.url = s.ajax.url.call(this, obj);\n              }\n\n              if ($.isFunction(s.ajax.data)) {\n                s.ajax.data = s.ajax.data.call(this, obj);\n              }\n\n              $.ajax(s.ajax);\n              break;\n          }\n        }\n      }\n    }); // include the HTML data plugin by default\n\n    $.jstree.defaults.plugins.push(\"html_data\");\n  })(jQuery); //*/\n\n  /* \n   * jsTree themeroller plugin\n   * Adds support for jQuery UI themes. Include this at the end of your plugins list, also make sure \"themes\" is not included.\n   */\n\n\n  (function ($) {\n    $.jstree.plugin(\"themeroller\", {\n      __init: function __init() {\n        var s = this._get_settings().themeroller;\n\n        this.get_container().addClass(\"ui-widget-content\").addClass(\"jstree-themeroller\").delegate(\"a\", \"mouseenter.jstree\", function (e) {\n          if (!$(e.currentTarget).hasClass(\"jstree-loading\")) {\n            $(this).addClass(s.item_h);\n          }\n        }).delegate(\"a\", \"mouseleave.jstree\", function () {\n          $(this).removeClass(s.item_h);\n        }).bind(\"init.jstree\", $.proxy(function (e, data) {\n          data.inst.get_container().find(\"> ul > li > .jstree-loading > ins\").addClass(\"ui-icon-refresh\");\n\n          this._themeroller(data.inst.get_container().find(\"> ul > li\"));\n        }, this)).bind(\"open_node.jstree create_node.jstree\", $.proxy(function (e, data) {\n          this._themeroller(data.rslt.obj);\n        }, this)).bind(\"loaded.jstree refresh.jstree\", $.proxy(function (e) {\n          this._themeroller();\n        }, this)).bind(\"close_node.jstree\", $.proxy(function (e, data) {\n          this._themeroller(data.rslt.obj);\n        }, this)).bind(\"delete_node.jstree\", $.proxy(function (e, data) {\n          this._themeroller(data.rslt.parent);\n        }, this)).bind(\"correct_state.jstree\", $.proxy(function (e, data) {\n          data.rslt.obj.children(\"ins.jstree-icon\").removeClass(s.opened + \" \" + s.closed + \" ui-icon\").end().find(\"> a > ins.ui-icon\").filter(function () {\n            return this.className.toString().replace(s.item_clsd, \"\").replace(s.item_open, \"\").replace(s.item_leaf, \"\").indexOf(\"ui-icon-\") === -1;\n          }).removeClass(s.item_open + \" \" + s.item_clsd).addClass(s.item_leaf || \"jstree-no-icon\");\n        }, this)).bind(\"select_node.jstree\", $.proxy(function (e, data) {\n          data.rslt.obj.children(\"a\").addClass(s.item_a);\n        }, this)).bind(\"deselect_node.jstree deselect_all.jstree\", $.proxy(function (e, data) {\n          this.get_container().find(\"a.\" + s.item_a).removeClass(s.item_a).end().find(\"a.jstree-clicked\").addClass(s.item_a);\n        }, this)).bind(\"dehover_node.jstree\", $.proxy(function (e, data) {\n          data.rslt.obj.children(\"a\").removeClass(s.item_h);\n        }, this)).bind(\"hover_node.jstree\", $.proxy(function (e, data) {\n          this.get_container().find(\"a.\" + s.item_h).not(data.rslt.obj).removeClass(s.item_h);\n          data.rslt.obj.children(\"a\").addClass(s.item_h);\n        }, this)).bind(\"move_node.jstree\", $.proxy(function (e, data) {\n          this._themeroller(data.rslt.o);\n\n          this._themeroller(data.rslt.op);\n        }, this));\n      },\n      __destroy: function __destroy() {\n        var s = this._get_settings().themeroller,\n            c = [\"ui-icon\"];\n\n        $.each(s, function (i, v) {\n          v = v.split(\" \");\n\n          if (v.length) {\n            c = c.concat(v);\n          }\n        });\n        this.get_container().removeClass(\"ui-widget-content\").find(\".\" + c.join(\", .\")).removeClass(c.join(\" \"));\n      },\n      _fn: {\n        _themeroller: function _themeroller(obj) {\n          var s = this._get_settings().themeroller;\n\n          obj = !obj || obj == -1 ? this.get_container_ul() : this._get_node(obj);\n          obj = !obj || obj == -1 ? this.get_container_ul() : obj.parent();\n          obj.find(\"li.jstree-closed\").children(\"ins.jstree-icon\").removeClass(s.opened).addClass(\"ui-icon \" + s.closed).end().children(\"a\").addClass(s.item).children(\"ins.jstree-icon\").addClass(\"ui-icon\").filter(function () {\n            return this.className.toString().replace(s.item_clsd, \"\").replace(s.item_open, \"\").replace(s.item_leaf, \"\").indexOf(\"ui-icon-\") === -1;\n          }).removeClass(s.item_leaf + \" \" + s.item_open).addClass(s.item_clsd || \"jstree-no-icon\").end().end().end().end().find(\"li.jstree-open\").children(\"ins.jstree-icon\").removeClass(s.closed).addClass(\"ui-icon \" + s.opened).end().children(\"a\").addClass(s.item).children(\"ins.jstree-icon\").addClass(\"ui-icon\").filter(function () {\n            return this.className.toString().replace(s.item_clsd, \"\").replace(s.item_open, \"\").replace(s.item_leaf, \"\").indexOf(\"ui-icon-\") === -1;\n          }).removeClass(s.item_leaf + \" \" + s.item_clsd).addClass(s.item_open || \"jstree-no-icon\").end().end().end().end().find(\"li.jstree-leaf\").children(\"ins.jstree-icon\").removeClass(s.closed + \" ui-icon \" + s.opened).end().children(\"a\").addClass(s.item).children(\"ins.jstree-icon\").addClass(\"ui-icon\").filter(function () {\n            return this.className.toString().replace(s.item_clsd, \"\").replace(s.item_open, \"\").replace(s.item_leaf, \"\").indexOf(\"ui-icon-\") === -1;\n          }).removeClass(s.item_clsd + \" \" + s.item_open).addClass(s.item_leaf || \"jstree-no-icon\");\n        }\n      },\n      defaults: {\n        \"opened\": \"ui-icon-triangle-1-se\",\n        \"closed\": \"ui-icon-triangle-1-e\",\n        \"item\": \"ui-state-default\",\n        \"item_h\": \"ui-state-hover\",\n        \"item_a\": \"ui-state-active\",\n        \"item_open\": \"ui-icon-folder-open\",\n        \"item_clsd\": \"ui-icon-folder-collapsed\",\n        \"item_leaf\": \"ui-icon-document\"\n      }\n    });\n    $(function () {\n      var css_string = '' + '.jstree-themeroller .ui-icon { overflow:visible; } ' + '.jstree-themeroller a { padding:0 2px; } ' + '.jstree-themeroller .jstree-no-icon { display:none; }';\n      $.vakata.css.add_sheet({\n        str: css_string,\n        title: \"jstree\"\n      });\n    });\n  })(jQuery); //*/\n\n  /* \n   * jsTree unique plugin\n   * Forces different names amongst siblings (still a bit experimental)\n   * NOTE: does not check language versions (it will not be possible to have nodes with the same title, even in different languages)\n   */\n\n\n  (function ($) {\n    $.jstree.plugin(\"unique\", {\n      __init: function __init() {\n        this.get_container().bind(\"before.jstree\", $.proxy(function (e, data) {\n          var nms = [],\n              res = true,\n              p,\n              t;\n\n          if (data.func == \"move_node\") {\n            // obj, ref, position, is_copy, is_prepared, skip_check\n            if (data.args[4] === true) {\n              if (data.args[0].o && data.args[0].o.length) {\n                data.args[0].o.children(\"a\").each(function () {\n                  nms.push($(this).text().replace(/^\\s+/g, \"\"));\n                });\n                res = this._check_unique(nms, data.args[0].np.find(\"> ul > li\").not(data.args[0].o), \"move_node\");\n              }\n            }\n          }\n\n          if (data.func == \"create_node\") {\n            // obj, position, js, callback, is_loaded\n            if (data.args[4] || this._is_loaded(data.args[0])) {\n              p = this._get_node(data.args[0]);\n\n              if (data.args[1] && (data.args[1] === \"before\" || data.args[1] === \"after\")) {\n                p = this._get_parent(data.args[0]);\n\n                if (!p || p === -1) {\n                  p = this.get_container();\n                }\n              }\n\n              if (typeof data.args[2] === \"string\") {\n                nms.push(data.args[2]);\n              } else if (!data.args[2] || !data.args[2].data) {\n                nms.push(this._get_string(\"new_node\"));\n              } else {\n                nms.push(data.args[2].data);\n              }\n\n              res = this._check_unique(nms, p.find(\"> ul > li\"), \"create_node\");\n            }\n          }\n\n          if (data.func == \"rename_node\") {\n            // obj, val\n            nms.push(data.args[1]);\n            t = this._get_node(data.args[0]);\n            p = this._get_parent(t);\n\n            if (!p || p === -1) {\n              p = this.get_container();\n            }\n\n            res = this._check_unique(nms, p.find(\"> ul > li\").not(t), \"rename_node\");\n          }\n\n          if (!res) {\n            e.stopPropagation();\n            return false;\n          }\n        }, this));\n      },\n      defaults: {\n        error_callback: $.noop\n      },\n      _fn: {\n        _check_unique: function _check_unique(nms, p, func) {\n          var cnms = [],\n              ok = true;\n          p.children(\"a\").each(function () {\n            cnms.push($(this).text().replace(/^\\s+/g, \"\"));\n          });\n\n          if (!cnms.length || !nms.length) {\n            return true;\n          }\n\n          $.each(nms, function (i, v) {\n            if ($.inArray(v, cnms) !== -1) {\n              ok = false;\n              return false;\n            }\n          });\n\n          if (!ok) {\n            this._get_settings().unique.error_callback.call(null, nms, p, func);\n          }\n\n          return ok;\n        },\n        check_move: function check_move() {\n          if (!this.__call_old()) {\n            return false;\n          }\n\n          var p = this._get_move(),\n              nms = [];\n\n          if (p.o && p.o.length) {\n            p.o.children(\"a\").each(function () {\n              nms.push($(this).text().replace(/^\\s+/g, \"\"));\n            });\n            return this._check_unique(nms, p.np.find(\"> ul > li\").not(p.o), \"check_move\");\n          }\n\n          return true;\n        }\n      }\n    });\n  })(jQuery); //*/\n\n  /*\n   * jsTree wholerow plugin\n   * Makes select and hover work on the entire width of the node\n   * MAY BE HEAVY IN LARGE DOM\n   */\n\n\n  (function ($) {\n    $.jstree.plugin(\"wholerow\", {\n      __init: function __init() {\n        if (!this.data.ui) {\n          throw \"jsTree wholerow: jsTree UI plugin not included.\";\n        }\n\n        this.data.wholerow.html = false;\n        this.data.wholerow.to = false;\n        this.get_container().bind(\"init.jstree\", $.proxy(function (e, data) {\n          this._get_settings().core.animation = 0;\n        }, this)).bind(\"open_node.jstree create_node.jstree clean_node.jstree loaded.jstree\", $.proxy(function (e, data) {\n          this._prepare_wholerow_span(data && data.rslt && data.rslt.obj ? data.rslt.obj : -1);\n        }, this)).bind(\"search.jstree clear_search.jstree reopen.jstree after_open.jstree after_close.jstree create_node.jstree delete_node.jstree clean_node.jstree\", $.proxy(function (e, data) {\n          if (this.data.to) {\n            clearTimeout(this.data.to);\n          }\n\n          this.data.to = setTimeout(function (t, o) {\n            return function () {\n              t._prepare_wholerow_ul(o);\n            };\n          }(this, data && data.rslt && data.rslt.obj ? data.rslt.obj : -1), 0);\n        }, this)).bind(\"deselect_all.jstree\", $.proxy(function (e, data) {\n          this.get_container().find(\" > .jstree-wholerow .jstree-clicked\").removeClass(\"jstree-clicked \" + (this.data.themeroller ? this._get_settings().themeroller.item_a : \"\"));\n        }, this)).bind(\"select_node.jstree deselect_node.jstree \", $.proxy(function (e, data) {\n          data.rslt.obj.each(function () {\n            var ref = data.inst.get_container().find(\" > .jstree-wholerow li:visible:eq(\" + parseInt(($(this).offset().top - data.inst.get_container().offset().top + data.inst.get_container()[0].scrollTop) / data.inst.data.core.li_height, 10) + \")\"); // ref.children(\"a\")[e.type === \"select_node\" ? \"addClass\" : \"removeClass\"](\"jstree-clicked\");\n\n            ref.children(\"a\").attr(\"class\", data.rslt.obj.children(\"a\").attr(\"class\"));\n          });\n        }, this)).bind(\"hover_node.jstree dehover_node.jstree\", $.proxy(function (e, data) {\n          this.get_container().find(\" > .jstree-wholerow .jstree-hovered\").removeClass(\"jstree-hovered \" + (this.data.themeroller ? this._get_settings().themeroller.item_h : \"\"));\n\n          if (e.type === \"hover_node\") {\n            var ref = this.get_container().find(\" > .jstree-wholerow li:visible:eq(\" + parseInt((data.rslt.obj.offset().top - this.get_container().offset().top + this.get_container()[0].scrollTop) / this.data.core.li_height, 10) + \")\"); // ref.children(\"a\").addClass(\"jstree-hovered\");\n\n            ref.children(\"a\").attr(\"class\", data.rslt.obj.children(\".jstree-hovered\").attr(\"class\"));\n          }\n        }, this)).delegate(\".jstree-wholerow-span, ins.jstree-icon, li\", \"click.jstree\", function (e) {\n          var n = $(e.currentTarget);\n\n          if (e.target.tagName === \"A\" || e.target.tagName === \"INS\" && n.closest(\"li\").is(\".jstree-open, .jstree-closed\")) {\n            return;\n          }\n\n          n.closest(\"li\").children(\"a:visible:eq(0)\").click();\n          e.stopImmediatePropagation();\n        }).delegate(\"li\", \"mouseover.jstree\", $.proxy(function (e) {\n          e.stopImmediatePropagation();\n\n          if ($(e.currentTarget).children(\".jstree-hovered, .jstree-clicked\").length) {\n            return false;\n          }\n\n          this.hover_node(e.currentTarget);\n          return false;\n        }, this)).delegate(\"li\", \"mouseleave.jstree\", $.proxy(function (e) {\n          if ($(e.currentTarget).children(\"a\").hasClass(\"jstree-hovered\").length) {\n            return;\n          }\n\n          this.dehover_node(e.currentTarget);\n        }, this));\n\n        if (is_ie7 || is_ie6) {\n          $.vakata.css.add_sheet({\n            str: \".jstree-\" + this.get_index() + \" { position:relative; } \",\n            title: \"jstree\"\n          });\n        }\n      },\n      defaults: {},\n      __destroy: function __destroy() {\n        this.get_container().children(\".jstree-wholerow\").remove();\n        this.get_container().find(\".jstree-wholerow-span\").remove();\n      },\n      _fn: {\n        _prepare_wholerow_span: function _prepare_wholerow_span(obj) {\n          obj = !obj || obj == -1 ? this.get_container().find(\"> ul > li\") : this._get_node(obj);\n\n          if (obj === false) {\n            return;\n          } // added for removing root nodes\n\n\n          obj.each(function () {\n            $(this).find(\"li\").addBack().each(function () {\n              var $t = $(this);\n\n              if ($t.children(\".jstree-wholerow-span\").length) {\n                return true;\n              }\n\n              $t.prepend(\"<span class='jstree-wholerow-span' style='width:\" + $t.parentsUntil(\".jstree\", \"li\").length * 18 + \"px;'>&#160;</span>\");\n            });\n          });\n        },\n        _prepare_wholerow_ul: function _prepare_wholerow_ul() {\n          var o = this.get_container().children(\"ul\").eq(0),\n              h = o.html();\n          o.addClass(\"jstree-wholerow-real\");\n\n          if (this.data.wholerow.last_html !== h) {\n            this.data.wholerow.last_html = h;\n            this.get_container().children(\".jstree-wholerow\").remove();\n            this.get_container().append(o.clone().removeClass(\"jstree-wholerow-real\").wrapAll(\"<div class='jstree-wholerow' />\").parent().width(o.parent()[0].scrollWidth).css(\"top\", (o.height() + (is_ie7 ? 5 : 0)) * -1).find(\"li[id]\").each(function () {\n              this.removeAttribute(\"id\");\n            }).end());\n          }\n        }\n      }\n    });\n    $(function () {\n      var css_string = '' + '.jstree .jstree-wholerow-real { position:relative; z-index:1; } ' + '.jstree .jstree-wholerow-real li { cursor:pointer; } ' + '.jstree .jstree-wholerow-real a { border-left-color:transparent !important; border-right-color:transparent !important; } ' + '.jstree .jstree-wholerow { position:relative; z-index:0; height:0; } ' + '.jstree .jstree-wholerow ul, .jstree .jstree-wholerow li { width:100%; } ' + '.jstree .jstree-wholerow, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow li, .jstree .jstree-wholerow a { margin:0 !important; padding:0 !important; } ' + '.jstree .jstree-wholerow, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow li { background:transparent !important; }' + '.jstree .jstree-wholerow ins, .jstree .jstree-wholerow span, .jstree .jstree-wholerow input { display:none !important; }' + '.jstree .jstree-wholerow a, .jstree .jstree-wholerow a:hover { text-indent:-9999px; !important; width:100%; padding:0 !important; border-right-width:0px !important; border-left-width:0px !important; } ' + '.jstree .jstree-wholerow-span { position:absolute; left:0; margin:0px; padding:0; height:18px; border-width:0; padding:0; z-index:0; }';\n\n      if (is_ff2) {\n        css_string += '' + '.jstree .jstree-wholerow a { display:block; height:18px; margin:0; padding:0; border:0; } ' + '.jstree .jstree-wholerow-real a { border-color:transparent !important; } ';\n      }\n\n      if (is_ie7 || is_ie6) {\n        css_string += '' + '.jstree .jstree-wholerow, .jstree .jstree-wholerow li, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow a { margin:0; padding:0; line-height:18px; } ' + '.jstree .jstree-wholerow a { display:block; height:18px; line-height:18px; overflow:hidden; } ';\n      }\n\n      $.vakata.css.add_sheet({\n        str: css_string,\n        title: \"jstree\"\n      });\n    });\n  })(jQuery); //*/\n\n  /*\n  * jsTree model plugin\n  * This plugin gets jstree to use a class model to retrieve data, creating great dynamism\n  */\n\n\n  (function ($) {\n    var nodeInterface = [\"getChildren\", \"getChildrenCount\", \"getAttr\", \"getName\", \"getProps\"],\n        validateInterface = function validateInterface(obj, inter) {\n      var valid = true;\n      obj = obj || {};\n      inter = [].concat(inter);\n      $.each(inter, function (i, v) {\n        if (!$.isFunction(obj[v])) {\n          valid = false;\n          return false;\n        }\n      });\n      return valid;\n    };\n\n    $.jstree.plugin(\"model\", {\n      __init: function __init() {\n        if (!this.data.json_data) {\n          throw \"jsTree model: jsTree json_data plugin not included.\";\n        }\n\n        this._get_settings().json_data.data = function (n, b) {\n          var obj = n == -1 ? this._get_settings().model.object : n.data(\"jstree_model\");\n\n          if (!validateInterface(obj, nodeInterface)) {\n            return b.call(null, false);\n          }\n\n          if (this._get_settings().model.async) {\n            obj.getChildren($.proxy(function (data) {\n              this.model_done(data, b);\n            }, this));\n          } else {\n            this.model_done(obj.getChildren(), b);\n          }\n        };\n      },\n      defaults: {\n        object: false,\n        id_prefix: false,\n        async: false\n      },\n      _fn: {\n        model_done: function model_done(data, callback) {\n          var ret = [],\n              s = this._get_settings(),\n              _this = this;\n\n          if (!$.isArray(data)) {\n            data = [data];\n          }\n\n          $.each(data, function (i, nd) {\n            var r = nd.getProps() || {};\n            r.attr = nd.getAttr() || {};\n\n            if (nd.getChildrenCount()) {\n              r.state = \"closed\";\n            }\n\n            r.data = nd.getName();\n\n            if (!$.isArray(r.data)) {\n              r.data = [r.data];\n            }\n\n            if (_this.data.types && $.isFunction(nd.getType)) {\n              r.attr[s.types.type_attr] = nd.getType();\n            }\n\n            if (r.attr.id && s.model.id_prefix) {\n              r.attr.id = s.model.id_prefix + r.attr.id;\n            }\n\n            if (!r.metadata) {\n              r.metadata = {};\n            }\n\n            r.metadata.jstree_model = nd;\n            ret.push(r);\n          });\n          callback.call(null, ret);\n        }\n      }\n    });\n  })(jQuery); //*/\n\n})();\n\n//# sourceURL=webpack:///./resources/assets/javascripts/jquery/jstree/jquery.jstree.js?");

/***/ }),

/***/ "qd03":
/*!*************************************************************!*\
  !*** ./resources/assets/javascripts/bootstrap/admission.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* ------------------------------------------------------------------------\n * Anmeldeverfahren und -sets\n * ------------------------------------------------------------------------ */\nSTUDIP.domReady(function () {\n  $(document).on('change', 'tr.course input', function (i) {\n    STUDIP.Admission.toggleNotSavedAlert();\n  });\n  $('a.userlist-delete-user').on('click', function (event) {\n    $(this).closest('tr').remove();\n    return false;\n  });\n});\n\n//# sourceURL=webpack:///./resources/assets/javascripts/bootstrap/admission.js?");

/***/ })

/******/ });