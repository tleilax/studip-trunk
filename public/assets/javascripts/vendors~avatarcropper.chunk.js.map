{"version":3,"sources":["webpack:///./node_modules/cropperjs/dist/cropper.js"],"names":["module","exports","IN_BROWSER","window","WINDOW","NAMESPACE","ACTION_ALL","ACTION_CROP","ACTION_MOVE","ACTION_ZOOM","ACTION_EAST","ACTION_WEST","ACTION_SOUTH","ACTION_NORTH","ACTION_NORTH_EAST","ACTION_NORTH_WEST","ACTION_SOUTH_EAST","ACTION_SOUTH_WEST","CLASS_CROP","CLASS_DISABLED","CLASS_HIDDEN","CLASS_HIDE","CLASS_MODAL","CLASS_MOVE","DATA_ACTION","DATA_PREVIEW","DRAG_MODE_CROP","DRAG_MODE_MOVE","DRAG_MODE_NONE","EVENT_CROP","EVENT_CROP_END","EVENT_CROP_MOVE","EVENT_CROP_START","EVENT_DBLCLICK","EVENT_POINTER_DOWN","PointerEvent","EVENT_POINTER_MOVE","EVENT_POINTER_UP","EVENT_READY","EVENT_RESIZE","EVENT_WHEEL","EVENT_ZOOM","REGEXP_ACTIONS","REGEXP_DATA_URL","REGEXP_DATA_URL_JPEG","REGEXP_TAG_NAME","DEFAULTS","viewMode","dragMode","initialAspectRatio","NaN","aspectRatio","data","preview","responsive","restore","checkCrossOrigin","checkOrientation","modal","guides","center","highlight","background","autoCrop","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick","minCanvasWidth","minCanvasHeight","minCropBoxWidth","minCropBoxHeight","minContainerWidth","minContainerHeight","ready","cropstart","cropmove","cropend","crop","zoom","_typeof","Symbol","iterator","obj","constructor","prototype","createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","toConsumableArray","arr","Array","isArray","arr2","from","isNaN","Number","isNumber","value","isUndefined","isObject","hasOwnProperty","isPlainObject","_constructor","call","e","isFunction","forEach","callback","keys","assign","_len","arguments","args","_key","arg","REGEXP_DECIMALS","normalizeDecimalNumber","times","undefined","test","Math","round","REGEXP_SUFFIX","setStyle","element","styles","style","property","addClass","elem","classList","add","className","trim","indexOf","removeClass","remove","replace","toggleClass","added","REGEXP_HYPHENATE","hyphenate","toLowerCase","getData","name","dataset","getAttribute","setData","setAttribute","removeData","removeAttribute","REGEXP_SPACES","onceSupported","supported","once","listener","options","get","set","addEventListener","removeEventListener","removeListener","type","handler","split","event","listeners","addListener","_handler","_element$listeners","_len2","_key2","apply","dispatchEvent","Event","CustomEvent","detail","bubbles","cancelable","document","createEvent","initCustomEvent","getOffset","box","getBoundingClientRect","left","pageXOffset","documentElement","clientLeft","top","pageYOffset","clientTop","location","REGEXP_ORIGINS","isCrossOriginURL","url","parts","match","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","getTransforms","_ref","rotate","scaleX","scaleY","translateX","translateY","values","push","transform","join","WebkitTransform","msTransform","getPointer","_ref2","endOnly","pageX","pageY","end","endX","endY","startX","startY","isFinite","getAdjustedSizes","_ref4","height","width","isValidNumber","adjustedWidth","fromCharCode","String","REGEXP_DATA_URL_HEAD","getOrientation","arrayBuffer","dataView","DataView","orientation","littleEndian","app1Start","ifdStart","getUint8","byteLength","offset","exifIDCode","tiffOffset","start","str","getStringFromCharCode","endianness","getUint16","firstIFDOffset","getUint32","_length","_offset","setUint16","render","this","initContainer","initCanvas","initCropBox","renderCanvas","cropped","renderCropBox","container","cropper","containerData","max","offsetWidth","offsetHeight","imageData","rotated","abs","naturalWidth","naturalHeight","canvasWidth","canvasHeight","canvasData","oldLeft","oldTop","limited","limitCanvas","initialImageData","initialCanvasData","sizeLimited","positionLimited","cropBoxData","_getAdjustedSizes","minWidth","minHeight","maxWidth","Infinity","maxHeight","newCanvasLeft","newCanvasTop","minLeft","min","minTop","maxLeft","maxTop","changed","transformed","_getRotatedSizes","_ref5","degree","arc","PI","sinArc","sin","cosArc","cos","newWidth","newHeight","getRotatedSizes","canvas","renderImage","limitCropBox","image","output","initialCropBoxData","maxCropBoxWidth","maxCropBoxHeight","face","cropBox","disabled","initPreview","crossOrigin","crossOriginUrl","createElement","src","viewBox","appendChild","viewBoxImage","previews","ownerDocument","querySelectorAll","querySelector","el","img","html","innerHTML","cssText","resetPreview","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","ratio","getElementsByTagName","events","bind","onCropStart","cropStart","onWheel","wheel","onDblclick","dblclick","onCropMove","cropMove","onCropEnd","cropEnd","onResize","resize","unbind","handlers","getCanvasData","getCropBoxData","setCanvasData","n","setCropBoxData","setDragMode","dragBox","contains","_this","delta","preventDefault","wheeling","setTimeout","deltaY","wheelDelta","pointers","action","changedTouches","touch","identifier","pointerId","originalEvent","cropping","change","right","bottom","renderable","shiftKey","pointers2","ratios","pointer","range","x","y","check","side","move","pointer2","x1","y1","x2","y2","z1","sqrt","sort","a","b","p","methods","reset","clear","hasSameSize","isImg","replaced","uncreate","load","enable","disable","destroy","originalUrl","offsetX","offsetY","_canvasData","moveTo","_originalEvent","zoomTo","pivot","count","oldRatio","_ref3","rotateTo","_scaleX","scale","_scaleY","rounded","getContainerData","getImageData","sized","widthChanged","heightChanged","getCroppedCanvas","HTMLCanvasElement","_ref6","_ref7","_ref8","imageAspectRatio","imageNaturalWidth","imageNaturalHeight","_ref6$rotate","_ref6$scaleX","_ref6$scaleY","_ref8$fillColor","fillColor","_ref8$imageSmoothingE","imageSmoothingEnabled","_ref8$imageSmoothingQ","imageSmoothingQuality","_ref8$maxWidth","_ref8$maxHeight","_ref8$minWidth","_ref8$minHeight","context","maxSizes","minSizes","destMaxSizes","destMinSizes","destWidth","destHeight","params","source","getContext","fillStyle","fillRect","save","translate","drawImage","concat","map","param","floor","_getData","initialX","initialY","initialWidth","initialHeight","_options$imageSmoothi","sourceWidth","sourceHeight","srcX","srcY","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","setAspectRatio","mode","croppable","AnotherCropper","Cropper","instance","TypeError","classCallCheck","tagName","Error","reloading","sizing","init","toDataURL","ArrayBuffer","read","base64","binary","atob","uint8","Uint8Array","charCodeAt","clone","xhr","XMLHttpRequest","done","ontimeout","onabort","onerror","onload","response","open","responseType","withCredentials","send","mimeType","btoa","_parseOrientation","parseOrientation","stop","parentNode","insertBefore","nextSibling","_this2","IS_SAFARI","navigator","userAgent","build","sizingImage","body","removeChild","template","getElementsByClassName","unbuild","abort","factory"],"mappings":"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","file":"javascripts/vendors~avatarcropper.chunk.js","sourcesContent":["/*!\n * Cropper.js v1.4.0\n * https://fengyuanchen.github.io/cropperjs\n *\n * Copyright 2015-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2018-06-01T15:18:18.692Z\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Cropper = factory());\n}(this, (function () { 'use strict';\n\n  var IN_BROWSER = typeof window !== 'undefined';\n  var WINDOW = IN_BROWSER ? window : {};\n  var NAMESPACE = 'cropper';\n\n  // Actions\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw';\n\n  // Classes\n  var CLASS_CROP = NAMESPACE + '-crop';\n  var CLASS_DISABLED = NAMESPACE + '-disabled';\n  var CLASS_HIDDEN = NAMESPACE + '-hidden';\n  var CLASS_HIDE = NAMESPACE + '-hide';\n  var CLASS_INVISIBLE = NAMESPACE + '-invisible';\n  var CLASS_MODAL = NAMESPACE + '-modal';\n  var CLASS_MOVE = NAMESPACE + '-move';\n\n  // Data keys\n  var DATA_ACTION = NAMESPACE + 'Action';\n  var DATA_PREVIEW = NAMESPACE + 'Preview';\n\n  // Drag modes\n  var DRAG_MODE_CROP = 'crop';\n  var DRAG_MODE_MOVE = 'move';\n  var DRAG_MODE_NONE = 'none';\n\n  // Events\n  var EVENT_CROP = 'crop';\n  var EVENT_CROP_END = 'cropend';\n  var EVENT_CROP_MOVE = 'cropmove';\n  var EVENT_CROP_START = 'cropstart';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_POINTER_DOWN = WINDOW.PointerEvent ? 'pointerdown' : 'touchstart mousedown';\n  var EVENT_POINTER_MOVE = WINDOW.PointerEvent ? 'pointermove' : 'touchmove mousemove';\n  var EVENT_POINTER_UP = WINDOW.PointerEvent ? 'pointerup pointercancel' : 'touchend touchcancel mouseup';\n  var EVENT_READY = 'ready';\n  var EVENT_RESIZE = 'resize';\n  var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\n  var EVENT_ZOOM = 'zoom';\n\n  // RegExps\n  var REGEXP_ACTIONS = /^(?:e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/;\n  var REGEXP_DATA_URL = /^data:/;\n  var REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\n  var REGEXP_TAG_NAME = /^(?:img|canvas)$/i;\n\n  var DEFAULTS = {\n    // Define the view mode of the cropper\n    viewMode: 0, // 0, 1, 2, 3\n\n    // Define the dragging mode of the cropper\n    dragMode: DRAG_MODE_CROP, // 'crop', 'move' or 'none'\n\n    // Define the initial aspect ratio of the crop box\n    initialAspectRatio: NaN,\n\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n\n    // An object with the previous cropping result data\n    data: null,\n\n    // A selector for adding extra containers to preview\n    preview: '',\n\n    // Re-render the cropper when resize the window\n    responsive: true,\n\n    // Restore the cropped area after resize the window\n    restore: true,\n\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n\n    // Show the black modal\n    modal: true,\n\n    // Show the dashed lines for guiding\n    guides: true,\n\n    // Show the center indicator for guiding\n    center: true,\n\n    // Show the white modal to highlight the crop box\n    highlight: true,\n\n    // Show the grid background\n    background: true,\n\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n\n    // Enable to move the image\n    movable: true,\n\n    // Enable to rotate the image\n    rotatable: true,\n\n    // Enable to scale the image\n    scalable: true,\n\n    // Enable to zoom the image\n    zoomable: true,\n\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n\n    // Enable to move the crop box\n    cropBoxMovable: true,\n\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n\n    // Shortcuts of events\n    ready: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  var TEMPLATE = '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + '</div>' + '</div>';\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var toConsumableArray = function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  };\n\n  /**\n   * Check if the given value is not a number.\n   */\n  var isNaN = Number.isNaN || WINDOW.isNaN;\n\n  /**\n   * Check if the given value is a number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n   */\n  function isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n  }\n\n  /**\n   * Check if the given value is undefined.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n   */\n  function isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n\n  /**\n   * Check if the given value is an object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n   */\n  function isObject(value) {\n    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null;\n  }\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /**\n   * Check if the given value is a plain object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n   */\n\n  function isPlainObject(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n\n    try {\n      var _constructor = value.constructor;\n      var prototype = _constructor.prototype;\n\n\n      return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check if the given value is a function.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n   */\n  function isFunction(value) {\n    return typeof value === 'function';\n  }\n\n  /**\n   * Iterate the given data.\n   * @param {*} data - The data to iterate.\n   * @param {Function} callback - The process function for each element.\n   * @returns {*} The original data.\n   */\n  function forEach(data, callback) {\n    if (data && isFunction(callback)) {\n      if (Array.isArray(data) || isNumber(data.length) /* array-like */) {\n          var length = data.length;\n\n          var i = void 0;\n\n          for (i = 0; i < length; i += 1) {\n            if (callback.call(data, data[i], i, data) === false) {\n              break;\n            }\n          }\n        } else if (isObject(data)) {\n        Object.keys(data).forEach(function (key) {\n          callback.call(data, data[key], key, data);\n        });\n      }\n    }\n\n    return data;\n  }\n\n  /**\n   * Extend the given object.\n   * @param {*} obj - The object to be extended.\n   * @param {*} args - The rest objects which will be merged to the first object.\n   * @returns {Object} The extended object.\n   */\n  var assign = Object.assign || function assign(obj) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (isObject(obj) && args.length > 0) {\n      args.forEach(function (arg) {\n        if (isObject(arg)) {\n          Object.keys(arg).forEach(function (key) {\n            obj[key] = arg[key];\n          });\n        }\n      });\n    }\n\n    return obj;\n  };\n\n  var REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/i;\n\n  /**\n   * Normalize decimal number.\n   * Check out {@link http://0.30000000000000004.com/}\n   * @param {number} value - The value to normalize.\n   * @param {number} [times=100000000000] - The times for normalizing.\n   * @returns {number} Returns the normalized number.\n   */\n  function normalizeDecimalNumber(value) {\n    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n\n    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n  }\n\n  var REGEXP_SUFFIX = /^(?:width|height|left|top|marginLeft|marginTop)$/;\n\n  /**\n   * Apply styles to the given element.\n   * @param {Element} element - The target element.\n   * @param {Object} styles - The styles for applying.\n   */\n  function setStyle(element, styles) {\n    var style = element.style;\n\n\n    forEach(styles, function (value, property) {\n      if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n        value += 'px';\n      }\n\n      style[property] = value;\n    });\n  }\n\n  /**\n   * Check if the given element has a special class.\n   * @param {Element} element - The element to check.\n   * @param {string} value - The class to search.\n   * @returns {boolean} Returns `true` if the special class was found.\n   */\n  function hasClass(element, value) {\n    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n  }\n\n  /**\n   * Add classes to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be added.\n   */\n  function addClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        addClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.add(value);\n      return;\n    }\n\n    var className = element.className.trim();\n\n    if (!className) {\n      element.className = value;\n    } else if (className.indexOf(value) < 0) {\n      element.className = className + ' ' + value;\n    }\n  }\n\n  /**\n   * Remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be removed.\n   */\n  function removeClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        removeClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.remove(value);\n      return;\n    }\n\n    if (element.className.indexOf(value) >= 0) {\n      element.className = element.className.replace(value, '');\n    }\n  }\n\n  /**\n   * Add or remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be toggled.\n   * @param {boolean} added - Add only.\n   */\n  function toggleClass(element, value, added) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        toggleClass(elem, value, added);\n      });\n      return;\n    }\n\n    // IE10-11 doesn't support the second parameter of `classList.toggle`\n    if (added) {\n      addClass(element, value);\n    } else {\n      removeClass(element, value);\n    }\n  }\n\n  var REGEXP_HYPHENATE = /([a-z\\d])([A-Z])/g;\n\n  /**\n   * Transform the given string from camelCase to kebab-case\n   * @param {string} value - The value to transform.\n   * @returns {string} The transformed value.\n   */\n  function hyphenate(value) {\n    return value.replace(REGEXP_HYPHENATE, '$1-$2').toLowerCase();\n  }\n\n  /**\n   * Get data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to get.\n   * @returns {string} The data value.\n   */\n  function getData(element, name) {\n    if (isObject(element[name])) {\n      return element[name];\n    } else if (element.dataset) {\n      return element.dataset[name];\n    }\n\n    return element.getAttribute('data-' + hyphenate(name));\n  }\n\n  /**\n   * Set data to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to set.\n   * @param {string} data - The data value.\n   */\n  function setData(element, name, data) {\n    if (isObject(data)) {\n      element[name] = data;\n    } else if (element.dataset) {\n      element.dataset[name] = data;\n    } else {\n      element.setAttribute('data-' + hyphenate(name), data);\n    }\n  }\n\n  /**\n   * Remove data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to remove.\n   */\n  function removeData(element, name) {\n    if (isObject(element[name])) {\n      try {\n        delete element[name];\n      } catch (e) {\n        element[name] = undefined;\n      }\n    } else if (element.dataset) {\n      // #128 Safari not allows to delete dataset property\n      try {\n        delete element.dataset[name];\n      } catch (e) {\n        element.dataset[name] = undefined;\n      }\n    } else {\n      element.removeAttribute('data-' + hyphenate(name));\n    }\n  }\n\n  var REGEXP_SPACES = /\\s\\s*/;\n  var onceSupported = function () {\n    var supported = false;\n\n    if (IN_BROWSER) {\n      var once = false;\n      var listener = function listener() {};\n      var options = Object.defineProperty({}, 'once', {\n        get: function get$$1() {\n          supported = true;\n          return once;\n        },\n\n\n        /**\n         * This setter can fix a `TypeError` in strict mode\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\n         * @param {boolean} value - The value to set\n         */\n        set: function set$$1(value) {\n          once = value;\n        }\n      });\n\n      WINDOW.addEventListener('test', listener, options);\n      WINDOW.removeEventListener('test', listener, options);\n    }\n\n    return supported;\n  }();\n\n  /**\n   * Remove event listener from the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n  function removeListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    var handler = listener;\n\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (!onceSupported) {\n        var listeners = element.listeners;\n\n\n        if (listeners && listeners[event] && listeners[event][listener]) {\n          handler = listeners[event][listener];\n          delete listeners[event][listener];\n\n          if (Object.keys(listeners[event]).length === 0) {\n            delete listeners[event];\n          }\n\n          if (Object.keys(listeners).length === 0) {\n            delete element.listeners;\n          }\n        }\n      }\n\n      element.removeEventListener(event, handler, options);\n    });\n  }\n\n  /**\n   * Add event listener to the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n  function addListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    var _handler = listener;\n\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (options.once && !onceSupported) {\n        var _element$listeners = element.listeners,\n            listeners = _element$listeners === undefined ? {} : _element$listeners;\n\n\n        _handler = function handler() {\n          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          delete listeners[event][listener];\n          element.removeEventListener(event, _handler, options);\n          listener.apply(element, args);\n        };\n\n        if (!listeners[event]) {\n          listeners[event] = {};\n        }\n\n        if (listeners[event][listener]) {\n          element.removeEventListener(event, listeners[event][listener], options);\n        }\n\n        listeners[event][listener] = _handler;\n        element.listeners = listeners;\n      }\n\n      element.addEventListener(event, _handler, options);\n    });\n  }\n\n  /**\n   * Dispatch event on the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Object} data - The additional event data.\n   * @returns {boolean} Indicate if the event is default prevented or not.\n   */\n  function dispatchEvent(element, type, data) {\n    var event = void 0;\n\n    // Event and CustomEvent on IE9-11 are global objects, not constructors\n    if (isFunction(Event) && isFunction(CustomEvent)) {\n      event = new CustomEvent(type, {\n        detail: data,\n        bubbles: true,\n        cancelable: true\n      });\n    } else {\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent(type, true, true, data);\n    }\n\n    return element.dispatchEvent(event);\n  }\n\n  /**\n   * Get the offset base on the document.\n   * @param {Element} element - The target element.\n   * @returns {Object} The offset data.\n   */\n  function getOffset(element) {\n    var box = element.getBoundingClientRect();\n\n    return {\n      left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\n      top: box.top + (window.pageYOffset - document.documentElement.clientTop)\n    };\n  }\n\n  var location = WINDOW.location;\n\n  var REGEXP_ORIGINS = /^(https?:)\\/\\/([^:/?#]+):?(\\d*)/i;\n\n  /**\n   * Check if the given URL is a cross origin URL.\n   * @param {string} url - The target URL.\n   * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\n   */\n  function isCrossOriginURL(url) {\n    var parts = url.match(REGEXP_ORIGINS);\n\n    return parts && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n  }\n\n  /**\n   * Add timestamp to the given URL.\n   * @param {string} url - The target URL.\n   * @returns {string} The result URL.\n   */\n  function addTimestamp(url) {\n    var timestamp = 'timestamp=' + new Date().getTime();\n\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n  }\n\n  /**\n   * Get transforms base on the given object.\n   * @param {Object} obj - The target object.\n   * @returns {string} A string contains transform values.\n   */\n  function getTransforms(_ref) {\n    var rotate = _ref.rotate,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        translateX = _ref.translateX,\n        translateY = _ref.translateY;\n\n    var values = [];\n\n    if (isNumber(translateX) && translateX !== 0) {\n      values.push('translateX(' + translateX + 'px)');\n    }\n\n    if (isNumber(translateY) && translateY !== 0) {\n      values.push('translateY(' + translateY + 'px)');\n    }\n\n    // Rotate should come first before scale to match orientation transform\n    if (isNumber(rotate) && rotate !== 0) {\n      values.push('rotate(' + rotate + 'deg)');\n    }\n\n    if (isNumber(scaleX) && scaleX !== 1) {\n      values.push('scaleX(' + scaleX + ')');\n    }\n\n    if (isNumber(scaleY) && scaleY !== 1) {\n      values.push('scaleY(' + scaleY + ')');\n    }\n\n    var transform = values.length ? values.join(' ') : 'none';\n\n    return {\n      WebkitTransform: transform,\n      msTransform: transform,\n      transform: transform\n    };\n  }\n\n  /**\n   * Get the max ratio of a group of pointers.\n   * @param {string} pointers - The target pointers.\n   * @returns {number} The result ratio.\n   */\n  function getMaxZoomRatio(pointers) {\n    var pointers2 = assign({}, pointers);\n    var ratios = [];\n\n    forEach(pointers, function (pointer, pointerId) {\n      delete pointers2[pointerId];\n\n      forEach(pointers2, function (pointer2) {\n        var x1 = Math.abs(pointer.startX - pointer2.startX);\n        var y1 = Math.abs(pointer.startY - pointer2.startY);\n        var x2 = Math.abs(pointer.endX - pointer2.endX);\n        var y2 = Math.abs(pointer.endY - pointer2.endY);\n        var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n        var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n        var ratio = (z2 - z1) / z1;\n\n        ratios.push(ratio);\n      });\n    });\n\n    ratios.sort(function (a, b) {\n      return Math.abs(a) < Math.abs(b);\n    });\n\n    return ratios[0];\n  }\n\n  /**\n   * Get a pointer from an event object.\n   * @param {Object} event - The target event object.\n   * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\n   * @returns {Object} The result pointer contains start and/or end point coordinates.\n   */\n  function getPointer(_ref2, endOnly) {\n    var pageX = _ref2.pageX,\n        pageY = _ref2.pageY;\n\n    var end = {\n      endX: pageX,\n      endY: pageY\n    };\n\n    return endOnly ? end : assign({\n      startX: pageX,\n      startY: pageY\n    }, end);\n  }\n\n  /**\n   * Get the center point coordinate of a group of pointers.\n   * @param {Object} pointers - The target pointers.\n   * @returns {Object} The center point coordinate.\n   */\n  function getPointersCenter(pointers) {\n    var pageX = 0;\n    var pageY = 0;\n    var count = 0;\n\n    forEach(pointers, function (_ref3) {\n      var startX = _ref3.startX,\n          startY = _ref3.startY;\n\n      pageX += startX;\n      pageY += startY;\n      count += 1;\n    });\n\n    pageX /= count;\n    pageY /= count;\n\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n\n  /**\n   * Check if the given value is a finite number.\n   */\n  var isFinite = Number.isFinite || WINDOW.isFinite;\n\n  /**\n   * Get the max sizes in a rectangle under the given aspect ratio.\n   * @param {Object} data - The original sizes.\n   * @param {string} [type='contain'] - The adjust type.\n   * @returns {Object} The result sizes.\n   */\n  function getAdjustedSizes(_ref4) // or 'cover'\n  {\n    var aspectRatio = _ref4.aspectRatio,\n        height = _ref4.height,\n        width = _ref4.width;\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';\n\n    var isValidNumber = function isValidNumber(value) {\n      return isFinite(value) && value > 0;\n    };\n\n    if (isValidNumber(width) && isValidNumber(height)) {\n      var adjustedWidth = height * aspectRatio;\n\n      if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {\n        height = width / aspectRatio;\n      } else {\n        width = height * aspectRatio;\n      }\n    } else if (isValidNumber(width)) {\n      height = width / aspectRatio;\n    } else if (isValidNumber(height)) {\n      width = height * aspectRatio;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n  /**\n   * Get the new sizes of a rectangle after rotated.\n   * @param {Object} data - The original sizes.\n   * @returns {Object} The result sizes.\n   */\n  function getRotatedSizes(_ref5) {\n    var width = _ref5.width,\n        height = _ref5.height,\n        degree = _ref5.degree;\n\n    degree = Math.abs(degree) % 180;\n\n    if (degree === 90) {\n      return {\n        width: height,\n        height: width\n      };\n    }\n\n    var arc = degree % 90 * Math.PI / 180;\n    var sinArc = Math.sin(arc);\n    var cosArc = Math.cos(arc);\n    var newWidth = width * cosArc + height * sinArc;\n    var newHeight = width * sinArc + height * cosArc;\n\n    return degree > 90 ? {\n      width: newHeight,\n      height: newWidth\n    } : {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  /**\n   * Get a canvas which drew the given image.\n   * @param {HTMLImageElement} image - The image for drawing.\n   * @param {Object} imageData - The image data.\n   * @param {Object} canvasData - The canvas data.\n   * @param {Object} options - The options.\n   * @returns {HTMLCanvasElement} The result canvas.\n   */\n  function getSourceCanvas(image, _ref6, _ref7, _ref8) {\n    var imageAspectRatio = _ref6.aspectRatio,\n        imageNaturalWidth = _ref6.naturalWidth,\n        imageNaturalHeight = _ref6.naturalHeight,\n        _ref6$rotate = _ref6.rotate,\n        rotate = _ref6$rotate === undefined ? 0 : _ref6$rotate,\n        _ref6$scaleX = _ref6.scaleX,\n        scaleX = _ref6$scaleX === undefined ? 1 : _ref6$scaleX,\n        _ref6$scaleY = _ref6.scaleY,\n        scaleY = _ref6$scaleY === undefined ? 1 : _ref6$scaleY;\n    var aspectRatio = _ref7.aspectRatio,\n        naturalWidth = _ref7.naturalWidth,\n        naturalHeight = _ref7.naturalHeight;\n    var _ref8$fillColor = _ref8.fillColor,\n        fillColor = _ref8$fillColor === undefined ? 'transparent' : _ref8$fillColor,\n        _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,\n        imageSmoothingEnabled = _ref8$imageSmoothingE === undefined ? true : _ref8$imageSmoothingE,\n        _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,\n        imageSmoothingQuality = _ref8$imageSmoothingQ === undefined ? 'low' : _ref8$imageSmoothingQ,\n        _ref8$maxWidth = _ref8.maxWidth,\n        maxWidth = _ref8$maxWidth === undefined ? Infinity : _ref8$maxWidth,\n        _ref8$maxHeight = _ref8.maxHeight,\n        maxHeight = _ref8$maxHeight === undefined ? Infinity : _ref8$maxHeight,\n        _ref8$minWidth = _ref8.minWidth,\n        minWidth = _ref8$minWidth === undefined ? 0 : _ref8$minWidth,\n        _ref8$minHeight = _ref8.minHeight,\n        minHeight = _ref8$minHeight === undefined ? 0 : _ref8$minHeight;\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    var maxSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var minSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\n    var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight));\n\n    // Note: should always use image's natural sizes for drawing as\n    // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\n    var destMaxSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var destMinSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\n    var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\n    var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];\n\n    canvas.width = normalizeDecimalNumber(width);\n    canvas.height = normalizeDecimalNumber(height);\n    context.fillStyle = fillColor;\n    context.fillRect(0, 0, width, height);\n    context.save();\n    context.translate(width / 2, height / 2);\n    context.rotate(rotate * Math.PI / 180);\n    context.scale(scaleX, scaleY);\n    context.imageSmoothingEnabled = imageSmoothingEnabled;\n    context.imageSmoothingQuality = imageSmoothingQuality;\n    context.drawImage.apply(context, [image].concat(toConsumableArray(params.map(function (param) {\n      return Math.floor(normalizeDecimalNumber(param));\n    }))));\n    context.restore();\n    return canvas;\n  }\n\n  var fromCharCode = String.fromCharCode;\n\n  /**\n   * Get string from char code in data view.\n   * @param {DataView} dataView - The data view for read.\n   * @param {number} start - The start index.\n   * @param {number} length - The read length.\n   * @returns {string} The read result.\n   */\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    var i = void 0;\n\n    length += start;\n\n    for (i = start; i < length; i += 1) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n\n  var REGEXP_DATA_URL_HEAD = /^data:.*,/;\n\n  /**\n   * Transform Data URL to array buffer.\n   * @param {string} dataURL - The Data URL to transform.\n   * @returns {ArrayBuffer} The result array buffer.\n   */\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var arrayBuffer = new ArrayBuffer(binary.length);\n    var uint8 = new Uint8Array(arrayBuffer);\n\n    forEach(uint8, function (value, i) {\n      uint8[i] = binary.charCodeAt(i);\n    });\n\n    return arrayBuffer;\n  }\n\n  /**\n   * Transform array buffer to Data URL.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n   * @param {string} mimeType - The mime type of the Data URL.\n   * @returns {string} The result Data URL.\n   */\n  function arrayBufferToDataURL(arrayBuffer, mimeType) {\n    var uint8 = new Uint8Array(arrayBuffer);\n    var data = '';\n\n    // TypedArray.prototype.forEach is not supported in some browsers.\n    forEach(uint8, function (value) {\n      data += fromCharCode(value);\n    });\n\n    return 'data:' + mimeType + ';base64,' + btoa(data);\n  }\n\n  /**\n   * Get orientation value from given array buffer.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n   * @returns {number} The read orientation value.\n   */\n  function getOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var orientation = void 0;\n    var littleEndian = void 0;\n    var app1Start = void 0;\n    var ifdStart = void 0;\n\n    // Only handle JPEG image (start by 0xFFD8)\n    if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n      var length = dataView.byteLength;\n      var offset = 2;\n\n      while (offset < length) {\n        if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n          app1Start = offset;\n          break;\n        }\n\n        offset += 1;\n      }\n    }\n\n    if (app1Start) {\n      var exifIDCode = app1Start + 4;\n      var tiffOffset = app1Start + 10;\n\n      if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n        var endianness = dataView.getUint16(tiffOffset);\n\n        littleEndian = endianness === 0x4949;\n\n        if (littleEndian || endianness === 0x4D4D /* bigEndian */) {\n            if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n              var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n              if (firstIFDOffset >= 0x00000008) {\n                ifdStart = tiffOffset + firstIFDOffset;\n              }\n            }\n          }\n      }\n    }\n\n    if (ifdStart) {\n      var _length = dataView.getUint16(ifdStart, littleEndian);\n      var _offset = void 0;\n      var i = void 0;\n\n      for (i = 0; i < _length; i += 1) {\n        _offset = ifdStart + i * 12 + 2;\n\n        if (dataView.getUint16(_offset, littleEndian) === 0x0112 /* Orientation */) {\n            // 8 is the offset of the current tag's value\n            _offset += 8;\n\n            // Get the original orientation value\n            orientation = dataView.getUint16(_offset, littleEndian);\n\n            // Override the orientation with its default value\n            dataView.setUint16(_offset, 1, littleEndian);\n            break;\n          }\n      }\n    }\n\n    return orientation;\n  }\n\n  /**\n   * Parse Exif Orientation value.\n   * @param {number} orientation - The orientation to parse.\n   * @returns {Object} The parsed result.\n   */\n  function parseOrientation(orientation) {\n    var rotate = 0;\n    var scaleX = 1;\n    var scaleY = 1;\n\n    switch (orientation) {\n      // Flip horizontal\n      case 2:\n        scaleX = -1;\n        break;\n\n      // Rotate left 180°\n      case 3:\n        rotate = -180;\n        break;\n\n      // Flip vertical\n      case 4:\n        scaleY = -1;\n        break;\n\n      // Flip vertical and rotate right 90°\n      case 5:\n        rotate = 90;\n        scaleY = -1;\n        break;\n\n      // Rotate right 90°\n      case 6:\n        rotate = 90;\n        break;\n\n      // Flip horizontal and rotate right 90°\n      case 7:\n        rotate = 90;\n        scaleX = -1;\n        break;\n\n      // Rotate left 90°\n      case 8:\n        rotate = -90;\n        break;\n\n      default:\n    }\n\n    return {\n      rotate: rotate,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var render = {\n    render: function render() {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n      this.renderCanvas();\n\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    },\n    initContainer: function initContainer() {\n      var element = this.element,\n          options = this.options,\n          container = this.container,\n          cropper = this.cropper;\n\n\n      addClass(cropper, CLASS_HIDDEN);\n      removeClass(element, CLASS_HIDDEN);\n\n      var containerData = {\n        width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n        height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n      };\n\n      this.containerData = containerData;\n\n      setStyle(cropper, {\n        width: containerData.width,\n        height: containerData.height\n      });\n\n      addClass(element, CLASS_HIDDEN);\n      removeClass(cropper, CLASS_HIDDEN);\n    },\n\n\n    // Canvas (image wrapper)\n    initCanvas: function initCanvas() {\n      var containerData = this.containerData,\n          imageData = this.imageData;\n      var viewMode = this.options.viewMode;\n\n      var rotated = Math.abs(imageData.rotate) % 180 === 90;\n      var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n      var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerData.width;\n      var canvasHeight = containerData.height;\n\n      if (containerData.height * aspectRatio > containerData.width) {\n        if (viewMode === 3) {\n          canvasWidth = containerData.height * aspectRatio;\n        } else {\n          canvasHeight = containerData.width / aspectRatio;\n        }\n      } else if (viewMode === 3) {\n        canvasHeight = containerData.width / aspectRatio;\n      } else {\n        canvasWidth = containerData.height * aspectRatio;\n      }\n\n      var canvasData = {\n        aspectRatio: aspectRatio,\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n\n      canvasData.left = (containerData.width - canvasWidth) / 2;\n      canvasData.top = (containerData.height - canvasHeight) / 2;\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n\n      this.canvasData = canvasData;\n      this.limited = viewMode === 1 || viewMode === 2;\n      this.limitCanvas(true, true);\n      this.initialImageData = assign({}, imageData);\n      this.initialCanvasData = assign({}, canvasData);\n    },\n    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var viewMode = options.viewMode;\n      var aspectRatio = canvasData.aspectRatio;\n\n      var cropped = this.cropped && cropBoxData;\n\n      if (sizeLimited) {\n        var minCanvasWidth = Number(options.minCanvasWidth) || 0;\n        var minCanvasHeight = Number(options.minCanvasHeight) || 0;\n\n        if (viewMode > 1) {\n          minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n          minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n\n          if (viewMode === 3) {\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        } else if (viewMode > 0) {\n          if (minCanvasWidth) {\n            minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n          } else if (minCanvasHeight) {\n            minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n          } else if (cropped) {\n            minCanvasWidth = cropBoxData.width;\n            minCanvasHeight = cropBoxData.height;\n\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        }\n\n        var _getAdjustedSizes = getAdjustedSizes({\n          aspectRatio: aspectRatio,\n          width: minCanvasWidth,\n          height: minCanvasHeight\n        });\n\n        minCanvasWidth = _getAdjustedSizes.width;\n        minCanvasHeight = _getAdjustedSizes.height;\n\n\n        canvasData.minWidth = minCanvasWidth;\n        canvasData.minHeight = minCanvasHeight;\n        canvasData.maxWidth = Infinity;\n        canvasData.maxHeight = Infinity;\n      }\n\n      if (positionLimited) {\n        if (viewMode) {\n          var newCanvasLeft = containerData.width - canvasData.width;\n          var newCanvasTop = containerData.height - canvasData.height;\n\n          canvasData.minLeft = Math.min(0, newCanvasLeft);\n          canvasData.minTop = Math.min(0, newCanvasTop);\n          canvasData.maxLeft = Math.max(0, newCanvasLeft);\n          canvasData.maxTop = Math.max(0, newCanvasTop);\n\n          if (cropped && this.limited) {\n            canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n            canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n            canvasData.maxLeft = cropBoxData.left;\n            canvasData.maxTop = cropBoxData.top;\n\n            if (viewMode === 2) {\n              if (canvasData.width >= containerData.width) {\n                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n              }\n\n              if (canvasData.height >= containerData.height) {\n                canvasData.minTop = Math.min(0, newCanvasTop);\n                canvasData.maxTop = Math.max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvasData.minLeft = -canvasData.width;\n          canvasData.minTop = -canvasData.height;\n          canvasData.maxLeft = containerData.width;\n          canvasData.maxTop = containerData.height;\n        }\n      }\n    },\n    renderCanvas: function renderCanvas(changed, transformed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n\n\n      if (transformed) {\n        var _getRotatedSizes = getRotatedSizes({\n          width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n          height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n          degree: imageData.rotate || 0\n        }),\n            naturalWidth = _getRotatedSizes.width,\n            naturalHeight = _getRotatedSizes.height;\n\n        var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n        var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n\n        canvasData.left -= (width - canvasData.width) / 2;\n        canvasData.top -= (height - canvasData.height) / 2;\n        canvasData.width = width;\n        canvasData.height = height;\n        canvasData.aspectRatio = naturalWidth / naturalHeight;\n        canvasData.naturalWidth = naturalWidth;\n        canvasData.naturalHeight = naturalHeight;\n        this.limitCanvas(true, false);\n      }\n\n      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n        canvasData.left = canvasData.oldLeft;\n      }\n\n      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n        canvasData.top = canvasData.oldTop;\n      }\n\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n\n      this.limitCanvas(false, true);\n\n      canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n      canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n\n      setStyle(this.canvas, assign({\n        width: canvasData.width,\n        height: canvasData.height\n      }, getTransforms({\n        translateX: canvasData.left,\n        translateY: canvasData.top\n      })));\n\n      this.renderImage(changed);\n\n      if (this.cropped && this.limited) {\n        this.limitCropBox(true, true);\n      }\n    },\n    renderImage: function renderImage(changed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n\n      var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n      var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n\n      assign(imageData, {\n        width: width,\n        height: height,\n        left: (canvasData.width - width) / 2,\n        top: (canvasData.height - height) / 2\n      });\n      setStyle(this.image, assign({\n        width: imageData.width,\n        height: imageData.height\n      }, getTransforms(assign({\n        translateX: imageData.left,\n        translateY: imageData.top\n      }, imageData))));\n\n      if (changed) {\n        this.output();\n      }\n    },\n    initCropBox: function initCropBox() {\n      var options = this.options,\n          canvasData = this.canvasData;\n\n      var aspectRatio = options.aspectRatio || options.initialAspectRatio;\n      var autoCropArea = Number(options.autoCropArea) || 0.8;\n      var cropBoxData = {\n        width: canvasData.width,\n        height: canvasData.height\n      };\n\n      if (aspectRatio) {\n        if (canvasData.height * aspectRatio > canvasData.width) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n\n      this.cropBoxData = cropBoxData;\n      this.limitCropBox(true, true);\n\n      // Initialize auto crop area\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n\n      // The width/height of auto crop area must large than \"minWidth/Height\"\n      cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n      cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n      cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n      cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n\n      this.initialCropBoxData = assign({}, cropBoxData);\n    },\n    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData,\n          limited = this.limited;\n      var aspectRatio = options.aspectRatio;\n\n\n      if (sizeLimited) {\n        var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n        var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n        var maxCropBoxWidth = Math.min(containerData.width, limited ? canvasData.width : containerData.width);\n        var maxCropBoxHeight = Math.min(containerData.height, limited ? canvasData.height : containerData.height);\n\n        // The min/maxCropBoxWidth/Height must be less than container's width/height\n        minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n        minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        }\n\n        // The minWidth/Height must be less than maxWidth/Height\n        cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n        cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n        cropBoxData.maxWidth = maxCropBoxWidth;\n        cropBoxData.maxHeight = maxCropBoxHeight;\n      }\n\n      if (positionLimited) {\n        if (limited) {\n          cropBoxData.minLeft = Math.max(0, canvasData.left);\n          cropBoxData.minTop = Math.max(0, canvasData.top);\n          cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n          cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n        } else {\n          cropBoxData.minLeft = 0;\n          cropBoxData.minTop = 0;\n          cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n          cropBoxData.maxTop = containerData.height - cropBoxData.height;\n        }\n      }\n    },\n    renderCropBox: function renderCropBox() {\n      var options = this.options,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData;\n\n\n      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n        cropBoxData.left = cropBoxData.oldLeft;\n      }\n\n      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n        cropBoxData.top = cropBoxData.oldTop;\n      }\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n\n      this.limitCropBox(false, true);\n\n      cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n      cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n\n      if (options.movable && options.cropBoxMovable) {\n        // Turn to move the canvas when the crop box is equal to the container\n        setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      setStyle(this.cropBox, assign({\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      }, getTransforms({\n        translateX: cropBoxData.left,\n        translateY: cropBoxData.top\n      })));\n\n      if (this.cropped && this.limited) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.disabled) {\n        this.output();\n      }\n    },\n    output: function output() {\n      this.preview();\n      dispatchEvent(this.element, EVENT_CROP, this.getData());\n    }\n  };\n\n  var preview = {\n    initPreview: function initPreview() {\n      var crossOrigin = this.crossOrigin;\n      var preview = this.options.preview;\n\n      var url = crossOrigin ? this.crossOriginUrl : this.url;\n      var image = document.createElement('img');\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.src = url;\n      this.viewBox.appendChild(image);\n      this.viewBoxImage = image;\n\n      if (!preview) {\n        return;\n      }\n\n      var previews = preview;\n\n      if (typeof preview === 'string') {\n        previews = this.element.ownerDocument.querySelectorAll(preview);\n      } else if (preview.querySelector) {\n        previews = [preview];\n      }\n\n      this.previews = previews;\n\n      forEach(previews, function (el) {\n        var img = document.createElement('img');\n\n        // Save the original size for recover\n        setData(el, DATA_PREVIEW, {\n          width: el.offsetWidth,\n          height: el.offsetHeight,\n          html: el.innerHTML\n        });\n\n        if (crossOrigin) {\n          img.crossOrigin = crossOrigin;\n        }\n\n        img.src = url;\n\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * Add `height:auto` to override `height` attribute on IE8\n         * (Occur only when margin-top <= -height)\n         */\n        img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n\n        el.innerHTML = '';\n        el.appendChild(img);\n      });\n    },\n    resetPreview: function resetPreview() {\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n\n        setStyle(element, {\n          width: data.width,\n          height: data.height\n        });\n\n        element.innerHTML = data.html;\n        removeData(element, DATA_PREVIEW);\n      });\n    },\n    preview: function preview() {\n      var imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var cropBoxWidth = cropBoxData.width,\n          cropBoxHeight = cropBoxData.height;\n      var width = imageData.width,\n          height = imageData.height;\n\n      var left = cropBoxData.left - canvasData.left - imageData.left;\n      var top = cropBoxData.top - canvasData.top - imageData.top;\n\n      if (!this.cropped || this.disabled) {\n        return;\n      }\n\n      setStyle(this.viewBoxImage, assign({\n        width: width,\n        height: height\n      }, getTransforms(assign({\n        translateX: -left,\n        translateY: -top\n      }, imageData))));\n\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        setStyle(element, {\n          width: newWidth,\n          height: newHeight\n        });\n\n        setStyle(element.getElementsByTagName('img')[0], assign({\n          width: width * ratio,\n          height: height * ratio\n        }, getTransforms(assign({\n          translateX: -left * ratio,\n          translateY: -top * ratio\n        }, imageData))));\n      });\n    }\n  };\n\n  var events = {\n    bind: function bind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n\n      if (isFunction(options.cropstart)) {\n        addListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        addListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        addListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        addListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        addListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this));\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\n      }\n\n      addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\n      addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\n\n      if (options.responsive) {\n        addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));\n      }\n    },\n    unbind: function unbind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n\n      if (isFunction(options.cropstart)) {\n        removeListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        removeListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        removeListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        removeListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        removeListener(cropper, EVENT_WHEEL, this.onWheel);\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);\n      }\n\n      removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);\n      removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);\n\n      if (options.responsive) {\n        removeListener(window, EVENT_RESIZE, this.onResize);\n      }\n    }\n  };\n\n  var handlers = {\n    resize: function resize() {\n      var options = this.options,\n          container = this.container,\n          containerData = this.containerData;\n\n      var minContainerWidth = Number(options.minContainerWidth) || 200;\n      var minContainerHeight = Number(options.minContainerHeight) || 100;\n\n      if (this.disabled || containerData.width <= minContainerWidth || containerData.height <= minContainerHeight) {\n        return;\n      }\n\n      var ratio = container.offsetWidth / containerData.width;\n\n      // Resize when width changed or height changed\n      if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n        var canvasData = void 0;\n        var cropBoxData = void 0;\n\n        if (options.restore) {\n          canvasData = this.getCanvasData();\n          cropBoxData = this.getCropBoxData();\n        }\n\n        this.render();\n\n        if (options.restore) {\n          this.setCanvasData(forEach(canvasData, function (n, i) {\n            canvasData[i] = n * ratio;\n          }));\n          this.setCropBoxData(forEach(cropBoxData, function (n, i) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      }\n    },\n    dblclick: function dblclick() {\n      if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {\n        return;\n      }\n\n      this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);\n    },\n    wheel: function wheel(e) {\n      var _this = this;\n\n      var ratio = Number(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.disabled) {\n        return;\n      }\n\n      e.preventDefault();\n\n      // Limit wheel speed to prevent zoom too fast (#21)\n      if (this.wheeling) {\n        return;\n      }\n\n      this.wheeling = true;\n\n      setTimeout(function () {\n        _this.wheeling = false;\n      }, 50);\n\n      if (e.deltaY) {\n        delta = e.deltaY > 0 ? 1 : -1;\n      } else if (e.wheelDelta) {\n        delta = -e.wheelDelta / 120;\n      } else if (e.detail) {\n        delta = e.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, e);\n    },\n    cropStart: function cropStart(e) {\n      if (this.disabled) {\n        return;\n      }\n\n      var options = this.options,\n          pointers = this.pointers;\n\n      var action = void 0;\n\n      if (e.changedTouches) {\n        // Handle touch event\n        forEach(e.changedTouches, function (touch) {\n          pointers[touch.identifier] = getPointer(touch);\n        });\n      } else {\n        // Handle mouse event and pointer event\n        pointers[e.pointerId || 0] = getPointer(e);\n      }\n\n      if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n        action = ACTION_ZOOM;\n      } else {\n        action = getData(e.target, DATA_ACTION);\n      }\n\n      if (!REGEXP_ACTIONS.test(action)) {\n        return;\n      }\n\n      if (dispatchEvent(this.element, EVENT_CROP_START, {\n        originalEvent: e,\n        action: action\n      }) === false) {\n        return;\n      }\n\n      // This line is required for preventing page zooming in iOS browsers\n      e.preventDefault();\n\n      this.action = action;\n      this.cropping = false;\n\n      if (action === ACTION_CROP) {\n        this.cropping = true;\n        addClass(this.dragBox, CLASS_MODAL);\n      }\n    },\n    cropMove: function cropMove(e) {\n      var action = this.action;\n\n\n      if (this.disabled || !action) {\n        return;\n      }\n\n      var pointers = this.pointers;\n\n\n      e.preventDefault();\n\n      if (dispatchEvent(this.element, EVENT_CROP_MOVE, {\n        originalEvent: e,\n        action: action\n      }) === false) {\n        return;\n      }\n\n      if (e.changedTouches) {\n        forEach(e.changedTouches, function (touch) {\n          assign(pointers[touch.identifier], getPointer(touch, true));\n        });\n      } else {\n        assign(pointers[e.pointerId || 0], getPointer(e, true));\n      }\n\n      this.change(e);\n    },\n    cropEnd: function cropEnd(e) {\n      if (this.disabled) {\n        return;\n      }\n\n      var action = this.action,\n          pointers = this.pointers;\n\n\n      if (e.changedTouches) {\n        forEach(e.changedTouches, function (touch) {\n          delete pointers[touch.identifier];\n        });\n      } else {\n        delete pointers[e.pointerId || 0];\n      }\n\n      if (!action) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (!Object.keys(pointers).length) {\n        this.action = '';\n      }\n\n      if (this.cropping) {\n        this.cropping = false;\n        toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);\n      }\n\n      dispatchEvent(this.element, EVENT_CROP_END, {\n        originalEvent: e,\n        action: action\n      });\n    }\n  };\n\n  var change = {\n    change: function change(e) {\n      var options = this.options,\n          canvasData = this.canvasData,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData,\n          pointers = this.pointers;\n      var action = this.action;\n      var aspectRatio = options.aspectRatio;\n      var left = cropBoxData.left,\n          top = cropBoxData.top,\n          width = cropBoxData.width,\n          height = cropBoxData.height;\n\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = containerData.width;\n      var maxHeight = containerData.height;\n      var renderable = true;\n      var offset = void 0;\n\n      // Locking aspect ratio in \"free mode\" by holding shift key\n      if (!aspectRatio && e.shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (this.limited) {\n        minLeft = cropBoxData.minLeft;\n        minTop = cropBoxData.minTop;\n\n        maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n        maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n      }\n\n      var pointer = pointers[Object.keys(pointers)[0]];\n      var range = {\n        x: pointer.endX - pointer.startX,\n        y: pointer.endY - pointer.startY\n      };\n      var check = function check(side) {\n        switch (side) {\n          case ACTION_EAST:\n            if (right + range.x > maxWidth) {\n              range.x = maxWidth - right;\n            }\n\n            break;\n\n          case ACTION_WEST:\n            if (left + range.x < minLeft) {\n              range.x = minLeft - left;\n            }\n\n            break;\n\n          case ACTION_NORTH:\n            if (top + range.y < minTop) {\n              range.y = minTop - top;\n            }\n\n            break;\n\n          case ACTION_SOUTH:\n            if (bottom + range.y > maxHeight) {\n              range.y = maxHeight - bottom;\n            }\n\n            break;\n\n          default:\n        }\n      };\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n\n        // Resize crop box\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_EAST);\n          width += range.x;\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_NORTH);\n          height -= range.y;\n          top += range.y;\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_WEST);\n          width -= range.x;\n          left += range.x;\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_SOUTH);\n          height += range.y;\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += cropBoxData.width - width;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_WEST);\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_EAST);\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        // Move canvas\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n\n        // Zoom canvas\n        case ACTION_ZOOM:\n          this.zoom(getMaxZoomRatio(pointers), e);\n          renderable = false;\n          break;\n\n        // Create crop box\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = getOffset(this.cropper);\n          left = pointer.startX - offset.left;\n          top = pointer.startY - offset.top;\n          width = cropBoxData.minWidth;\n          height = cropBoxData.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          }\n\n          // Show the crop box if is hidden\n          if (!this.cropped) {\n            removeClass(this.cropBox, CLASS_HIDDEN);\n            this.cropped = true;\n\n            if (this.limited) {\n              this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n\n        default:\n      }\n\n      if (renderable) {\n        cropBoxData.width = width;\n        cropBoxData.height = height;\n        cropBoxData.left = left;\n        cropBoxData.top = top;\n        this.action = action;\n        this.renderCropBox();\n      }\n\n      // Override\n      forEach(pointers, function (p) {\n        p.startX = p.endX;\n        p.startY = p.endY;\n      });\n    }\n  };\n\n  var methods = {\n    // Show the crop box manually\n    crop: function crop() {\n      if (this.ready && !this.cropped && !this.disabled) {\n        this.cropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          addClass(this.dragBox, CLASS_MODAL);\n        }\n\n        removeClass(this.cropBox, CLASS_HIDDEN);\n        this.setCropBoxData(this.initialCropBoxData);\n      }\n\n      return this;\n    },\n\n\n    // Reset the image and crop box to their initial states\n    reset: function reset() {\n      if (this.ready && !this.disabled) {\n        this.imageData = assign({}, this.initialImageData);\n        this.canvasData = assign({}, this.initialCanvasData);\n        this.cropBoxData = assign({}, this.initialCropBoxData);\n        this.renderCanvas();\n\n        if (this.cropped) {\n          this.renderCropBox();\n        }\n      }\n\n      return this;\n    },\n\n\n    // Clear the crop box\n    clear: function clear() {\n      if (this.cropped && !this.disabled) {\n        assign(this.cropBoxData, {\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0\n        });\n\n        this.cropped = false;\n        this.renderCropBox();\n        this.limitCanvas(true, true);\n\n        // Render canvas after crop box rendered\n        this.renderCanvas();\n        removeClass(this.dragBox, CLASS_MODAL);\n        addClass(this.cropBox, CLASS_HIDDEN);\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     * @param {string} url - The new URL.\n     * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.\n     * @returns {Cropper} this\n     */\n    replace: function replace(url) {\n      var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!this.disabled && url) {\n        if (this.isImg) {\n          this.element.src = url;\n        }\n\n        if (hasSameSize) {\n          this.url = url;\n          this.image.src = url;\n\n          if (this.ready) {\n            this.viewBoxImage.src = url;\n\n            forEach(this.previews, function (element) {\n              element.getElementsByTagName('img')[0].src = url;\n            });\n          }\n        } else {\n          if (this.isImg) {\n            this.replaced = true;\n          }\n\n          this.options.data = null;\n          this.uncreate();\n          this.load(url);\n        }\n      }\n\n      return this;\n    },\n\n\n    // Enable (unfreeze) the cropper\n    enable: function enable() {\n      if (this.ready && this.disabled) {\n        this.disabled = false;\n        removeClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n\n\n    // Disable (freeze) the cropper\n    disable: function disable() {\n      if (this.ready && !this.disabled) {\n        this.disabled = true;\n        addClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Destroy the cropper and remove the instance from the image\n     * @returns {Cropper} this\n     */\n    destroy: function destroy() {\n      var element = this.element;\n\n\n      if (!getData(element, NAMESPACE)) {\n        return this;\n      }\n\n      if (this.isImg && this.replaced) {\n        element.src = this.originalUrl;\n      }\n\n      this.uncreate();\n      removeData(element, NAMESPACE);\n\n      return this;\n    },\n\n\n    /**\n     * Move the canvas with relative offsets\n     * @param {number} offsetX - The relative offset distance on the x-axis.\n     * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.\n     * @returns {Cropper} this\n     */\n    move: function move(offsetX) {\n      var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;\n      var _canvasData = this.canvasData,\n          left = _canvasData.left,\n          top = _canvasData.top;\n\n\n      return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n    },\n\n\n    /**\n     * Move the canvas to an absolute point\n     * @param {number} x - The x-axis coordinate.\n     * @param {number} [y=x] - The y-axis coordinate.\n     * @returns {Cropper} this\n     */\n    moveTo: function moveTo(x) {\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n      var canvasData = this.canvasData;\n\n      var changed = false;\n\n      x = Number(x);\n      y = Number(y);\n\n      if (this.ready && !this.disabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvasData.left = x;\n          changed = true;\n        }\n\n        if (isNumber(y)) {\n          canvasData.top = y;\n          changed = true;\n        }\n\n        if (changed) {\n          this.renderCanvas(true);\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Zoom the canvas with a relative ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoom: function zoom(ratio, _originalEvent) {\n      var canvasData = this.canvasData;\n\n\n      ratio = Number(ratio);\n\n      if (ratio < 0) {\n        ratio = 1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n    },\n\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Object} pivot - The zoom pivot point coordinate.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoomTo: function zoomTo(ratio, pivot, _originalEvent) {\n      var options = this.options,\n          canvasData = this.canvasData;\n      var width = canvasData.width,\n          height = canvasData.height,\n          naturalWidth = canvasData.naturalWidth,\n          naturalHeight = canvasData.naturalHeight;\n\n\n      ratio = Number(ratio);\n\n      if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n        var newWidth = naturalWidth * ratio;\n        var newHeight = naturalHeight * ratio;\n\n        if (dispatchEvent(this.element, EVENT_ZOOM, {\n          ratio: ratio,\n          oldRatio: width / naturalWidth,\n          originalEvent: _originalEvent\n        }) === false) {\n          return this;\n        }\n\n        if (_originalEvent) {\n          var pointers = this.pointers;\n\n          var offset = getOffset(this.cropper);\n          var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\n            pageX: _originalEvent.pageX,\n            pageY: _originalEvent.pageY\n          };\n\n          // Zoom from the triggering point of the event\n          canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n        } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {\n          canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n        } else {\n          // Zoom from the center of the canvas\n          canvasData.left -= (newWidth - width) / 2;\n          canvasData.top -= (newHeight - height) / 2;\n        }\n\n        canvasData.width = newWidth;\n        canvasData.height = newHeight;\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Rotate the canvas with a relative degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotate: function rotate(degree) {\n      return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n    },\n\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotateTo: function rotateTo(degree) {\n      degree = Number(degree);\n\n      if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n        this.imageData.rotate = degree % 360;\n        this.renderCanvas(true, true);\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Scale the image on the x-axis.\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @returns {Cropper} this\n     */\n    scaleX: function scaleX(_scaleX) {\n      var scaleY = this.imageData.scaleY;\n\n\n      return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n\n    /**\n     * Scale the image on the y-axis.\n     * @param {number} scaleY - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scaleY: function scaleY(_scaleY) {\n      var scaleX = this.imageData.scaleX;\n\n\n      return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n    },\n\n\n    /**\n     * Scale the image\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scale: function scale(scaleX) {\n      var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n      var imageData = this.imageData;\n\n      var transformed = false;\n\n      scaleX = Number(scaleX);\n      scaleY = Number(scaleY);\n\n      if (this.ready && !this.disabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          imageData.scaleX = scaleX;\n          transformed = true;\n        }\n\n        if (isNumber(scaleY)) {\n          imageData.scaleY = scaleY;\n          transformed = true;\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     * @param {boolean} [rounded=false] - Indicate if round the data values or not.\n     * @returns {Object} The result cropped data.\n     */\n    getData: function getData$$1() {\n      var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n\n      var data = void 0;\n\n      if (this.ready && this.cropped) {\n        data = {\n          x: cropBoxData.left - canvasData.left,\n          y: cropBoxData.top - canvasData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n\n        var ratio = imageData.width / imageData.naturalWidth;\n\n        forEach(data, function (n, i) {\n          data[i] = n / ratio;\n        });\n\n        if (rounded) {\n          // In case rounding off leads to extra 1px in right or bottom border\n          // we should round the top-left corner and the dimension (#343).\n          var bottom = Math.round(data.y + data.height);\n          var right = Math.round(data.x + data.width);\n\n          data.x = Math.round(data.x);\n          data.y = Math.round(data.y);\n          data.width = right - data.x;\n          data.height = bottom - data.y;\n        }\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = imageData.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = imageData.scaleX || 1;\n        data.scaleY = imageData.scaleY || 1;\n      }\n\n      return data;\n    },\n\n\n    /**\n     * Set the cropped area position and size with new data\n     * @param {Object} data - The new data.\n     * @returns {Cropper} this\n     */\n    setData: function setData$$1(data) {\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData;\n\n      var cropBoxData = {};\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        var transformed = false;\n\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n            imageData.rotate = data.rotate;\n            transformed = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n            imageData.scaleX = data.scaleX;\n            transformed = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n            imageData.scaleY = data.scaleY;\n            transformed = true;\n          }\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n\n        var ratio = imageData.width / imageData.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvasData.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvasData.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Get the container size data.\n     * @returns {Object} The result container data.\n     */\n    getContainerData: function getContainerData() {\n      return this.ready ? assign({}, this.containerData) : {};\n    },\n\n\n    /**\n     * Get the image position and size data.\n     * @returns {Object} The result image data.\n     */\n    getImageData: function getImageData() {\n      return this.sized ? assign({}, this.imageData) : {};\n    },\n\n\n    /**\n     * Get the canvas position and size data.\n     * @returns {Object} The result canvas data.\n     */\n    getCanvasData: function getCanvasData() {\n      var canvasData = this.canvasData;\n\n      var data = {};\n\n      if (this.ready) {\n        forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\n          data[n] = canvasData[n];\n        });\n      }\n\n      return data;\n    },\n\n\n    /**\n     * Set the canvas position and size with new data.\n     * @param {Object} data - The new canvas data.\n     * @returns {Cropper} this\n     */\n    setCanvasData: function setCanvasData(data) {\n      var canvasData = this.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvasData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvasData.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvasData.width = data.width;\n          canvasData.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvasData.height = data.height;\n          canvasData.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Get the crop box position and size data.\n     * @returns {Object} The result crop box data.\n     */\n    getCropBoxData: function getCropBoxData() {\n      var cropBoxData = this.cropBoxData;\n\n      var data = void 0;\n\n      if (this.ready && this.cropped) {\n        data = {\n          left: cropBoxData.left,\n          top: cropBoxData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n      }\n\n      return data || {};\n    },\n\n\n    /**\n     * Set the crop box position and size with new data.\n     * @param {Object} data - The new crop box data.\n     * @returns {Cropper} this\n     */\n    setCropBoxData: function setCropBoxData(data) {\n      var cropBoxData = this.cropBoxData;\n      var aspectRatio = this.options.aspectRatio;\n\n      var widthChanged = void 0;\n      var heightChanged = void 0;\n\n      if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          cropBoxData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBoxData.top = data.top;\n        }\n\n        if (isNumber(data.width) && data.width !== cropBoxData.width) {\n          widthChanged = true;\n          cropBoxData.width = data.width;\n        }\n\n        if (isNumber(data.height) && data.height !== cropBoxData.height) {\n          heightChanged = true;\n          cropBoxData.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (widthChanged) {\n            cropBoxData.height = cropBoxData.width / aspectRatio;\n          } else if (heightChanged) {\n            cropBoxData.width = cropBoxData.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Get a canvas drawn the cropped image.\n     * @param {Object} [options={}] - The config options.\n     * @returns {HTMLCanvasElement} - The result canvas.\n     */\n    getCroppedCanvas: function getCroppedCanvas() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this.ready || !window.HTMLCanvasElement) {\n        return null;\n      }\n\n      var canvasData = this.canvasData;\n\n      var source = getSourceCanvas(this.image, this.imageData, canvasData, options);\n\n      // Returns the source canvas if it is not cropped.\n      if (!this.cropped) {\n        return source;\n      }\n\n      var _getData = this.getData(),\n          initialX = _getData.x,\n          initialY = _getData.y,\n          initialWidth = _getData.width,\n          initialHeight = _getData.height;\n\n      var ratio = source.width / Math.floor(canvasData.naturalWidth);\n\n      if (ratio !== 1) {\n        initialX *= ratio;\n        initialY *= ratio;\n        initialWidth *= ratio;\n        initialHeight *= ratio;\n      }\n\n      var aspectRatio = initialWidth / initialHeight;\n      var maxSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.maxWidth || Infinity,\n        height: options.maxHeight || Infinity\n      });\n      var minSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.minWidth || 0,\n        height: options.minHeight || 0\n      }, 'cover');\n\n      var _getAdjustedSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.width || (ratio !== 1 ? source.width : initialWidth),\n        height: options.height || (ratio !== 1 ? source.height : initialHeight)\n      }),\n          width = _getAdjustedSizes.width,\n          height = _getAdjustedSizes.height;\n\n      width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n      height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n\n      canvas.width = normalizeDecimalNumber(width);\n      canvas.height = normalizeDecimalNumber(height);\n\n      context.fillStyle = options.fillColor || 'transparent';\n      context.fillRect(0, 0, width, height);\n\n      var _options$imageSmoothi = options.imageSmoothingEnabled,\n          imageSmoothingEnabled = _options$imageSmoothi === undefined ? true : _options$imageSmoothi,\n          imageSmoothingQuality = options.imageSmoothingQuality;\n\n\n      context.imageSmoothingEnabled = imageSmoothingEnabled;\n\n      if (imageSmoothingQuality) {\n        context.imageSmoothingQuality = imageSmoothingQuality;\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n      var sourceWidth = source.width;\n      var sourceHeight = source.height;\n\n      // Source canvas parameters\n      var srcX = initialX;\n      var srcY = initialY;\n      var srcWidth = void 0;\n      var srcHeight = void 0;\n\n      // Destination canvas parameters\n      var dstX = void 0;\n      var dstY = void 0;\n      var dstWidth = void 0;\n      var dstHeight = void 0;\n\n      if (srcX <= -initialWidth || srcX > sourceWidth) {\n        srcX = 0;\n        srcWidth = 0;\n        dstX = 0;\n        dstWidth = 0;\n      } else if (srcX <= 0) {\n        dstX = -srcX;\n        srcX = 0;\n        srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n        dstWidth = srcWidth;\n      } else if (srcX <= sourceWidth) {\n        dstX = 0;\n        srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n        dstWidth = srcWidth;\n      }\n\n      if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n        srcY = 0;\n        srcHeight = 0;\n        dstY = 0;\n        dstHeight = 0;\n      } else if (srcY <= 0) {\n        dstY = -srcY;\n        srcY = 0;\n        srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n        dstHeight = srcHeight;\n      } else if (srcY <= sourceHeight) {\n        dstY = 0;\n        srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n        dstHeight = srcHeight;\n      }\n\n      var params = [srcX, srcY, srcWidth, srcHeight];\n\n      // Avoid \"IndexSizeError\"\n      if (dstWidth > 0 && dstHeight > 0) {\n        var scale = width / initialWidth;\n\n        params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n      }\n\n      // All the numerical parameters should be integer for `drawImage`\n      // https://github.com/fengyuanchen/cropper/issues/476\n      context.drawImage.apply(context, [source].concat(toConsumableArray(params.map(function (param) {\n        return Math.floor(normalizeDecimalNumber(param));\n      }))));\n\n      return canvas;\n    },\n\n\n    /**\n     * Change the aspect ratio of the crop box.\n     * @param {number} aspectRatio - The new aspect ratio.\n     * @returns {Cropper} this\n     */\n    setAspectRatio: function setAspectRatio(aspectRatio) {\n      var options = this.options;\n\n\n      if (!this.disabled && !isUndefined(aspectRatio)) {\n        // 0 -> NaN\n        options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n\n        if (this.ready) {\n          this.initCropBox();\n\n          if (this.cropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Change the drag mode.\n     * @param {string} mode - The new drag mode.\n     * @returns {Cropper} this\n     */\n    setDragMode: function setDragMode(mode) {\n      var options = this.options,\n          dragBox = this.dragBox,\n          face = this.face;\n\n\n      if (this.ready && !this.disabled) {\n        var croppable = mode === DRAG_MODE_CROP;\n        var movable = options.movable && mode === DRAG_MODE_MOVE;\n\n        mode = croppable || movable ? mode : DRAG_MODE_NONE;\n\n        options.dragMode = mode;\n        setData(dragBox, DATA_ACTION, mode);\n        toggleClass(dragBox, CLASS_CROP, croppable);\n        toggleClass(dragBox, CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n          // Sync drag mode to crop box when it is not movable\n          setData(face, DATA_ACTION, mode);\n          toggleClass(face, CLASS_CROP, croppable);\n          toggleClass(face, CLASS_MOVE, movable);\n        }\n      }\n\n      return this;\n    }\n  };\n\n  var AnotherCropper = WINDOW.Cropper;\n\n  var Cropper = function () {\n    /**\n     * Create a new Cropper.\n     * @param {Element} element - The target element for cropping.\n     * @param {Object} [options={}] - The configuration options.\n     */\n    function Cropper(element) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      classCallCheck(this, Cropper);\n\n      if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {\n        throw new Error('The first argument is required and must be an <img> or <canvas> element.');\n      }\n\n      this.element = element;\n      this.options = assign({}, DEFAULTS, isPlainObject(options) && options);\n      this.cropped = false;\n      this.disabled = false;\n      this.pointers = {};\n      this.ready = false;\n      this.reloading = false;\n      this.replaced = false;\n      this.sized = false;\n      this.sizing = false;\n      this.init();\n    }\n\n    createClass(Cropper, [{\n      key: 'init',\n      value: function init() {\n        var element = this.element;\n\n        var tagName = element.tagName.toLowerCase();\n        var url = void 0;\n\n        if (getData(element, NAMESPACE)) {\n          return;\n        }\n\n        setData(element, NAMESPACE, this);\n\n        if (tagName === 'img') {\n          this.isImg = true;\n\n          // e.g.: \"img/picture.jpg\"\n          url = element.getAttribute('src') || '';\n          this.originalUrl = url;\n\n          // Stop when it's a blank image\n          if (!url) {\n            return;\n          }\n\n          // e.g.: \"http://example.com/img/picture.jpg\"\n          url = element.src;\n        } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n          url = element.toDataURL();\n        }\n\n        this.load(url);\n      }\n    }, {\n      key: 'load',\n      value: function load(url) {\n        var _this = this;\n\n        if (!url) {\n          return;\n        }\n\n        this.url = url;\n        this.imageData = {};\n\n        var element = this.element,\n            options = this.options;\n\n\n        if (!options.rotatable && !options.scalable) {\n          options.checkOrientation = false;\n        }\n\n        if (!options.checkOrientation || !window.ArrayBuffer) {\n          this.clone();\n          return;\n        }\n\n        // XMLHttpRequest disallows to open a Data URL in some browsers like IE11 and Safari\n        if (REGEXP_DATA_URL.test(url)) {\n          if (REGEXP_DATA_URL_JPEG.test(url)) {\n            this.read(dataURLToArrayBuffer(url));\n          } else {\n            this.clone();\n          }\n\n          return;\n        }\n\n        var xhr = new XMLHttpRequest();\n\n        this.reloading = true;\n        this.xhr = xhr;\n\n        var done = function done() {\n          _this.reloading = false;\n          _this.xhr = null;\n        };\n\n        xhr.ontimeout = done;\n        xhr.onabort = done;\n        xhr.onerror = function () {\n          done();\n          _this.clone();\n        };\n\n        xhr.onload = function () {\n          done();\n          _this.read(xhr.response);\n        };\n\n        // Bust cache when there is a \"crossOrigin\" property\n        if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n          url = addTimestamp(url);\n        }\n\n        xhr.open('get', url);\n        xhr.responseType = 'arraybuffer';\n        xhr.withCredentials = element.crossOrigin === 'use-credentials';\n        xhr.send();\n      }\n    }, {\n      key: 'read',\n      value: function read(arrayBuffer) {\n        var options = this.options,\n            imageData = this.imageData;\n\n        var orientation = getOrientation(arrayBuffer);\n        var rotate = 0;\n        var scaleX = 1;\n        var scaleY = 1;\n\n        if (orientation > 1) {\n          this.url = arrayBufferToDataURL(arrayBuffer, 'image/jpeg');\n\n          var _parseOrientation = parseOrientation(orientation);\n\n          rotate = _parseOrientation.rotate;\n          scaleX = _parseOrientation.scaleX;\n          scaleY = _parseOrientation.scaleY;\n        }\n\n        if (options.rotatable) {\n          imageData.rotate = rotate;\n        }\n\n        if (options.scalable) {\n          imageData.scaleX = scaleX;\n          imageData.scaleY = scaleY;\n        }\n\n        this.clone();\n      }\n    }, {\n      key: 'clone',\n      value: function clone() {\n        var element = this.element,\n            url = this.url;\n\n        var crossOrigin = void 0;\n        var crossOriginUrl = void 0;\n\n        if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {\n          crossOrigin = element.crossOrigin;\n\n\n          if (crossOrigin) {\n            crossOriginUrl = url;\n          } else {\n            crossOrigin = 'anonymous';\n\n            // Bust cache when there is not a \"crossOrigin\" property\n            crossOriginUrl = addTimestamp(url);\n          }\n        }\n\n        this.crossOrigin = crossOrigin;\n        this.crossOriginUrl = crossOriginUrl;\n\n        var image = document.createElement('img');\n\n        if (crossOrigin) {\n          image.crossOrigin = crossOrigin;\n        }\n\n        image.src = crossOriginUrl || url;\n        this.image = image;\n        image.onload = this.start.bind(this);\n        image.onerror = this.stop.bind(this);\n        addClass(image, CLASS_HIDE);\n        element.parentNode.insertBefore(image, element.nextSibling);\n      }\n    }, {\n      key: 'start',\n      value: function start() {\n        var _this2 = this;\n\n        var image = this.isImg ? this.element : this.image;\n\n        image.onload = null;\n        image.onerror = null;\n        this.sizing = true;\n\n        var IS_SAFARI = WINDOW.navigator && /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i.test(WINDOW.navigator.userAgent);\n        var done = function done(naturalWidth, naturalHeight) {\n          assign(_this2.imageData, {\n            naturalWidth: naturalWidth,\n            naturalHeight: naturalHeight,\n            aspectRatio: naturalWidth / naturalHeight\n          });\n          _this2.sizing = false;\n          _this2.sized = true;\n          _this2.build();\n        };\n\n        // Modern browsers (except Safari)\n        if (image.naturalWidth && !IS_SAFARI) {\n          done(image.naturalWidth, image.naturalHeight);\n          return;\n        }\n\n        var sizingImage = document.createElement('img');\n        var body = document.body || document.documentElement;\n\n        this.sizingImage = sizingImage;\n\n        sizingImage.onload = function () {\n          done(sizingImage.width, sizingImage.height);\n\n          if (!IS_SAFARI) {\n            body.removeChild(sizingImage);\n          }\n        };\n\n        sizingImage.src = image.src;\n\n        // iOS Safari will convert the image automatically\n        // with its orientation once append it into DOM (#279)\n        if (!IS_SAFARI) {\n          sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';\n          body.appendChild(sizingImage);\n        }\n      }\n    }, {\n      key: 'stop',\n      value: function stop() {\n        var image = this.image;\n\n\n        image.onload = null;\n        image.onerror = null;\n        image.parentNode.removeChild(image);\n        this.image = null;\n      }\n    }, {\n      key: 'build',\n      value: function build() {\n        if (!this.sized || this.ready) {\n          return;\n        }\n\n        var element = this.element,\n            options = this.options,\n            image = this.image;\n\n        // Create cropper elements\n\n        var container = element.parentNode;\n        var template = document.createElement('div');\n\n        template.innerHTML = TEMPLATE;\n\n        var cropper = template.querySelector('.' + NAMESPACE + '-container');\n        var canvas = cropper.querySelector('.' + NAMESPACE + '-canvas');\n        var dragBox = cropper.querySelector('.' + NAMESPACE + '-drag-box');\n        var cropBox = cropper.querySelector('.' + NAMESPACE + '-crop-box');\n        var face = cropBox.querySelector('.' + NAMESPACE + '-face');\n\n        this.container = container;\n        this.cropper = cropper;\n        this.canvas = canvas;\n        this.dragBox = dragBox;\n        this.cropBox = cropBox;\n        this.viewBox = cropper.querySelector('.' + NAMESPACE + '-view-box');\n        this.face = face;\n\n        canvas.appendChild(image);\n\n        // Hide the original image\n        addClass(element, CLASS_HIDDEN);\n\n        // Inserts the cropper after to the current image\n        container.insertBefore(cropper, element.nextSibling);\n\n        // Show the image if is hidden\n        if (!this.isImg) {\n          removeClass(image, CLASS_HIDE);\n        }\n\n        this.initPreview();\n        this.bind();\n\n        options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\n        options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n        options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n\n        addClass(cropBox, CLASS_HIDDEN);\n\n        if (!options.guides) {\n          addClass(cropBox.getElementsByClassName(NAMESPACE + '-dashed'), CLASS_HIDDEN);\n        }\n\n        if (!options.center) {\n          addClass(cropBox.getElementsByClassName(NAMESPACE + '-center'), CLASS_HIDDEN);\n        }\n\n        if (options.background) {\n          addClass(cropper, NAMESPACE + '-bg');\n        }\n\n        if (!options.highlight) {\n          addClass(face, CLASS_INVISIBLE);\n        }\n\n        if (options.cropBoxMovable) {\n          addClass(face, CLASS_MOVE);\n          setData(face, DATA_ACTION, ACTION_ALL);\n        }\n\n        if (!options.cropBoxResizable) {\n          addClass(cropBox.getElementsByClassName(NAMESPACE + '-line'), CLASS_HIDDEN);\n          addClass(cropBox.getElementsByClassName(NAMESPACE + '-point'), CLASS_HIDDEN);\n        }\n\n        this.render();\n        this.ready = true;\n        this.setDragMode(options.dragMode);\n\n        if (options.autoCrop) {\n          this.crop();\n        }\n\n        this.setData(options.data);\n\n        if (isFunction(options.ready)) {\n          addListener(element, EVENT_READY, options.ready, {\n            once: true\n          });\n        }\n\n        dispatchEvent(element, EVENT_READY);\n      }\n    }, {\n      key: 'unbuild',\n      value: function unbuild() {\n        if (!this.ready) {\n          return;\n        }\n\n        this.ready = false;\n        this.unbind();\n        this.resetPreview();\n        this.cropper.parentNode.removeChild(this.cropper);\n        removeClass(this.element, CLASS_HIDDEN);\n      }\n    }, {\n      key: 'uncreate',\n      value: function uncreate() {\n        if (this.ready) {\n          this.unbuild();\n          this.ready = false;\n          this.cropped = false;\n        } else if (this.sizing) {\n          this.sizingImage.onload = null;\n          this.sizing = false;\n          this.sized = false;\n        } else if (this.reloading) {\n          this.xhr.abort();\n        } else if (this.image) {\n          this.stop();\n        }\n      }\n\n      /**\n       * Get the no conflict cropper class.\n       * @returns {Cropper} The cropper class.\n       */\n\n    }], [{\n      key: 'noConflict',\n      value: function noConflict() {\n        window.Cropper = AnotherCropper;\n        return Cropper;\n      }\n\n      /**\n       * Change the default options.\n       * @param {Object} options - The new default options.\n       */\n\n    }, {\n      key: 'setDefaults',\n      value: function setDefaults(options) {\n        assign(DEFAULTS, isPlainObject(options) && options);\n      }\n    }]);\n    return Cropper;\n  }();\n\n  assign(Cropper.prototype, render, preview, events, handlers, change, methods);\n\n  return Cropper;\n\n})));\n"],"sourceRoot":""}