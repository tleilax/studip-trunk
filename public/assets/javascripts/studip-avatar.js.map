{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/cropperjs/dist/cropper.esm.js","webpack:///./resources/assets/javascripts/entry-avatar.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","IN_BROWSER","window","WINDOW","CLASS_HIDDEN","NAMESPACE","EVENT_POINTER_DOWN","PointerEvent","EVENT_POINTER_MOVE","EVENT_POINTER_UP","REGEXP_ACTIONS","REGEXP_DATA_URL","REGEXP_DATA_URL_JPEG","REGEXP_TAG_NAME","DEFAULTS","viewMode","dragMode","initialAspectRatio","NaN","aspectRatio","data","preview","responsive","restore","checkCrossOrigin","checkOrientation","modal","guides","center","highlight","background","autoCrop","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick","minCanvasWidth","minCanvasHeight","minCropBoxWidth","minCropBoxHeight","minContainerWidth","minContainerHeight","ready","cropstart","cropmove","cropend","crop","zoom","_typeof","iterator","obj","constructor","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","length","descriptor","configurable","writable","protoProps","staticProps","toConsumableArray","arr","Array","isArray","arr2","from","cropper_esm_isNaN","Number","isNaN","isNumber","isUndefined","isObject","cropper_esm_hasOwnProperty","isPlainObject","_constructor","e","isFunction","forEach","callback","keys","cropper_esm_assign","assign","_len","arguments","args","_key","arg","REGEXP_DECIMALS","normalizeDecimalNumber","times","undefined","test","Math","round","REGEXP_SUFFIX","setStyle","element","styles","style","addClass","elem","classList","add","className","trim","indexOf","removeClass","remove","replace","toggleClass","added","REGEXP_HYPHENATE","hyphenate","toLowerCase","getData","dataset","getAttribute","setData","setAttribute","removeData","removeAttribute","REGEXP_SPACES","onceSupported","supported","once","listener","options","set","addEventListener","removeEventListener","removeListener","type","handler","split","event","listeners","addListener","_handler","_element$listeners","_len2","_key2","apply","dispatchEvent","Event","CustomEvent","detail","bubbles","cancelable","document","createEvent","initCustomEvent","getOffset","box","getBoundingClientRect","left","pageXOffset","documentElement","clientLeft","top","pageYOffset","clientTop","cropper_esm_location","location","REGEXP_ORIGINS","isCrossOriginURL","url","parts","match","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","getTransforms","_ref","rotate","scaleX","scaleY","translateX","translateY","values","push","transform","join","WebkitTransform","msTransform","getPointer","_ref2","endOnly","pageX","pageY","end","endX","endY","startX","startY","cropper_esm_isFinite","isFinite","getAdjustedSizes","_ref4","height","width","isValidNumber","adjustedWidth","fromCharCode","String","REGEXP_DATA_URL_HEAD","getOrientation","arrayBuffer","dataView","DataView","orientation","littleEndian","app1Start","ifdStart","getUint8","byteLength","offset","tiffOffset","start","str","getStringFromCharCode","endianness","getUint16","firstIFDOffset","getUint32","_length","_offset","setUint16","render","this","initContainer","initCanvas","initCropBox","renderCanvas","cropped","renderCropBox","container","cropper","containerData","max","offsetWidth","offsetHeight","imageData","rotated","abs","naturalWidth","naturalHeight","canvasWidth","canvasHeight","canvasData","oldLeft","oldTop","limited","limitCanvas","initialImageData","initialCanvasData","sizeLimited","positionLimited","cropBoxData","_getAdjustedSizes","minWidth","minHeight","maxWidth","Infinity","maxHeight","newCanvasLeft","newCanvasTop","minLeft","min","minTop","maxLeft","maxTop","changed","transformed","_getRotatedSizes","_ref5","degree","arc","PI","sinArc","sin","cosArc","cos","newWidth","newHeight","getRotatedSizes","canvas","renderImage","limitCropBox","image","output","initialCropBoxData","maxCropBoxWidth","maxCropBoxHeight","face","cropBox","disabled","initPreview","crossOrigin","crossOriginUrl","createElement","src","viewBox","appendChild","viewBoxImage","previews","ownerDocument","querySelectorAll","querySelector","el","img","html","innerHTML","cssText","resetPreview","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","ratio","getElementsByTagName","events","onCropStart","cropStart","onWheel","wheel","onDblclick","dblclick","onCropMove","cropMove","onCropEnd","cropEnd","onResize","resize","unbind","handlers","getCanvasData","getCropBoxData","setCanvasData","setCropBoxData","setDragMode","dragBox","contains","_this","delta","preventDefault","wheeling","setTimeout","deltaY","wheelDelta","pointers","action","changedTouches","touch","identifier","pointerId","originalEvent","cropping","change","right","bottom","renderable","shiftKey","pointer","range","x","y","check","side","move","pointers2","ratios","pointer2","x1","y1","x2","y2","z1","sqrt","sort","a","b","getMaxZoomRatio","methods","reset","clear","hasSameSize","isImg","replaced","uncreate","load","enable","disable","destroy","originalUrl","offsetX","offsetY","_canvasData","moveTo","_originalEvent","zoomTo","pivot","oldRatio","count","_ref3","getPointersCenter","rotateTo","_scaleX","scale","_scaleY","rounded","getContainerData","getImageData","sized","widthChanged","heightChanged","getCroppedCanvas","HTMLCanvasElement","source","_ref6","_ref7","_ref8","imageAspectRatio","imageNaturalWidth","imageNaturalHeight","_ref6$rotate","_ref6$scaleX","_ref6$scaleY","_ref8$fillColor","fillColor","_ref8$imageSmoothingE","imageSmoothingEnabled","_ref8$imageSmoothingQ","imageSmoothingQuality","_ref8$maxWidth","_ref8$maxHeight","_ref8$minWidth","_ref8$minHeight","context","getContext","maxSizes","minSizes","destMaxSizes","destMinSizes","destWidth","destHeight","params","fillStyle","fillRect","save","translate","drawImage","concat","map","param","floor","getSourceCanvas","_getData","initialX","initialY","initialWidth","initialHeight","_options$imageSmoothi","sourceWidth","sourceHeight","srcX","srcY","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","setAspectRatio","croppable","AnotherCropper","Cropper","tagName","Error","reloading","sizing","init","toDataURL","ArrayBuffer","read","base64","binary","atob","uint8","Uint8Array","charCodeAt","clone","xhr","XMLHttpRequest","done","ontimeout","onabort","onerror","onload","response","open","responseType","withCredentials","send","mimeType","btoa","arrayBufferToDataURL","_parseOrientation","parseOrientation","stop","parentNode","insertBefore","nextSibling","_this2","IS_SAFARI","navigator","userAgent","build","sizingImage","body","removeChild","template","getElementsByClassName","unbuild","abort","cropper_esm","STUDIP","Avatar","inputSelector","$","on","readFile","off","checkImageSize","input","FileReader","files","reader","size","jQuery","dialog","closest","css","hasClass","getElementById","result","readAsDataURL","hide","attr","alert","confirm"],"mappings":"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","file":"javascripts/studip-avatar.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","/*!\n * Cropper.js v1.4.0\n * https://fengyuanchen.github.io/cropperjs\n *\n * Copyright 2015-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2018-06-01T15:18:18.692Z\n */\n\nvar IN_BROWSER = typeof window !== 'undefined';\nvar WINDOW = IN_BROWSER ? window : {};\nvar NAMESPACE = 'cropper';\n\n// Actions\nvar ACTION_ALL = 'all';\nvar ACTION_CROP = 'crop';\nvar ACTION_MOVE = 'move';\nvar ACTION_ZOOM = 'zoom';\nvar ACTION_EAST = 'e';\nvar ACTION_WEST = 'w';\nvar ACTION_SOUTH = 's';\nvar ACTION_NORTH = 'n';\nvar ACTION_NORTH_EAST = 'ne';\nvar ACTION_NORTH_WEST = 'nw';\nvar ACTION_SOUTH_EAST = 'se';\nvar ACTION_SOUTH_WEST = 'sw';\n\n// Classes\nvar CLASS_CROP = NAMESPACE + '-crop';\nvar CLASS_DISABLED = NAMESPACE + '-disabled';\nvar CLASS_HIDDEN = NAMESPACE + '-hidden';\nvar CLASS_HIDE = NAMESPACE + '-hide';\nvar CLASS_INVISIBLE = NAMESPACE + '-invisible';\nvar CLASS_MODAL = NAMESPACE + '-modal';\nvar CLASS_MOVE = NAMESPACE + '-move';\n\n// Data keys\nvar DATA_ACTION = NAMESPACE + 'Action';\nvar DATA_PREVIEW = NAMESPACE + 'Preview';\n\n// Drag modes\nvar DRAG_MODE_CROP = 'crop';\nvar DRAG_MODE_MOVE = 'move';\nvar DRAG_MODE_NONE = 'none';\n\n// Events\nvar EVENT_CROP = 'crop';\nvar EVENT_CROP_END = 'cropend';\nvar EVENT_CROP_MOVE = 'cropmove';\nvar EVENT_CROP_START = 'cropstart';\nvar EVENT_DBLCLICK = 'dblclick';\nvar EVENT_POINTER_DOWN = WINDOW.PointerEvent ? 'pointerdown' : 'touchstart mousedown';\nvar EVENT_POINTER_MOVE = WINDOW.PointerEvent ? 'pointermove' : 'touchmove mousemove';\nvar EVENT_POINTER_UP = WINDOW.PointerEvent ? 'pointerup pointercancel' : 'touchend touchcancel mouseup';\nvar EVENT_READY = 'ready';\nvar EVENT_RESIZE = 'resize';\nvar EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\nvar EVENT_ZOOM = 'zoom';\n\n// RegExps\nvar REGEXP_ACTIONS = /^(?:e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/;\nvar REGEXP_DATA_URL = /^data:/;\nvar REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\nvar REGEXP_TAG_NAME = /^(?:img|canvas)$/i;\n\nvar DEFAULTS = {\n  // Define the view mode of the cropper\n  viewMode: 0, // 0, 1, 2, 3\n\n  // Define the dragging mode of the cropper\n  dragMode: DRAG_MODE_CROP, // 'crop', 'move' or 'none'\n\n  // Define the initial aspect ratio of the crop box\n  initialAspectRatio: NaN,\n\n  // Define the aspect ratio of the crop box\n  aspectRatio: NaN,\n\n  // An object with the previous cropping result data\n  data: null,\n\n  // A selector for adding extra containers to preview\n  preview: '',\n\n  // Re-render the cropper when resize the window\n  responsive: true,\n\n  // Restore the cropped area after resize the window\n  restore: true,\n\n  // Check if the current image is a cross-origin image\n  checkCrossOrigin: true,\n\n  // Check the current image's Exif Orientation information\n  checkOrientation: true,\n\n  // Show the black modal\n  modal: true,\n\n  // Show the dashed lines for guiding\n  guides: true,\n\n  // Show the center indicator for guiding\n  center: true,\n\n  // Show the white modal to highlight the crop box\n  highlight: true,\n\n  // Show the grid background\n  background: true,\n\n  // Enable to crop the image automatically when initialize\n  autoCrop: true,\n\n  // Define the percentage of automatic cropping area when initializes\n  autoCropArea: 0.8,\n\n  // Enable to move the image\n  movable: true,\n\n  // Enable to rotate the image\n  rotatable: true,\n\n  // Enable to scale the image\n  scalable: true,\n\n  // Enable to zoom the image\n  zoomable: true,\n\n  // Enable to zoom the image by dragging touch\n  zoomOnTouch: true,\n\n  // Enable to zoom the image by wheeling mouse\n  zoomOnWheel: true,\n\n  // Define zoom ratio when zoom the image by wheeling mouse\n  wheelZoomRatio: 0.1,\n\n  // Enable to move the crop box\n  cropBoxMovable: true,\n\n  // Enable to resize the crop box\n  cropBoxResizable: true,\n\n  // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n  toggleDragModeOnDblclick: true,\n\n  // Size limitation\n  minCanvasWidth: 0,\n  minCanvasHeight: 0,\n  minCropBoxWidth: 0,\n  minCropBoxHeight: 0,\n  minContainerWidth: 200,\n  minContainerHeight: 100,\n\n  // Shortcuts of events\n  ready: null,\n  cropstart: null,\n  cropmove: null,\n  cropend: null,\n  crop: null,\n  zoom: null\n};\n\nvar TEMPLATE = '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + '</div>' + '</div>';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n/**\n * Check if the given value is not a number.\n */\nvar isNaN = Number.isNaN || WINDOW.isNaN;\n\n/**\n * Check if the given value is a number.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n */\nfunction isNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\n/**\n * Check if the given value is undefined.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n */\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n\n/**\n * Check if the given value is an object.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n */\nfunction isObject(value) {\n  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Check if the given value is a plain object.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n */\n\nfunction isPlainObject(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  try {\n    var _constructor = value.constructor;\n    var prototype = _constructor.prototype;\n\n\n    return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Check if the given value is a function.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n */\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\n/**\n * Iterate the given data.\n * @param {*} data - The data to iterate.\n * @param {Function} callback - The process function for each element.\n * @returns {*} The original data.\n */\nfunction forEach(data, callback) {\n  if (data && isFunction(callback)) {\n    if (Array.isArray(data) || isNumber(data.length) /* array-like */) {\n        var length = data.length;\n\n        var i = void 0;\n\n        for (i = 0; i < length; i += 1) {\n          if (callback.call(data, data[i], i, data) === false) {\n            break;\n          }\n        }\n      } else if (isObject(data)) {\n      Object.keys(data).forEach(function (key) {\n        callback.call(data, data[key], key, data);\n      });\n    }\n  }\n\n  return data;\n}\n\n/**\n * Extend the given object.\n * @param {*} obj - The object to be extended.\n * @param {*} args - The rest objects which will be merged to the first object.\n * @returns {Object} The extended object.\n */\nvar assign = Object.assign || function assign(obj) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (isObject(obj) && args.length > 0) {\n    args.forEach(function (arg) {\n      if (isObject(arg)) {\n        Object.keys(arg).forEach(function (key) {\n          obj[key] = arg[key];\n        });\n      }\n    });\n  }\n\n  return obj;\n};\n\nvar REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/i;\n\n/**\n * Normalize decimal number.\n * Check out {@link http://0.30000000000000004.com/}\n * @param {number} value - The value to normalize.\n * @param {number} [times=100000000000] - The times for normalizing.\n * @returns {number} Returns the normalized number.\n */\nfunction normalizeDecimalNumber(value) {\n  var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n\n  return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n}\n\nvar REGEXP_SUFFIX = /^(?:width|height|left|top|marginLeft|marginTop)$/;\n\n/**\n * Apply styles to the given element.\n * @param {Element} element - The target element.\n * @param {Object} styles - The styles for applying.\n */\nfunction setStyle(element, styles) {\n  var style = element.style;\n\n\n  forEach(styles, function (value, property) {\n    if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n      value += 'px';\n    }\n\n    style[property] = value;\n  });\n}\n\n/**\n * Check if the given element has a special class.\n * @param {Element} element - The element to check.\n * @param {string} value - The class to search.\n * @returns {boolean} Returns `true` if the special class was found.\n */\nfunction hasClass(element, value) {\n  return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n}\n\n/**\n * Add classes to the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be added.\n */\nfunction addClass(element, value) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    forEach(element, function (elem) {\n      addClass(elem, value);\n    });\n    return;\n  }\n\n  if (element.classList) {\n    element.classList.add(value);\n    return;\n  }\n\n  var className = element.className.trim();\n\n  if (!className) {\n    element.className = value;\n  } else if (className.indexOf(value) < 0) {\n    element.className = className + ' ' + value;\n  }\n}\n\n/**\n * Remove classes from the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be removed.\n */\nfunction removeClass(element, value) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    forEach(element, function (elem) {\n      removeClass(elem, value);\n    });\n    return;\n  }\n\n  if (element.classList) {\n    element.classList.remove(value);\n    return;\n  }\n\n  if (element.className.indexOf(value) >= 0) {\n    element.className = element.className.replace(value, '');\n  }\n}\n\n/**\n * Add or remove classes from the given element.\n * @param {Element} element - The target element.\n * @param {string} value - The classes to be toggled.\n * @param {boolean} added - Add only.\n */\nfunction toggleClass(element, value, added) {\n  if (!value) {\n    return;\n  }\n\n  if (isNumber(element.length)) {\n    forEach(element, function (elem) {\n      toggleClass(elem, value, added);\n    });\n    return;\n  }\n\n  // IE10-11 doesn't support the second parameter of `classList.toggle`\n  if (added) {\n    addClass(element, value);\n  } else {\n    removeClass(element, value);\n  }\n}\n\nvar REGEXP_HYPHENATE = /([a-z\\d])([A-Z])/g;\n\n/**\n * Transform the given string from camelCase to kebab-case\n * @param {string} value - The value to transform.\n * @returns {string} The transformed value.\n */\nfunction hyphenate(value) {\n  return value.replace(REGEXP_HYPHENATE, '$1-$2').toLowerCase();\n}\n\n/**\n * Get data from the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to get.\n * @returns {string} The data value.\n */\nfunction getData(element, name) {\n  if (isObject(element[name])) {\n    return element[name];\n  } else if (element.dataset) {\n    return element.dataset[name];\n  }\n\n  return element.getAttribute('data-' + hyphenate(name));\n}\n\n/**\n * Set data to the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to set.\n * @param {string} data - The data value.\n */\nfunction setData(element, name, data) {\n  if (isObject(data)) {\n    element[name] = data;\n  } else if (element.dataset) {\n    element.dataset[name] = data;\n  } else {\n    element.setAttribute('data-' + hyphenate(name), data);\n  }\n}\n\n/**\n * Remove data from the given element.\n * @param {Element} element - The target element.\n * @param {string} name - The data key to remove.\n */\nfunction removeData(element, name) {\n  if (isObject(element[name])) {\n    try {\n      delete element[name];\n    } catch (e) {\n      element[name] = undefined;\n    }\n  } else if (element.dataset) {\n    // #128 Safari not allows to delete dataset property\n    try {\n      delete element.dataset[name];\n    } catch (e) {\n      element.dataset[name] = undefined;\n    }\n  } else {\n    element.removeAttribute('data-' + hyphenate(name));\n  }\n}\n\nvar REGEXP_SPACES = /\\s\\s*/;\nvar onceSupported = function () {\n  var supported = false;\n\n  if (IN_BROWSER) {\n    var once = false;\n    var listener = function listener() {};\n    var options = Object.defineProperty({}, 'once', {\n      get: function get$$1() {\n        supported = true;\n        return once;\n      },\n\n\n      /**\n       * This setter can fix a `TypeError` in strict mode\n       * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\n       * @param {boolean} value - The value to set\n       */\n      set: function set$$1(value) {\n        once = value;\n      }\n    });\n\n    WINDOW.addEventListener('test', listener, options);\n    WINDOW.removeEventListener('test', listener, options);\n  }\n\n  return supported;\n}();\n\n/**\n * Remove event listener from the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Function} listener - The event listener.\n * @param {Object} options - The event options.\n */\nfunction removeListener(element, type, listener) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var handler = listener;\n\n  type.trim().split(REGEXP_SPACES).forEach(function (event) {\n    if (!onceSupported) {\n      var listeners = element.listeners;\n\n\n      if (listeners && listeners[event] && listeners[event][listener]) {\n        handler = listeners[event][listener];\n        delete listeners[event][listener];\n\n        if (Object.keys(listeners[event]).length === 0) {\n          delete listeners[event];\n        }\n\n        if (Object.keys(listeners).length === 0) {\n          delete element.listeners;\n        }\n      }\n    }\n\n    element.removeEventListener(event, handler, options);\n  });\n}\n\n/**\n * Add event listener to the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Function} listener - The event listener.\n * @param {Object} options - The event options.\n */\nfunction addListener(element, type, listener) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var _handler = listener;\n\n  type.trim().split(REGEXP_SPACES).forEach(function (event) {\n    if (options.once && !onceSupported) {\n      var _element$listeners = element.listeners,\n          listeners = _element$listeners === undefined ? {} : _element$listeners;\n\n\n      _handler = function handler() {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        delete listeners[event][listener];\n        element.removeEventListener(event, _handler, options);\n        listener.apply(element, args);\n      };\n\n      if (!listeners[event]) {\n        listeners[event] = {};\n      }\n\n      if (listeners[event][listener]) {\n        element.removeEventListener(event, listeners[event][listener], options);\n      }\n\n      listeners[event][listener] = _handler;\n      element.listeners = listeners;\n    }\n\n    element.addEventListener(event, _handler, options);\n  });\n}\n\n/**\n * Dispatch event on the target element.\n * @param {Element} element - The event target.\n * @param {string} type - The event type(s).\n * @param {Object} data - The additional event data.\n * @returns {boolean} Indicate if the event is default prevented or not.\n */\nfunction dispatchEvent(element, type, data) {\n  var event = void 0;\n\n  // Event and CustomEvent on IE9-11 are global objects, not constructors\n  if (isFunction(Event) && isFunction(CustomEvent)) {\n    event = new CustomEvent(type, {\n      detail: data,\n      bubbles: true,\n      cancelable: true\n    });\n  } else {\n    event = document.createEvent('CustomEvent');\n    event.initCustomEvent(type, true, true, data);\n  }\n\n  return element.dispatchEvent(event);\n}\n\n/**\n * Get the offset base on the document.\n * @param {Element} element - The target element.\n * @returns {Object} The offset data.\n */\nfunction getOffset(element) {\n  var box = element.getBoundingClientRect();\n\n  return {\n    left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\n    top: box.top + (window.pageYOffset - document.documentElement.clientTop)\n  };\n}\n\nvar location = WINDOW.location;\n\nvar REGEXP_ORIGINS = /^(https?:)\\/\\/([^:/?#]+):?(\\d*)/i;\n\n/**\n * Check if the given URL is a cross origin URL.\n * @param {string} url - The target URL.\n * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\n */\nfunction isCrossOriginURL(url) {\n  var parts = url.match(REGEXP_ORIGINS);\n\n  return parts && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n}\n\n/**\n * Add timestamp to the given URL.\n * @param {string} url - The target URL.\n * @returns {string} The result URL.\n */\nfunction addTimestamp(url) {\n  var timestamp = 'timestamp=' + new Date().getTime();\n\n  return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n}\n\n/**\n * Get transforms base on the given object.\n * @param {Object} obj - The target object.\n * @returns {string} A string contains transform values.\n */\nfunction getTransforms(_ref) {\n  var rotate = _ref.rotate,\n      scaleX = _ref.scaleX,\n      scaleY = _ref.scaleY,\n      translateX = _ref.translateX,\n      translateY = _ref.translateY;\n\n  var values = [];\n\n  if (isNumber(translateX) && translateX !== 0) {\n    values.push('translateX(' + translateX + 'px)');\n  }\n\n  if (isNumber(translateY) && translateY !== 0) {\n    values.push('translateY(' + translateY + 'px)');\n  }\n\n  // Rotate should come first before scale to match orientation transform\n  if (isNumber(rotate) && rotate !== 0) {\n    values.push('rotate(' + rotate + 'deg)');\n  }\n\n  if (isNumber(scaleX) && scaleX !== 1) {\n    values.push('scaleX(' + scaleX + ')');\n  }\n\n  if (isNumber(scaleY) && scaleY !== 1) {\n    values.push('scaleY(' + scaleY + ')');\n  }\n\n  var transform = values.length ? values.join(' ') : 'none';\n\n  return {\n    WebkitTransform: transform,\n    msTransform: transform,\n    transform: transform\n  };\n}\n\n/**\n * Get the max ratio of a group of pointers.\n * @param {string} pointers - The target pointers.\n * @returns {number} The result ratio.\n */\nfunction getMaxZoomRatio(pointers) {\n  var pointers2 = assign({}, pointers);\n  var ratios = [];\n\n  forEach(pointers, function (pointer, pointerId) {\n    delete pointers2[pointerId];\n\n    forEach(pointers2, function (pointer2) {\n      var x1 = Math.abs(pointer.startX - pointer2.startX);\n      var y1 = Math.abs(pointer.startY - pointer2.startY);\n      var x2 = Math.abs(pointer.endX - pointer2.endX);\n      var y2 = Math.abs(pointer.endY - pointer2.endY);\n      var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n      var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n      var ratio = (z2 - z1) / z1;\n\n      ratios.push(ratio);\n    });\n  });\n\n  ratios.sort(function (a, b) {\n    return Math.abs(a) < Math.abs(b);\n  });\n\n  return ratios[0];\n}\n\n/**\n * Get a pointer from an event object.\n * @param {Object} event - The target event object.\n * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\n * @returns {Object} The result pointer contains start and/or end point coordinates.\n */\nfunction getPointer(_ref2, endOnly) {\n  var pageX = _ref2.pageX,\n      pageY = _ref2.pageY;\n\n  var end = {\n    endX: pageX,\n    endY: pageY\n  };\n\n  return endOnly ? end : assign({\n    startX: pageX,\n    startY: pageY\n  }, end);\n}\n\n/**\n * Get the center point coordinate of a group of pointers.\n * @param {Object} pointers - The target pointers.\n * @returns {Object} The center point coordinate.\n */\nfunction getPointersCenter(pointers) {\n  var pageX = 0;\n  var pageY = 0;\n  var count = 0;\n\n  forEach(pointers, function (_ref3) {\n    var startX = _ref3.startX,\n        startY = _ref3.startY;\n\n    pageX += startX;\n    pageY += startY;\n    count += 1;\n  });\n\n  pageX /= count;\n  pageY /= count;\n\n  return {\n    pageX: pageX,\n    pageY: pageY\n  };\n}\n\n/**\n * Check if the given value is a finite number.\n */\nvar isFinite = Number.isFinite || WINDOW.isFinite;\n\n/**\n * Get the max sizes in a rectangle under the given aspect ratio.\n * @param {Object} data - The original sizes.\n * @param {string} [type='contain'] - The adjust type.\n * @returns {Object} The result sizes.\n */\nfunction getAdjustedSizes(_ref4) // or 'cover'\n{\n  var aspectRatio = _ref4.aspectRatio,\n      height = _ref4.height,\n      width = _ref4.width;\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';\n\n  var isValidNumber = function isValidNumber(value) {\n    return isFinite(value) && value > 0;\n  };\n\n  if (isValidNumber(width) && isValidNumber(height)) {\n    var adjustedWidth = height * aspectRatio;\n\n    if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {\n      height = width / aspectRatio;\n    } else {\n      width = height * aspectRatio;\n    }\n  } else if (isValidNumber(width)) {\n    height = width / aspectRatio;\n  } else if (isValidNumber(height)) {\n    width = height * aspectRatio;\n  }\n\n  return {\n    width: width,\n    height: height\n  };\n}\n\n/**\n * Get the new sizes of a rectangle after rotated.\n * @param {Object} data - The original sizes.\n * @returns {Object} The result sizes.\n */\nfunction getRotatedSizes(_ref5) {\n  var width = _ref5.width,\n      height = _ref5.height,\n      degree = _ref5.degree;\n\n  degree = Math.abs(degree) % 180;\n\n  if (degree === 90) {\n    return {\n      width: height,\n      height: width\n    };\n  }\n\n  var arc = degree % 90 * Math.PI / 180;\n  var sinArc = Math.sin(arc);\n  var cosArc = Math.cos(arc);\n  var newWidth = width * cosArc + height * sinArc;\n  var newHeight = width * sinArc + height * cosArc;\n\n  return degree > 90 ? {\n    width: newHeight,\n    height: newWidth\n  } : {\n    width: newWidth,\n    height: newHeight\n  };\n}\n\n/**\n * Get a canvas which drew the given image.\n * @param {HTMLImageElement} image - The image for drawing.\n * @param {Object} imageData - The image data.\n * @param {Object} canvasData - The canvas data.\n * @param {Object} options - The options.\n * @returns {HTMLCanvasElement} The result canvas.\n */\nfunction getSourceCanvas(image, _ref6, _ref7, _ref8) {\n  var imageAspectRatio = _ref6.aspectRatio,\n      imageNaturalWidth = _ref6.naturalWidth,\n      imageNaturalHeight = _ref6.naturalHeight,\n      _ref6$rotate = _ref6.rotate,\n      rotate = _ref6$rotate === undefined ? 0 : _ref6$rotate,\n      _ref6$scaleX = _ref6.scaleX,\n      scaleX = _ref6$scaleX === undefined ? 1 : _ref6$scaleX,\n      _ref6$scaleY = _ref6.scaleY,\n      scaleY = _ref6$scaleY === undefined ? 1 : _ref6$scaleY;\n  var aspectRatio = _ref7.aspectRatio,\n      naturalWidth = _ref7.naturalWidth,\n      naturalHeight = _ref7.naturalHeight;\n  var _ref8$fillColor = _ref8.fillColor,\n      fillColor = _ref8$fillColor === undefined ? 'transparent' : _ref8$fillColor,\n      _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,\n      imageSmoothingEnabled = _ref8$imageSmoothingE === undefined ? true : _ref8$imageSmoothingE,\n      _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,\n      imageSmoothingQuality = _ref8$imageSmoothingQ === undefined ? 'low' : _ref8$imageSmoothingQ,\n      _ref8$maxWidth = _ref8.maxWidth,\n      maxWidth = _ref8$maxWidth === undefined ? Infinity : _ref8$maxWidth,\n      _ref8$maxHeight = _ref8.maxHeight,\n      maxHeight = _ref8$maxHeight === undefined ? Infinity : _ref8$maxHeight,\n      _ref8$minWidth = _ref8.minWidth,\n      minWidth = _ref8$minWidth === undefined ? 0 : _ref8$minWidth,\n      _ref8$minHeight = _ref8.minHeight,\n      minHeight = _ref8$minHeight === undefined ? 0 : _ref8$minHeight;\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext('2d');\n  var maxSizes = getAdjustedSizes({\n    aspectRatio: aspectRatio,\n    width: maxWidth,\n    height: maxHeight\n  });\n  var minSizes = getAdjustedSizes({\n    aspectRatio: aspectRatio,\n    width: minWidth,\n    height: minHeight\n  }, 'cover');\n  var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\n  var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight));\n\n  // Note: should always use image's natural sizes for drawing as\n  // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\n  var destMaxSizes = getAdjustedSizes({\n    aspectRatio: imageAspectRatio,\n    width: maxWidth,\n    height: maxHeight\n  });\n  var destMinSizes = getAdjustedSizes({\n    aspectRatio: imageAspectRatio,\n    width: minWidth,\n    height: minHeight\n  }, 'cover');\n  var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\n  var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\n  var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];\n\n  canvas.width = normalizeDecimalNumber(width);\n  canvas.height = normalizeDecimalNumber(height);\n  context.fillStyle = fillColor;\n  context.fillRect(0, 0, width, height);\n  context.save();\n  context.translate(width / 2, height / 2);\n  context.rotate(rotate * Math.PI / 180);\n  context.scale(scaleX, scaleY);\n  context.imageSmoothingEnabled = imageSmoothingEnabled;\n  context.imageSmoothingQuality = imageSmoothingQuality;\n  context.drawImage.apply(context, [image].concat(toConsumableArray(params.map(function (param) {\n    return Math.floor(normalizeDecimalNumber(param));\n  }))));\n  context.restore();\n  return canvas;\n}\n\nvar fromCharCode = String.fromCharCode;\n\n/**\n * Get string from char code in data view.\n * @param {DataView} dataView - The data view for read.\n * @param {number} start - The start index.\n * @param {number} length - The read length.\n * @returns {string} The read result.\n */\n\nfunction getStringFromCharCode(dataView, start, length) {\n  var str = '';\n  var i = void 0;\n\n  length += start;\n\n  for (i = start; i < length; i += 1) {\n    str += fromCharCode(dataView.getUint8(i));\n  }\n\n  return str;\n}\n\nvar REGEXP_DATA_URL_HEAD = /^data:.*,/;\n\n/**\n * Transform Data URL to array buffer.\n * @param {string} dataURL - The Data URL to transform.\n * @returns {ArrayBuffer} The result array buffer.\n */\nfunction dataURLToArrayBuffer(dataURL) {\n  var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n  var binary = atob(base64);\n  var arrayBuffer = new ArrayBuffer(binary.length);\n  var uint8 = new Uint8Array(arrayBuffer);\n\n  forEach(uint8, function (value, i) {\n    uint8[i] = binary.charCodeAt(i);\n  });\n\n  return arrayBuffer;\n}\n\n/**\n * Transform array buffer to Data URL.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n * @param {string} mimeType - The mime type of the Data URL.\n * @returns {string} The result Data URL.\n */\nfunction arrayBufferToDataURL(arrayBuffer, mimeType) {\n  var uint8 = new Uint8Array(arrayBuffer);\n  var data = '';\n\n  // TypedArray.prototype.forEach is not supported in some browsers.\n  forEach(uint8, function (value) {\n    data += fromCharCode(value);\n  });\n\n  return 'data:' + mimeType + ';base64,' + btoa(data);\n}\n\n/**\n * Get orientation value from given array buffer.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n * @returns {number} The read orientation value.\n */\nfunction getOrientation(arrayBuffer) {\n  var dataView = new DataView(arrayBuffer);\n  var orientation = void 0;\n  var littleEndian = void 0;\n  var app1Start = void 0;\n  var ifdStart = void 0;\n\n  // Only handle JPEG image (start by 0xFFD8)\n  if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n    var length = dataView.byteLength;\n    var offset = 2;\n\n    while (offset < length) {\n      if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n        app1Start = offset;\n        break;\n      }\n\n      offset += 1;\n    }\n  }\n\n  if (app1Start) {\n    var exifIDCode = app1Start + 4;\n    var tiffOffset = app1Start + 10;\n\n    if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n      var endianness = dataView.getUint16(tiffOffset);\n\n      littleEndian = endianness === 0x4949;\n\n      if (littleEndian || endianness === 0x4D4D /* bigEndian */) {\n          if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n            var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n            if (firstIFDOffset >= 0x00000008) {\n              ifdStart = tiffOffset + firstIFDOffset;\n            }\n          }\n        }\n    }\n  }\n\n  if (ifdStart) {\n    var _length = dataView.getUint16(ifdStart, littleEndian);\n    var _offset = void 0;\n    var i = void 0;\n\n    for (i = 0; i < _length; i += 1) {\n      _offset = ifdStart + i * 12 + 2;\n\n      if (dataView.getUint16(_offset, littleEndian) === 0x0112 /* Orientation */) {\n          // 8 is the offset of the current tag's value\n          _offset += 8;\n\n          // Get the original orientation value\n          orientation = dataView.getUint16(_offset, littleEndian);\n\n          // Override the orientation with its default value\n          dataView.setUint16(_offset, 1, littleEndian);\n          break;\n        }\n    }\n  }\n\n  return orientation;\n}\n\n/**\n * Parse Exif Orientation value.\n * @param {number} orientation - The orientation to parse.\n * @returns {Object} The parsed result.\n */\nfunction parseOrientation(orientation) {\n  var rotate = 0;\n  var scaleX = 1;\n  var scaleY = 1;\n\n  switch (orientation) {\n    // Flip horizontal\n    case 2:\n      scaleX = -1;\n      break;\n\n    // Rotate left 180°\n    case 3:\n      rotate = -180;\n      break;\n\n    // Flip vertical\n    case 4:\n      scaleY = -1;\n      break;\n\n    // Flip vertical and rotate right 90°\n    case 5:\n      rotate = 90;\n      scaleY = -1;\n      break;\n\n    // Rotate right 90°\n    case 6:\n      rotate = 90;\n      break;\n\n    // Flip horizontal and rotate right 90°\n    case 7:\n      rotate = 90;\n      scaleX = -1;\n      break;\n\n    // Rotate left 90°\n    case 8:\n      rotate = -90;\n      break;\n\n    default:\n  }\n\n  return {\n    rotate: rotate,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n\nvar render = {\n  render: function render() {\n    this.initContainer();\n    this.initCanvas();\n    this.initCropBox();\n    this.renderCanvas();\n\n    if (this.cropped) {\n      this.renderCropBox();\n    }\n  },\n  initContainer: function initContainer() {\n    var element = this.element,\n        options = this.options,\n        container = this.container,\n        cropper = this.cropper;\n\n\n    addClass(cropper, CLASS_HIDDEN);\n    removeClass(element, CLASS_HIDDEN);\n\n    var containerData = {\n      width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n      height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n    };\n\n    this.containerData = containerData;\n\n    setStyle(cropper, {\n      width: containerData.width,\n      height: containerData.height\n    });\n\n    addClass(element, CLASS_HIDDEN);\n    removeClass(cropper, CLASS_HIDDEN);\n  },\n\n\n  // Canvas (image wrapper)\n  initCanvas: function initCanvas() {\n    var containerData = this.containerData,\n        imageData = this.imageData;\n    var viewMode = this.options.viewMode;\n\n    var rotated = Math.abs(imageData.rotate) % 180 === 90;\n    var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n    var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n    var aspectRatio = naturalWidth / naturalHeight;\n    var canvasWidth = containerData.width;\n    var canvasHeight = containerData.height;\n\n    if (containerData.height * aspectRatio > containerData.width) {\n      if (viewMode === 3) {\n        canvasWidth = containerData.height * aspectRatio;\n      } else {\n        canvasHeight = containerData.width / aspectRatio;\n      }\n    } else if (viewMode === 3) {\n      canvasHeight = containerData.width / aspectRatio;\n    } else {\n      canvasWidth = containerData.height * aspectRatio;\n    }\n\n    var canvasData = {\n      aspectRatio: aspectRatio,\n      naturalWidth: naturalWidth,\n      naturalHeight: naturalHeight,\n      width: canvasWidth,\n      height: canvasHeight\n    };\n\n    canvasData.left = (containerData.width - canvasWidth) / 2;\n    canvasData.top = (containerData.height - canvasHeight) / 2;\n    canvasData.oldLeft = canvasData.left;\n    canvasData.oldTop = canvasData.top;\n\n    this.canvasData = canvasData;\n    this.limited = viewMode === 1 || viewMode === 2;\n    this.limitCanvas(true, true);\n    this.initialImageData = assign({}, imageData);\n    this.initialCanvasData = assign({}, canvasData);\n  },\n  limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n    var options = this.options,\n        containerData = this.containerData,\n        canvasData = this.canvasData,\n        cropBoxData = this.cropBoxData;\n    var viewMode = options.viewMode;\n    var aspectRatio = canvasData.aspectRatio;\n\n    var cropped = this.cropped && cropBoxData;\n\n    if (sizeLimited) {\n      var minCanvasWidth = Number(options.minCanvasWidth) || 0;\n      var minCanvasHeight = Number(options.minCanvasHeight) || 0;\n\n      if (viewMode > 1) {\n        minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n        minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n\n        if (viewMode === 3) {\n          if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n            minCanvasWidth = minCanvasHeight * aspectRatio;\n          } else {\n            minCanvasHeight = minCanvasWidth / aspectRatio;\n          }\n        }\n      } else if (viewMode > 0) {\n        if (minCanvasWidth) {\n          minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n        } else if (minCanvasHeight) {\n          minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n        } else if (cropped) {\n          minCanvasWidth = cropBoxData.width;\n          minCanvasHeight = cropBoxData.height;\n\n          if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n            minCanvasWidth = minCanvasHeight * aspectRatio;\n          } else {\n            minCanvasHeight = minCanvasWidth / aspectRatio;\n          }\n        }\n      }\n\n      var _getAdjustedSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: minCanvasWidth,\n        height: minCanvasHeight\n      });\n\n      minCanvasWidth = _getAdjustedSizes.width;\n      minCanvasHeight = _getAdjustedSizes.height;\n\n\n      canvasData.minWidth = minCanvasWidth;\n      canvasData.minHeight = minCanvasHeight;\n      canvasData.maxWidth = Infinity;\n      canvasData.maxHeight = Infinity;\n    }\n\n    if (positionLimited) {\n      if (viewMode) {\n        var newCanvasLeft = containerData.width - canvasData.width;\n        var newCanvasTop = containerData.height - canvasData.height;\n\n        canvasData.minLeft = Math.min(0, newCanvasLeft);\n        canvasData.minTop = Math.min(0, newCanvasTop);\n        canvasData.maxLeft = Math.max(0, newCanvasLeft);\n        canvasData.maxTop = Math.max(0, newCanvasTop);\n\n        if (cropped && this.limited) {\n          canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n          canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n          canvasData.maxLeft = cropBoxData.left;\n          canvasData.maxTop = cropBoxData.top;\n\n          if (viewMode === 2) {\n            if (canvasData.width >= containerData.width) {\n              canvasData.minLeft = Math.min(0, newCanvasLeft);\n              canvasData.maxLeft = Math.max(0, newCanvasLeft);\n            }\n\n            if (canvasData.height >= containerData.height) {\n              canvasData.minTop = Math.min(0, newCanvasTop);\n              canvasData.maxTop = Math.max(0, newCanvasTop);\n            }\n          }\n        }\n      } else {\n        canvasData.minLeft = -canvasData.width;\n        canvasData.minTop = -canvasData.height;\n        canvasData.maxLeft = containerData.width;\n        canvasData.maxTop = containerData.height;\n      }\n    }\n  },\n  renderCanvas: function renderCanvas(changed, transformed) {\n    var canvasData = this.canvasData,\n        imageData = this.imageData;\n\n\n    if (transformed) {\n      var _getRotatedSizes = getRotatedSizes({\n        width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n        height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n        degree: imageData.rotate || 0\n      }),\n          naturalWidth = _getRotatedSizes.width,\n          naturalHeight = _getRotatedSizes.height;\n\n      var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n      var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n\n      canvasData.left -= (width - canvasData.width) / 2;\n      canvasData.top -= (height - canvasData.height) / 2;\n      canvasData.width = width;\n      canvasData.height = height;\n      canvasData.aspectRatio = naturalWidth / naturalHeight;\n      canvasData.naturalWidth = naturalWidth;\n      canvasData.naturalHeight = naturalHeight;\n      this.limitCanvas(true, false);\n    }\n\n    if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n      canvasData.left = canvasData.oldLeft;\n    }\n\n    if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n      canvasData.top = canvasData.oldTop;\n    }\n\n    canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n    canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n\n    this.limitCanvas(false, true);\n\n    canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n    canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n    canvasData.oldLeft = canvasData.left;\n    canvasData.oldTop = canvasData.top;\n\n    setStyle(this.canvas, assign({\n      width: canvasData.width,\n      height: canvasData.height\n    }, getTransforms({\n      translateX: canvasData.left,\n      translateY: canvasData.top\n    })));\n\n    this.renderImage(changed);\n\n    if (this.cropped && this.limited) {\n      this.limitCropBox(true, true);\n    }\n  },\n  renderImage: function renderImage(changed) {\n    var canvasData = this.canvasData,\n        imageData = this.imageData;\n\n    var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n    var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n\n    assign(imageData, {\n      width: width,\n      height: height,\n      left: (canvasData.width - width) / 2,\n      top: (canvasData.height - height) / 2\n    });\n    setStyle(this.image, assign({\n      width: imageData.width,\n      height: imageData.height\n    }, getTransforms(assign({\n      translateX: imageData.left,\n      translateY: imageData.top\n    }, imageData))));\n\n    if (changed) {\n      this.output();\n    }\n  },\n  initCropBox: function initCropBox() {\n    var options = this.options,\n        canvasData = this.canvasData;\n\n    var aspectRatio = options.aspectRatio || options.initialAspectRatio;\n    var autoCropArea = Number(options.autoCropArea) || 0.8;\n    var cropBoxData = {\n      width: canvasData.width,\n      height: canvasData.height\n    };\n\n    if (aspectRatio) {\n      if (canvasData.height * aspectRatio > canvasData.width) {\n        cropBoxData.height = cropBoxData.width / aspectRatio;\n      } else {\n        cropBoxData.width = cropBoxData.height * aspectRatio;\n      }\n    }\n\n    this.cropBoxData = cropBoxData;\n    this.limitCropBox(true, true);\n\n    // Initialize auto crop area\n    cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n    cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n\n    // The width/height of auto crop area must large than \"minWidth/Height\"\n    cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n    cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n    cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n    cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n    cropBoxData.oldLeft = cropBoxData.left;\n    cropBoxData.oldTop = cropBoxData.top;\n\n    this.initialCropBoxData = assign({}, cropBoxData);\n  },\n  limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n    var options = this.options,\n        containerData = this.containerData,\n        canvasData = this.canvasData,\n        cropBoxData = this.cropBoxData,\n        limited = this.limited;\n    var aspectRatio = options.aspectRatio;\n\n\n    if (sizeLimited) {\n      var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n      var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n      var maxCropBoxWidth = Math.min(containerData.width, limited ? canvasData.width : containerData.width);\n      var maxCropBoxHeight = Math.min(containerData.height, limited ? canvasData.height : containerData.height);\n\n      // The min/maxCropBoxWidth/Height must be less than container's width/height\n      minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n      minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n\n      if (aspectRatio) {\n        if (minCropBoxWidth && minCropBoxHeight) {\n          if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n        } else if (minCropBoxWidth) {\n          minCropBoxHeight = minCropBoxWidth / aspectRatio;\n        } else if (minCropBoxHeight) {\n          minCropBoxWidth = minCropBoxHeight * aspectRatio;\n        }\n\n        if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n          maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n        } else {\n          maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n        }\n      }\n\n      // The minWidth/Height must be less than maxWidth/Height\n      cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n      cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n      cropBoxData.maxWidth = maxCropBoxWidth;\n      cropBoxData.maxHeight = maxCropBoxHeight;\n    }\n\n    if (positionLimited) {\n      if (limited) {\n        cropBoxData.minLeft = Math.max(0, canvasData.left);\n        cropBoxData.minTop = Math.max(0, canvasData.top);\n        cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n        cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n      } else {\n        cropBoxData.minLeft = 0;\n        cropBoxData.minTop = 0;\n        cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n        cropBoxData.maxTop = containerData.height - cropBoxData.height;\n      }\n    }\n  },\n  renderCropBox: function renderCropBox() {\n    var options = this.options,\n        containerData = this.containerData,\n        cropBoxData = this.cropBoxData;\n\n\n    if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n      cropBoxData.left = cropBoxData.oldLeft;\n    }\n\n    if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n      cropBoxData.top = cropBoxData.oldTop;\n    }\n\n    cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n    cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n\n    this.limitCropBox(false, true);\n\n    cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n    cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n    cropBoxData.oldLeft = cropBoxData.left;\n    cropBoxData.oldTop = cropBoxData.top;\n\n    if (options.movable && options.cropBoxMovable) {\n      // Turn to move the canvas when the crop box is equal to the container\n      setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);\n    }\n\n    setStyle(this.cropBox, assign({\n      width: cropBoxData.width,\n      height: cropBoxData.height\n    }, getTransforms({\n      translateX: cropBoxData.left,\n      translateY: cropBoxData.top\n    })));\n\n    if (this.cropped && this.limited) {\n      this.limitCanvas(true, true);\n    }\n\n    if (!this.disabled) {\n      this.output();\n    }\n  },\n  output: function output() {\n    this.preview();\n    dispatchEvent(this.element, EVENT_CROP, this.getData());\n  }\n};\n\nvar preview = {\n  initPreview: function initPreview() {\n    var crossOrigin = this.crossOrigin;\n    var preview = this.options.preview;\n\n    var url = crossOrigin ? this.crossOriginUrl : this.url;\n    var image = document.createElement('img');\n\n    if (crossOrigin) {\n      image.crossOrigin = crossOrigin;\n    }\n\n    image.src = url;\n    this.viewBox.appendChild(image);\n    this.viewBoxImage = image;\n\n    if (!preview) {\n      return;\n    }\n\n    var previews = preview;\n\n    if (typeof preview === 'string') {\n      previews = this.element.ownerDocument.querySelectorAll(preview);\n    } else if (preview.querySelector) {\n      previews = [preview];\n    }\n\n    this.previews = previews;\n\n    forEach(previews, function (el) {\n      var img = document.createElement('img');\n\n      // Save the original size for recover\n      setData(el, DATA_PREVIEW, {\n        width: el.offsetWidth,\n        height: el.offsetHeight,\n        html: el.innerHTML\n      });\n\n      if (crossOrigin) {\n        img.crossOrigin = crossOrigin;\n      }\n\n      img.src = url;\n\n      /**\n       * Override img element styles\n       * Add `display:block` to avoid margin top issue\n       * Add `height:auto` to override `height` attribute on IE8\n       * (Occur only when margin-top <= -height)\n       */\n      img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n\n      el.innerHTML = '';\n      el.appendChild(img);\n    });\n  },\n  resetPreview: function resetPreview() {\n    forEach(this.previews, function (element) {\n      var data = getData(element, DATA_PREVIEW);\n\n      setStyle(element, {\n        width: data.width,\n        height: data.height\n      });\n\n      element.innerHTML = data.html;\n      removeData(element, DATA_PREVIEW);\n    });\n  },\n  preview: function preview() {\n    var imageData = this.imageData,\n        canvasData = this.canvasData,\n        cropBoxData = this.cropBoxData;\n    var cropBoxWidth = cropBoxData.width,\n        cropBoxHeight = cropBoxData.height;\n    var width = imageData.width,\n        height = imageData.height;\n\n    var left = cropBoxData.left - canvasData.left - imageData.left;\n    var top = cropBoxData.top - canvasData.top - imageData.top;\n\n    if (!this.cropped || this.disabled) {\n      return;\n    }\n\n    setStyle(this.viewBoxImage, assign({\n      width: width,\n      height: height\n    }, getTransforms(assign({\n      translateX: -left,\n      translateY: -top\n    }, imageData))));\n\n    forEach(this.previews, function (element) {\n      var data = getData(element, DATA_PREVIEW);\n      var originalWidth = data.width;\n      var originalHeight = data.height;\n      var newWidth = originalWidth;\n      var newHeight = originalHeight;\n      var ratio = 1;\n\n      if (cropBoxWidth) {\n        ratio = originalWidth / cropBoxWidth;\n        newHeight = cropBoxHeight * ratio;\n      }\n\n      if (cropBoxHeight && newHeight > originalHeight) {\n        ratio = originalHeight / cropBoxHeight;\n        newWidth = cropBoxWidth * ratio;\n        newHeight = originalHeight;\n      }\n\n      setStyle(element, {\n        width: newWidth,\n        height: newHeight\n      });\n\n      setStyle(element.getElementsByTagName('img')[0], assign({\n        width: width * ratio,\n        height: height * ratio\n      }, getTransforms(assign({\n        translateX: -left * ratio,\n        translateY: -top * ratio\n      }, imageData))));\n    });\n  }\n};\n\nvar events = {\n  bind: function bind() {\n    var element = this.element,\n        options = this.options,\n        cropper = this.cropper;\n\n\n    if (isFunction(options.cropstart)) {\n      addListener(element, EVENT_CROP_START, options.cropstart);\n    }\n\n    if (isFunction(options.cropmove)) {\n      addListener(element, EVENT_CROP_MOVE, options.cropmove);\n    }\n\n    if (isFunction(options.cropend)) {\n      addListener(element, EVENT_CROP_END, options.cropend);\n    }\n\n    if (isFunction(options.crop)) {\n      addListener(element, EVENT_CROP, options.crop);\n    }\n\n    if (isFunction(options.zoom)) {\n      addListener(element, EVENT_ZOOM, options.zoom);\n    }\n\n    addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\n\n    if (options.zoomable && options.zoomOnWheel) {\n      addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this));\n    }\n\n    if (options.toggleDragModeOnDblclick) {\n      addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\n    }\n\n    addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\n    addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\n\n    if (options.responsive) {\n      addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));\n    }\n  },\n  unbind: function unbind() {\n    var element = this.element,\n        options = this.options,\n        cropper = this.cropper;\n\n\n    if (isFunction(options.cropstart)) {\n      removeListener(element, EVENT_CROP_START, options.cropstart);\n    }\n\n    if (isFunction(options.cropmove)) {\n      removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n    }\n\n    if (isFunction(options.cropend)) {\n      removeListener(element, EVENT_CROP_END, options.cropend);\n    }\n\n    if (isFunction(options.crop)) {\n      removeListener(element, EVENT_CROP, options.crop);\n    }\n\n    if (isFunction(options.zoom)) {\n      removeListener(element, EVENT_ZOOM, options.zoom);\n    }\n\n    removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);\n\n    if (options.zoomable && options.zoomOnWheel) {\n      removeListener(cropper, EVENT_WHEEL, this.onWheel);\n    }\n\n    if (options.toggleDragModeOnDblclick) {\n      removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);\n    }\n\n    removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);\n    removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);\n\n    if (options.responsive) {\n      removeListener(window, EVENT_RESIZE, this.onResize);\n    }\n  }\n};\n\nvar handlers = {\n  resize: function resize() {\n    var options = this.options,\n        container = this.container,\n        containerData = this.containerData;\n\n    var minContainerWidth = Number(options.minContainerWidth) || 200;\n    var minContainerHeight = Number(options.minContainerHeight) || 100;\n\n    if (this.disabled || containerData.width <= minContainerWidth || containerData.height <= minContainerHeight) {\n      return;\n    }\n\n    var ratio = container.offsetWidth / containerData.width;\n\n    // Resize when width changed or height changed\n    if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n      var canvasData = void 0;\n      var cropBoxData = void 0;\n\n      if (options.restore) {\n        canvasData = this.getCanvasData();\n        cropBoxData = this.getCropBoxData();\n      }\n\n      this.render();\n\n      if (options.restore) {\n        this.setCanvasData(forEach(canvasData, function (n, i) {\n          canvasData[i] = n * ratio;\n        }));\n        this.setCropBoxData(forEach(cropBoxData, function (n, i) {\n          cropBoxData[i] = n * ratio;\n        }));\n      }\n    }\n  },\n  dblclick: function dblclick() {\n    if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {\n      return;\n    }\n\n    this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);\n  },\n  wheel: function wheel(e) {\n    var _this = this;\n\n    var ratio = Number(this.options.wheelZoomRatio) || 0.1;\n    var delta = 1;\n\n    if (this.disabled) {\n      return;\n    }\n\n    e.preventDefault();\n\n    // Limit wheel speed to prevent zoom too fast (#21)\n    if (this.wheeling) {\n      return;\n    }\n\n    this.wheeling = true;\n\n    setTimeout(function () {\n      _this.wheeling = false;\n    }, 50);\n\n    if (e.deltaY) {\n      delta = e.deltaY > 0 ? 1 : -1;\n    } else if (e.wheelDelta) {\n      delta = -e.wheelDelta / 120;\n    } else if (e.detail) {\n      delta = e.detail > 0 ? 1 : -1;\n    }\n\n    this.zoom(-delta * ratio, e);\n  },\n  cropStart: function cropStart(e) {\n    if (this.disabled) {\n      return;\n    }\n\n    var options = this.options,\n        pointers = this.pointers;\n\n    var action = void 0;\n\n    if (e.changedTouches) {\n      // Handle touch event\n      forEach(e.changedTouches, function (touch) {\n        pointers[touch.identifier] = getPointer(touch);\n      });\n    } else {\n      // Handle mouse event and pointer event\n      pointers[e.pointerId || 0] = getPointer(e);\n    }\n\n    if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n      action = ACTION_ZOOM;\n    } else {\n      action = getData(e.target, DATA_ACTION);\n    }\n\n    if (!REGEXP_ACTIONS.test(action)) {\n      return;\n    }\n\n    if (dispatchEvent(this.element, EVENT_CROP_START, {\n      originalEvent: e,\n      action: action\n    }) === false) {\n      return;\n    }\n\n    // This line is required for preventing page zooming in iOS browsers\n    e.preventDefault();\n\n    this.action = action;\n    this.cropping = false;\n\n    if (action === ACTION_CROP) {\n      this.cropping = true;\n      addClass(this.dragBox, CLASS_MODAL);\n    }\n  },\n  cropMove: function cropMove(e) {\n    var action = this.action;\n\n\n    if (this.disabled || !action) {\n      return;\n    }\n\n    var pointers = this.pointers;\n\n\n    e.preventDefault();\n\n    if (dispatchEvent(this.element, EVENT_CROP_MOVE, {\n      originalEvent: e,\n      action: action\n    }) === false) {\n      return;\n    }\n\n    if (e.changedTouches) {\n      forEach(e.changedTouches, function (touch) {\n        assign(pointers[touch.identifier], getPointer(touch, true));\n      });\n    } else {\n      assign(pointers[e.pointerId || 0], getPointer(e, true));\n    }\n\n    this.change(e);\n  },\n  cropEnd: function cropEnd(e) {\n    if (this.disabled) {\n      return;\n    }\n\n    var action = this.action,\n        pointers = this.pointers;\n\n\n    if (e.changedTouches) {\n      forEach(e.changedTouches, function (touch) {\n        delete pointers[touch.identifier];\n      });\n    } else {\n      delete pointers[e.pointerId || 0];\n    }\n\n    if (!action) {\n      return;\n    }\n\n    e.preventDefault();\n\n    if (!Object.keys(pointers).length) {\n      this.action = '';\n    }\n\n    if (this.cropping) {\n      this.cropping = false;\n      toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);\n    }\n\n    dispatchEvent(this.element, EVENT_CROP_END, {\n      originalEvent: e,\n      action: action\n    });\n  }\n};\n\nvar change = {\n  change: function change(e) {\n    var options = this.options,\n        canvasData = this.canvasData,\n        containerData = this.containerData,\n        cropBoxData = this.cropBoxData,\n        pointers = this.pointers;\n    var action = this.action;\n    var aspectRatio = options.aspectRatio;\n    var left = cropBoxData.left,\n        top = cropBoxData.top,\n        width = cropBoxData.width,\n        height = cropBoxData.height;\n\n    var right = left + width;\n    var bottom = top + height;\n    var minLeft = 0;\n    var minTop = 0;\n    var maxWidth = containerData.width;\n    var maxHeight = containerData.height;\n    var renderable = true;\n    var offset = void 0;\n\n    // Locking aspect ratio in \"free mode\" by holding shift key\n    if (!aspectRatio && e.shiftKey) {\n      aspectRatio = width && height ? width / height : 1;\n    }\n\n    if (this.limited) {\n      minLeft = cropBoxData.minLeft;\n      minTop = cropBoxData.minTop;\n\n      maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n      maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n    }\n\n    var pointer = pointers[Object.keys(pointers)[0]];\n    var range = {\n      x: pointer.endX - pointer.startX,\n      y: pointer.endY - pointer.startY\n    };\n    var check = function check(side) {\n      switch (side) {\n        case ACTION_EAST:\n          if (right + range.x > maxWidth) {\n            range.x = maxWidth - right;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (left + range.x < minLeft) {\n            range.x = minLeft - left;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (top + range.y < minTop) {\n            range.y = minTop - top;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (bottom + range.y > maxHeight) {\n            range.y = maxHeight - bottom;\n          }\n\n          break;\n\n        default:\n      }\n    };\n\n    switch (action) {\n      // Move crop box\n      case ACTION_ALL:\n        left += range.x;\n        top += range.y;\n        break;\n\n      // Resize crop box\n      case ACTION_EAST:\n        if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n          renderable = false;\n          break;\n        }\n\n        check(ACTION_EAST);\n        width += range.x;\n\n        if (width < 0) {\n          action = ACTION_WEST;\n          width = -width;\n          left -= width;\n        }\n\n        if (aspectRatio) {\n          height = width / aspectRatio;\n          top += (cropBoxData.height - height) / 2;\n        }\n\n        break;\n\n      case ACTION_NORTH:\n        if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n          renderable = false;\n          break;\n        }\n\n        check(ACTION_NORTH);\n        height -= range.y;\n        top += range.y;\n\n        if (height < 0) {\n          action = ACTION_SOUTH;\n          height = -height;\n          top -= height;\n        }\n\n        if (aspectRatio) {\n          width = height * aspectRatio;\n          left += (cropBoxData.width - width) / 2;\n        }\n\n        break;\n\n      case ACTION_WEST:\n        if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n          renderable = false;\n          break;\n        }\n\n        check(ACTION_WEST);\n        width -= range.x;\n        left += range.x;\n\n        if (width < 0) {\n          action = ACTION_EAST;\n          width = -width;\n          left -= width;\n        }\n\n        if (aspectRatio) {\n          height = width / aspectRatio;\n          top += (cropBoxData.height - height) / 2;\n        }\n\n        break;\n\n      case ACTION_SOUTH:\n        if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n          renderable = false;\n          break;\n        }\n\n        check(ACTION_SOUTH);\n        height += range.y;\n\n        if (height < 0) {\n          action = ACTION_NORTH;\n          height = -height;\n          top -= height;\n        }\n\n        if (aspectRatio) {\n          width = height * aspectRatio;\n          left += (cropBoxData.width - width) / 2;\n        }\n\n        break;\n\n      case ACTION_NORTH_EAST:\n        if (aspectRatio) {\n          if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_NORTH);\n          height -= range.y;\n          top += range.y;\n          width = height * aspectRatio;\n        } else {\n          check(ACTION_NORTH);\n          check(ACTION_EAST);\n\n          if (range.x >= 0) {\n            if (right < maxWidth) {\n              width += range.x;\n            } else if (range.y <= 0 && top <= minTop) {\n              renderable = false;\n            }\n          } else {\n            width += range.x;\n          }\n\n          if (range.y <= 0) {\n            if (top > minTop) {\n              height -= range.y;\n              top += range.y;\n            }\n          } else {\n            height -= range.y;\n            top += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          action = ACTION_SOUTH_WEST;\n          height = -height;\n          width = -width;\n          top -= height;\n          left -= width;\n        } else if (width < 0) {\n          action = ACTION_NORTH_WEST;\n          width = -width;\n          left -= width;\n        } else if (height < 0) {\n          action = ACTION_SOUTH_EAST;\n          height = -height;\n          top -= height;\n        }\n\n        break;\n\n      case ACTION_NORTH_WEST:\n        if (aspectRatio) {\n          if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_NORTH);\n          height -= range.y;\n          top += range.y;\n          width = height * aspectRatio;\n          left += cropBoxData.width - width;\n        } else {\n          check(ACTION_NORTH);\n          check(ACTION_WEST);\n\n          if (range.x <= 0) {\n            if (left > minLeft) {\n              width -= range.x;\n              left += range.x;\n            } else if (range.y <= 0 && top <= minTop) {\n              renderable = false;\n            }\n          } else {\n            width -= range.x;\n            left += range.x;\n          }\n\n          if (range.y <= 0) {\n            if (top > minTop) {\n              height -= range.y;\n              top += range.y;\n            }\n          } else {\n            height -= range.y;\n            top += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          action = ACTION_SOUTH_EAST;\n          height = -height;\n          width = -width;\n          top -= height;\n          left -= width;\n        } else if (width < 0) {\n          action = ACTION_NORTH_EAST;\n          width = -width;\n          left -= width;\n        } else if (height < 0) {\n          action = ACTION_SOUTH_WEST;\n          height = -height;\n          top -= height;\n        }\n\n        break;\n\n      case ACTION_SOUTH_WEST:\n        if (aspectRatio) {\n          if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_WEST);\n          width -= range.x;\n          left += range.x;\n          height = width / aspectRatio;\n        } else {\n          check(ACTION_SOUTH);\n          check(ACTION_WEST);\n\n          if (range.x <= 0) {\n            if (left > minLeft) {\n              width -= range.x;\n              left += range.x;\n            } else if (range.y >= 0 && bottom >= maxHeight) {\n              renderable = false;\n            }\n          } else {\n            width -= range.x;\n            left += range.x;\n          }\n\n          if (range.y >= 0) {\n            if (bottom < maxHeight) {\n              height += range.y;\n            }\n          } else {\n            height += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          action = ACTION_NORTH_EAST;\n          height = -height;\n          width = -width;\n          top -= height;\n          left -= width;\n        } else if (width < 0) {\n          action = ACTION_SOUTH_EAST;\n          width = -width;\n          left -= width;\n        } else if (height < 0) {\n          action = ACTION_NORTH_WEST;\n          height = -height;\n          top -= height;\n        }\n\n        break;\n\n      case ACTION_SOUTH_EAST:\n        if (aspectRatio) {\n          if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_EAST);\n          width += range.x;\n          height = width / aspectRatio;\n        } else {\n          check(ACTION_SOUTH);\n          check(ACTION_EAST);\n\n          if (range.x >= 0) {\n            if (right < maxWidth) {\n              width += range.x;\n            } else if (range.y >= 0 && bottom >= maxHeight) {\n              renderable = false;\n            }\n          } else {\n            width += range.x;\n          }\n\n          if (range.y >= 0) {\n            if (bottom < maxHeight) {\n              height += range.y;\n            }\n          } else {\n            height += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          action = ACTION_NORTH_WEST;\n          height = -height;\n          width = -width;\n          top -= height;\n          left -= width;\n        } else if (width < 0) {\n          action = ACTION_SOUTH_WEST;\n          width = -width;\n          left -= width;\n        } else if (height < 0) {\n          action = ACTION_NORTH_EAST;\n          height = -height;\n          top -= height;\n        }\n\n        break;\n\n      // Move canvas\n      case ACTION_MOVE:\n        this.move(range.x, range.y);\n        renderable = false;\n        break;\n\n      // Zoom canvas\n      case ACTION_ZOOM:\n        this.zoom(getMaxZoomRatio(pointers), e);\n        renderable = false;\n        break;\n\n      // Create crop box\n      case ACTION_CROP:\n        if (!range.x || !range.y) {\n          renderable = false;\n          break;\n        }\n\n        offset = getOffset(this.cropper);\n        left = pointer.startX - offset.left;\n        top = pointer.startY - offset.top;\n        width = cropBoxData.minWidth;\n        height = cropBoxData.minHeight;\n\n        if (range.x > 0) {\n          action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n        } else if (range.x < 0) {\n          left -= width;\n          action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n        }\n\n        if (range.y < 0) {\n          top -= height;\n        }\n\n        // Show the crop box if is hidden\n        if (!this.cropped) {\n          removeClass(this.cropBox, CLASS_HIDDEN);\n          this.cropped = true;\n\n          if (this.limited) {\n            this.limitCropBox(true, true);\n          }\n        }\n\n        break;\n\n      default:\n    }\n\n    if (renderable) {\n      cropBoxData.width = width;\n      cropBoxData.height = height;\n      cropBoxData.left = left;\n      cropBoxData.top = top;\n      this.action = action;\n      this.renderCropBox();\n    }\n\n    // Override\n    forEach(pointers, function (p) {\n      p.startX = p.endX;\n      p.startY = p.endY;\n    });\n  }\n};\n\nvar methods = {\n  // Show the crop box manually\n  crop: function crop() {\n    if (this.ready && !this.cropped && !this.disabled) {\n      this.cropped = true;\n      this.limitCropBox(true, true);\n\n      if (this.options.modal) {\n        addClass(this.dragBox, CLASS_MODAL);\n      }\n\n      removeClass(this.cropBox, CLASS_HIDDEN);\n      this.setCropBoxData(this.initialCropBoxData);\n    }\n\n    return this;\n  },\n\n\n  // Reset the image and crop box to their initial states\n  reset: function reset() {\n    if (this.ready && !this.disabled) {\n      this.imageData = assign({}, this.initialImageData);\n      this.canvasData = assign({}, this.initialCanvasData);\n      this.cropBoxData = assign({}, this.initialCropBoxData);\n      this.renderCanvas();\n\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    }\n\n    return this;\n  },\n\n\n  // Clear the crop box\n  clear: function clear() {\n    if (this.cropped && !this.disabled) {\n      assign(this.cropBoxData, {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      });\n\n      this.cropped = false;\n      this.renderCropBox();\n      this.limitCanvas(true, true);\n\n      // Render canvas after crop box rendered\n      this.renderCanvas();\n      removeClass(this.dragBox, CLASS_MODAL);\n      addClass(this.cropBox, CLASS_HIDDEN);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Replace the image's src and rebuild the cropper\n   * @param {string} url - The new URL.\n   * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.\n   * @returns {Cropper} this\n   */\n  replace: function replace(url) {\n    var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!this.disabled && url) {\n      if (this.isImg) {\n        this.element.src = url;\n      }\n\n      if (hasSameSize) {\n        this.url = url;\n        this.image.src = url;\n\n        if (this.ready) {\n          this.viewBoxImage.src = url;\n\n          forEach(this.previews, function (element) {\n            element.getElementsByTagName('img')[0].src = url;\n          });\n        }\n      } else {\n        if (this.isImg) {\n          this.replaced = true;\n        }\n\n        this.options.data = null;\n        this.uncreate();\n        this.load(url);\n      }\n    }\n\n    return this;\n  },\n\n\n  // Enable (unfreeze) the cropper\n  enable: function enable() {\n    if (this.ready && this.disabled) {\n      this.disabled = false;\n      removeClass(this.cropper, CLASS_DISABLED);\n    }\n\n    return this;\n  },\n\n\n  // Disable (freeze) the cropper\n  disable: function disable() {\n    if (this.ready && !this.disabled) {\n      this.disabled = true;\n      addClass(this.cropper, CLASS_DISABLED);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Destroy the cropper and remove the instance from the image\n   * @returns {Cropper} this\n   */\n  destroy: function destroy() {\n    var element = this.element;\n\n\n    if (!getData(element, NAMESPACE)) {\n      return this;\n    }\n\n    if (this.isImg && this.replaced) {\n      element.src = this.originalUrl;\n    }\n\n    this.uncreate();\n    removeData(element, NAMESPACE);\n\n    return this;\n  },\n\n\n  /**\n   * Move the canvas with relative offsets\n   * @param {number} offsetX - The relative offset distance on the x-axis.\n   * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.\n   * @returns {Cropper} this\n   */\n  move: function move(offsetX) {\n    var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;\n    var _canvasData = this.canvasData,\n        left = _canvasData.left,\n        top = _canvasData.top;\n\n\n    return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n  },\n\n\n  /**\n   * Move the canvas to an absolute point\n   * @param {number} x - The x-axis coordinate.\n   * @param {number} [y=x] - The y-axis coordinate.\n   * @returns {Cropper} this\n   */\n  moveTo: function moveTo(x) {\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n    var canvasData = this.canvasData;\n\n    var changed = false;\n\n    x = Number(x);\n    y = Number(y);\n\n    if (this.ready && !this.disabled && this.options.movable) {\n      if (isNumber(x)) {\n        canvasData.left = x;\n        changed = true;\n      }\n\n      if (isNumber(y)) {\n        canvasData.top = y;\n        changed = true;\n      }\n\n      if (changed) {\n        this.renderCanvas(true);\n      }\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Zoom the canvas with a relative ratio\n   * @param {number} ratio - The target ratio.\n   * @param {Event} _originalEvent - The original event if any.\n   * @returns {Cropper} this\n   */\n  zoom: function zoom(ratio, _originalEvent) {\n    var canvasData = this.canvasData;\n\n\n    ratio = Number(ratio);\n\n    if (ratio < 0) {\n      ratio = 1 / (1 - ratio);\n    } else {\n      ratio = 1 + ratio;\n    }\n\n    return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n  },\n\n\n  /**\n   * Zoom the canvas to an absolute ratio\n   * @param {number} ratio - The target ratio.\n   * @param {Object} pivot - The zoom pivot point coordinate.\n   * @param {Event} _originalEvent - The original event if any.\n   * @returns {Cropper} this\n   */\n  zoomTo: function zoomTo(ratio, pivot, _originalEvent) {\n    var options = this.options,\n        canvasData = this.canvasData;\n    var width = canvasData.width,\n        height = canvasData.height,\n        naturalWidth = canvasData.naturalWidth,\n        naturalHeight = canvasData.naturalHeight;\n\n\n    ratio = Number(ratio);\n\n    if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n      var newWidth = naturalWidth * ratio;\n      var newHeight = naturalHeight * ratio;\n\n      if (dispatchEvent(this.element, EVENT_ZOOM, {\n        ratio: ratio,\n        oldRatio: width / naturalWidth,\n        originalEvent: _originalEvent\n      }) === false) {\n        return this;\n      }\n\n      if (_originalEvent) {\n        var pointers = this.pointers;\n\n        var offset = getOffset(this.cropper);\n        var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\n          pageX: _originalEvent.pageX,\n          pageY: _originalEvent.pageY\n        };\n\n        // Zoom from the triggering point of the event\n        canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n        canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n      } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {\n        canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n        canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n      } else {\n        // Zoom from the center of the canvas\n        canvasData.left -= (newWidth - width) / 2;\n        canvasData.top -= (newHeight - height) / 2;\n      }\n\n      canvasData.width = newWidth;\n      canvasData.height = newHeight;\n      this.renderCanvas(true);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Rotate the canvas with a relative degree\n   * @param {number} degree - The rotate degree.\n   * @returns {Cropper} this\n   */\n  rotate: function rotate(degree) {\n    return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n  },\n\n\n  /**\n   * Rotate the canvas to an absolute degree\n   * @param {number} degree - The rotate degree.\n   * @returns {Cropper} this\n   */\n  rotateTo: function rotateTo(degree) {\n    degree = Number(degree);\n\n    if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n      this.imageData.rotate = degree % 360;\n      this.renderCanvas(true, true);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Scale the image on the x-axis.\n   * @param {number} scaleX - The scale ratio on the x-axis.\n   * @returns {Cropper} this\n   */\n  scaleX: function scaleX(_scaleX) {\n    var scaleY = this.imageData.scaleY;\n\n\n    return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n  },\n\n\n  /**\n   * Scale the image on the y-axis.\n   * @param {number} scaleY - The scale ratio on the y-axis.\n   * @returns {Cropper} this\n   */\n  scaleY: function scaleY(_scaleY) {\n    var scaleX = this.imageData.scaleX;\n\n\n    return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n  },\n\n\n  /**\n   * Scale the image\n   * @param {number} scaleX - The scale ratio on the x-axis.\n   * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.\n   * @returns {Cropper} this\n   */\n  scale: function scale(scaleX) {\n    var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n    var imageData = this.imageData;\n\n    var transformed = false;\n\n    scaleX = Number(scaleX);\n    scaleY = Number(scaleY);\n\n    if (this.ready && !this.disabled && this.options.scalable) {\n      if (isNumber(scaleX)) {\n        imageData.scaleX = scaleX;\n        transformed = true;\n      }\n\n      if (isNumber(scaleY)) {\n        imageData.scaleY = scaleY;\n        transformed = true;\n      }\n\n      if (transformed) {\n        this.renderCanvas(true, true);\n      }\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Get the cropped area position and size data (base on the original image)\n   * @param {boolean} [rounded=false] - Indicate if round the data values or not.\n   * @returns {Object} The result cropped data.\n   */\n  getData: function getData$$1() {\n    var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var options = this.options,\n        imageData = this.imageData,\n        canvasData = this.canvasData,\n        cropBoxData = this.cropBoxData;\n\n    var data = void 0;\n\n    if (this.ready && this.cropped) {\n      data = {\n        x: cropBoxData.left - canvasData.left,\n        y: cropBoxData.top - canvasData.top,\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      };\n\n      var ratio = imageData.width / imageData.naturalWidth;\n\n      forEach(data, function (n, i) {\n        data[i] = n / ratio;\n      });\n\n      if (rounded) {\n        // In case rounding off leads to extra 1px in right or bottom border\n        // we should round the top-left corner and the dimension (#343).\n        var bottom = Math.round(data.y + data.height);\n        var right = Math.round(data.x + data.width);\n\n        data.x = Math.round(data.x);\n        data.y = Math.round(data.y);\n        data.width = right - data.x;\n        data.height = bottom - data.y;\n      }\n    } else {\n      data = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n\n    if (options.rotatable) {\n      data.rotate = imageData.rotate || 0;\n    }\n\n    if (options.scalable) {\n      data.scaleX = imageData.scaleX || 1;\n      data.scaleY = imageData.scaleY || 1;\n    }\n\n    return data;\n  },\n\n\n  /**\n   * Set the cropped area position and size with new data\n   * @param {Object} data - The new data.\n   * @returns {Cropper} this\n   */\n  setData: function setData$$1(data) {\n    var options = this.options,\n        imageData = this.imageData,\n        canvasData = this.canvasData;\n\n    var cropBoxData = {};\n\n    if (this.ready && !this.disabled && isPlainObject(data)) {\n      var transformed = false;\n\n      if (options.rotatable) {\n        if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n          imageData.rotate = data.rotate;\n          transformed = true;\n        }\n      }\n\n      if (options.scalable) {\n        if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n          imageData.scaleX = data.scaleX;\n          transformed = true;\n        }\n\n        if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n          imageData.scaleY = data.scaleY;\n          transformed = true;\n        }\n      }\n\n      if (transformed) {\n        this.renderCanvas(true, true);\n      }\n\n      var ratio = imageData.width / imageData.naturalWidth;\n\n      if (isNumber(data.x)) {\n        cropBoxData.left = data.x * ratio + canvasData.left;\n      }\n\n      if (isNumber(data.y)) {\n        cropBoxData.top = data.y * ratio + canvasData.top;\n      }\n\n      if (isNumber(data.width)) {\n        cropBoxData.width = data.width * ratio;\n      }\n\n      if (isNumber(data.height)) {\n        cropBoxData.height = data.height * ratio;\n      }\n\n      this.setCropBoxData(cropBoxData);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Get the container size data.\n   * @returns {Object} The result container data.\n   */\n  getContainerData: function getContainerData() {\n    return this.ready ? assign({}, this.containerData) : {};\n  },\n\n\n  /**\n   * Get the image position and size data.\n   * @returns {Object} The result image data.\n   */\n  getImageData: function getImageData() {\n    return this.sized ? assign({}, this.imageData) : {};\n  },\n\n\n  /**\n   * Get the canvas position and size data.\n   * @returns {Object} The result canvas data.\n   */\n  getCanvasData: function getCanvasData() {\n    var canvasData = this.canvasData;\n\n    var data = {};\n\n    if (this.ready) {\n      forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\n        data[n] = canvasData[n];\n      });\n    }\n\n    return data;\n  },\n\n\n  /**\n   * Set the canvas position and size with new data.\n   * @param {Object} data - The new canvas data.\n   * @returns {Cropper} this\n   */\n  setCanvasData: function setCanvasData(data) {\n    var canvasData = this.canvasData;\n    var aspectRatio = canvasData.aspectRatio;\n\n\n    if (this.ready && !this.disabled && isPlainObject(data)) {\n      if (isNumber(data.left)) {\n        canvasData.left = data.left;\n      }\n\n      if (isNumber(data.top)) {\n        canvasData.top = data.top;\n      }\n\n      if (isNumber(data.width)) {\n        canvasData.width = data.width;\n        canvasData.height = data.width / aspectRatio;\n      } else if (isNumber(data.height)) {\n        canvasData.height = data.height;\n        canvasData.width = data.height * aspectRatio;\n      }\n\n      this.renderCanvas(true);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Get the crop box position and size data.\n   * @returns {Object} The result crop box data.\n   */\n  getCropBoxData: function getCropBoxData() {\n    var cropBoxData = this.cropBoxData;\n\n    var data = void 0;\n\n    if (this.ready && this.cropped) {\n      data = {\n        left: cropBoxData.left,\n        top: cropBoxData.top,\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      };\n    }\n\n    return data || {};\n  },\n\n\n  /**\n   * Set the crop box position and size with new data.\n   * @param {Object} data - The new crop box data.\n   * @returns {Cropper} this\n   */\n  setCropBoxData: function setCropBoxData(data) {\n    var cropBoxData = this.cropBoxData;\n    var aspectRatio = this.options.aspectRatio;\n\n    var widthChanged = void 0;\n    var heightChanged = void 0;\n\n    if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {\n      if (isNumber(data.left)) {\n        cropBoxData.left = data.left;\n      }\n\n      if (isNumber(data.top)) {\n        cropBoxData.top = data.top;\n      }\n\n      if (isNumber(data.width) && data.width !== cropBoxData.width) {\n        widthChanged = true;\n        cropBoxData.width = data.width;\n      }\n\n      if (isNumber(data.height) && data.height !== cropBoxData.height) {\n        heightChanged = true;\n        cropBoxData.height = data.height;\n      }\n\n      if (aspectRatio) {\n        if (widthChanged) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else if (heightChanged) {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n\n      this.renderCropBox();\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Get a canvas drawn the cropped image.\n   * @param {Object} [options={}] - The config options.\n   * @returns {HTMLCanvasElement} - The result canvas.\n   */\n  getCroppedCanvas: function getCroppedCanvas() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!this.ready || !window.HTMLCanvasElement) {\n      return null;\n    }\n\n    var canvasData = this.canvasData;\n\n    var source = getSourceCanvas(this.image, this.imageData, canvasData, options);\n\n    // Returns the source canvas if it is not cropped.\n    if (!this.cropped) {\n      return source;\n    }\n\n    var _getData = this.getData(),\n        initialX = _getData.x,\n        initialY = _getData.y,\n        initialWidth = _getData.width,\n        initialHeight = _getData.height;\n\n    var ratio = source.width / Math.floor(canvasData.naturalWidth);\n\n    if (ratio !== 1) {\n      initialX *= ratio;\n      initialY *= ratio;\n      initialWidth *= ratio;\n      initialHeight *= ratio;\n    }\n\n    var aspectRatio = initialWidth / initialHeight;\n    var maxSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: options.maxWidth || Infinity,\n      height: options.maxHeight || Infinity\n    });\n    var minSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: options.minWidth || 0,\n      height: options.minHeight || 0\n    }, 'cover');\n\n    var _getAdjustedSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: options.width || (ratio !== 1 ? source.width : initialWidth),\n      height: options.height || (ratio !== 1 ? source.height : initialHeight)\n    }),\n        width = _getAdjustedSizes.width,\n        height = _getAdjustedSizes.height;\n\n    width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n    height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n\n    canvas.width = normalizeDecimalNumber(width);\n    canvas.height = normalizeDecimalNumber(height);\n\n    context.fillStyle = options.fillColor || 'transparent';\n    context.fillRect(0, 0, width, height);\n\n    var _options$imageSmoothi = options.imageSmoothingEnabled,\n        imageSmoothingEnabled = _options$imageSmoothi === undefined ? true : _options$imageSmoothi,\n        imageSmoothingQuality = options.imageSmoothingQuality;\n\n\n    context.imageSmoothingEnabled = imageSmoothingEnabled;\n\n    if (imageSmoothingQuality) {\n      context.imageSmoothingQuality = imageSmoothingQuality;\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n    var sourceWidth = source.width;\n    var sourceHeight = source.height;\n\n    // Source canvas parameters\n    var srcX = initialX;\n    var srcY = initialY;\n    var srcWidth = void 0;\n    var srcHeight = void 0;\n\n    // Destination canvas parameters\n    var dstX = void 0;\n    var dstY = void 0;\n    var dstWidth = void 0;\n    var dstHeight = void 0;\n\n    if (srcX <= -initialWidth || srcX > sourceWidth) {\n      srcX = 0;\n      srcWidth = 0;\n      dstX = 0;\n      dstWidth = 0;\n    } else if (srcX <= 0) {\n      dstX = -srcX;\n      srcX = 0;\n      srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n      dstWidth = srcWidth;\n    } else if (srcX <= sourceWidth) {\n      dstX = 0;\n      srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n      dstWidth = srcWidth;\n    }\n\n    if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n      srcY = 0;\n      srcHeight = 0;\n      dstY = 0;\n      dstHeight = 0;\n    } else if (srcY <= 0) {\n      dstY = -srcY;\n      srcY = 0;\n      srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n      dstHeight = srcHeight;\n    } else if (srcY <= sourceHeight) {\n      dstY = 0;\n      srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n      dstHeight = srcHeight;\n    }\n\n    var params = [srcX, srcY, srcWidth, srcHeight];\n\n    // Avoid \"IndexSizeError\"\n    if (dstWidth > 0 && dstHeight > 0) {\n      var scale = width / initialWidth;\n\n      params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n    }\n\n    // All the numerical parameters should be integer for `drawImage`\n    // https://github.com/fengyuanchen/cropper/issues/476\n    context.drawImage.apply(context, [source].concat(toConsumableArray(params.map(function (param) {\n      return Math.floor(normalizeDecimalNumber(param));\n    }))));\n\n    return canvas;\n  },\n\n\n  /**\n   * Change the aspect ratio of the crop box.\n   * @param {number} aspectRatio - The new aspect ratio.\n   * @returns {Cropper} this\n   */\n  setAspectRatio: function setAspectRatio(aspectRatio) {\n    var options = this.options;\n\n\n    if (!this.disabled && !isUndefined(aspectRatio)) {\n      // 0 -> NaN\n      options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n\n      if (this.ready) {\n        this.initCropBox();\n\n        if (this.cropped) {\n          this.renderCropBox();\n        }\n      }\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Change the drag mode.\n   * @param {string} mode - The new drag mode.\n   * @returns {Cropper} this\n   */\n  setDragMode: function setDragMode(mode) {\n    var options = this.options,\n        dragBox = this.dragBox,\n        face = this.face;\n\n\n    if (this.ready && !this.disabled) {\n      var croppable = mode === DRAG_MODE_CROP;\n      var movable = options.movable && mode === DRAG_MODE_MOVE;\n\n      mode = croppable || movable ? mode : DRAG_MODE_NONE;\n\n      options.dragMode = mode;\n      setData(dragBox, DATA_ACTION, mode);\n      toggleClass(dragBox, CLASS_CROP, croppable);\n      toggleClass(dragBox, CLASS_MOVE, movable);\n\n      if (!options.cropBoxMovable) {\n        // Sync drag mode to crop box when it is not movable\n        setData(face, DATA_ACTION, mode);\n        toggleClass(face, CLASS_CROP, croppable);\n        toggleClass(face, CLASS_MOVE, movable);\n      }\n    }\n\n    return this;\n  }\n};\n\nvar AnotherCropper = WINDOW.Cropper;\n\nvar Cropper = function () {\n  /**\n   * Create a new Cropper.\n   * @param {Element} element - The target element for cropping.\n   * @param {Object} [options={}] - The configuration options.\n   */\n  function Cropper(element) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, Cropper);\n\n    if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {\n      throw new Error('The first argument is required and must be an <img> or <canvas> element.');\n    }\n\n    this.element = element;\n    this.options = assign({}, DEFAULTS, isPlainObject(options) && options);\n    this.cropped = false;\n    this.disabled = false;\n    this.pointers = {};\n    this.ready = false;\n    this.reloading = false;\n    this.replaced = false;\n    this.sized = false;\n    this.sizing = false;\n    this.init();\n  }\n\n  createClass(Cropper, [{\n    key: 'init',\n    value: function init() {\n      var element = this.element;\n\n      var tagName = element.tagName.toLowerCase();\n      var url = void 0;\n\n      if (getData(element, NAMESPACE)) {\n        return;\n      }\n\n      setData(element, NAMESPACE, this);\n\n      if (tagName === 'img') {\n        this.isImg = true;\n\n        // e.g.: \"img/picture.jpg\"\n        url = element.getAttribute('src') || '';\n        this.originalUrl = url;\n\n        // Stop when it's a blank image\n        if (!url) {\n          return;\n        }\n\n        // e.g.: \"http://example.com/img/picture.jpg\"\n        url = element.src;\n      } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n        url = element.toDataURL();\n      }\n\n      this.load(url);\n    }\n  }, {\n    key: 'load',\n    value: function load(url) {\n      var _this = this;\n\n      if (!url) {\n        return;\n      }\n\n      this.url = url;\n      this.imageData = {};\n\n      var element = this.element,\n          options = this.options;\n\n\n      if (!options.rotatable && !options.scalable) {\n        options.checkOrientation = false;\n      }\n\n      if (!options.checkOrientation || !window.ArrayBuffer) {\n        this.clone();\n        return;\n      }\n\n      // XMLHttpRequest disallows to open a Data URL in some browsers like IE11 and Safari\n      if (REGEXP_DATA_URL.test(url)) {\n        if (REGEXP_DATA_URL_JPEG.test(url)) {\n          this.read(dataURLToArrayBuffer(url));\n        } else {\n          this.clone();\n        }\n\n        return;\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      this.reloading = true;\n      this.xhr = xhr;\n\n      var done = function done() {\n        _this.reloading = false;\n        _this.xhr = null;\n      };\n\n      xhr.ontimeout = done;\n      xhr.onabort = done;\n      xhr.onerror = function () {\n        done();\n        _this.clone();\n      };\n\n      xhr.onload = function () {\n        done();\n        _this.read(xhr.response);\n      };\n\n      // Bust cache when there is a \"crossOrigin\" property\n      if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n        url = addTimestamp(url);\n      }\n\n      xhr.open('get', url);\n      xhr.responseType = 'arraybuffer';\n      xhr.withCredentials = element.crossOrigin === 'use-credentials';\n      xhr.send();\n    }\n  }, {\n    key: 'read',\n    value: function read(arrayBuffer) {\n      var options = this.options,\n          imageData = this.imageData;\n\n      var orientation = getOrientation(arrayBuffer);\n      var rotate = 0;\n      var scaleX = 1;\n      var scaleY = 1;\n\n      if (orientation > 1) {\n        this.url = arrayBufferToDataURL(arrayBuffer, 'image/jpeg');\n\n        var _parseOrientation = parseOrientation(orientation);\n\n        rotate = _parseOrientation.rotate;\n        scaleX = _parseOrientation.scaleX;\n        scaleY = _parseOrientation.scaleY;\n      }\n\n      if (options.rotatable) {\n        imageData.rotate = rotate;\n      }\n\n      if (options.scalable) {\n        imageData.scaleX = scaleX;\n        imageData.scaleY = scaleY;\n      }\n\n      this.clone();\n    }\n  }, {\n    key: 'clone',\n    value: function clone() {\n      var element = this.element,\n          url = this.url;\n\n      var crossOrigin = void 0;\n      var crossOriginUrl = void 0;\n\n      if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {\n        crossOrigin = element.crossOrigin;\n\n\n        if (crossOrigin) {\n          crossOriginUrl = url;\n        } else {\n          crossOrigin = 'anonymous';\n\n          // Bust cache when there is not a \"crossOrigin\" property\n          crossOriginUrl = addTimestamp(url);\n        }\n      }\n\n      this.crossOrigin = crossOrigin;\n      this.crossOriginUrl = crossOriginUrl;\n\n      var image = document.createElement('img');\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.src = crossOriginUrl || url;\n      this.image = image;\n      image.onload = this.start.bind(this);\n      image.onerror = this.stop.bind(this);\n      addClass(image, CLASS_HIDE);\n      element.parentNode.insertBefore(image, element.nextSibling);\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this2 = this;\n\n      var image = this.isImg ? this.element : this.image;\n\n      image.onload = null;\n      image.onerror = null;\n      this.sizing = true;\n\n      var IS_SAFARI = WINDOW.navigator && /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i.test(WINDOW.navigator.userAgent);\n      var done = function done(naturalWidth, naturalHeight) {\n        assign(_this2.imageData, {\n          naturalWidth: naturalWidth,\n          naturalHeight: naturalHeight,\n          aspectRatio: naturalWidth / naturalHeight\n        });\n        _this2.sizing = false;\n        _this2.sized = true;\n        _this2.build();\n      };\n\n      // Modern browsers (except Safari)\n      if (image.naturalWidth && !IS_SAFARI) {\n        done(image.naturalWidth, image.naturalHeight);\n        return;\n      }\n\n      var sizingImage = document.createElement('img');\n      var body = document.body || document.documentElement;\n\n      this.sizingImage = sizingImage;\n\n      sizingImage.onload = function () {\n        done(sizingImage.width, sizingImage.height);\n\n        if (!IS_SAFARI) {\n          body.removeChild(sizingImage);\n        }\n      };\n\n      sizingImage.src = image.src;\n\n      // iOS Safari will convert the image automatically\n      // with its orientation once append it into DOM (#279)\n      if (!IS_SAFARI) {\n        sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';\n        body.appendChild(sizingImage);\n      }\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var image = this.image;\n\n\n      image.onload = null;\n      image.onerror = null;\n      image.parentNode.removeChild(image);\n      this.image = null;\n    }\n  }, {\n    key: 'build',\n    value: function build() {\n      if (!this.sized || this.ready) {\n        return;\n      }\n\n      var element = this.element,\n          options = this.options,\n          image = this.image;\n\n      // Create cropper elements\n\n      var container = element.parentNode;\n      var template = document.createElement('div');\n\n      template.innerHTML = TEMPLATE;\n\n      var cropper = template.querySelector('.' + NAMESPACE + '-container');\n      var canvas = cropper.querySelector('.' + NAMESPACE + '-canvas');\n      var dragBox = cropper.querySelector('.' + NAMESPACE + '-drag-box');\n      var cropBox = cropper.querySelector('.' + NAMESPACE + '-crop-box');\n      var face = cropBox.querySelector('.' + NAMESPACE + '-face');\n\n      this.container = container;\n      this.cropper = cropper;\n      this.canvas = canvas;\n      this.dragBox = dragBox;\n      this.cropBox = cropBox;\n      this.viewBox = cropper.querySelector('.' + NAMESPACE + '-view-box');\n      this.face = face;\n\n      canvas.appendChild(image);\n\n      // Hide the original image\n      addClass(element, CLASS_HIDDEN);\n\n      // Inserts the cropper after to the current image\n      container.insertBefore(cropper, element.nextSibling);\n\n      // Show the image if is hidden\n      if (!this.isImg) {\n        removeClass(image, CLASS_HIDE);\n      }\n\n      this.initPreview();\n      this.bind();\n\n      options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\n      options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n      options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n\n      addClass(cropBox, CLASS_HIDDEN);\n\n      if (!options.guides) {\n        addClass(cropBox.getElementsByClassName(NAMESPACE + '-dashed'), CLASS_HIDDEN);\n      }\n\n      if (!options.center) {\n        addClass(cropBox.getElementsByClassName(NAMESPACE + '-center'), CLASS_HIDDEN);\n      }\n\n      if (options.background) {\n        addClass(cropper, NAMESPACE + '-bg');\n      }\n\n      if (!options.highlight) {\n        addClass(face, CLASS_INVISIBLE);\n      }\n\n      if (options.cropBoxMovable) {\n        addClass(face, CLASS_MOVE);\n        setData(face, DATA_ACTION, ACTION_ALL);\n      }\n\n      if (!options.cropBoxResizable) {\n        addClass(cropBox.getElementsByClassName(NAMESPACE + '-line'), CLASS_HIDDEN);\n        addClass(cropBox.getElementsByClassName(NAMESPACE + '-point'), CLASS_HIDDEN);\n      }\n\n      this.render();\n      this.ready = true;\n      this.setDragMode(options.dragMode);\n\n      if (options.autoCrop) {\n        this.crop();\n      }\n\n      this.setData(options.data);\n\n      if (isFunction(options.ready)) {\n        addListener(element, EVENT_READY, options.ready, {\n          once: true\n        });\n      }\n\n      dispatchEvent(element, EVENT_READY);\n    }\n  }, {\n    key: 'unbuild',\n    value: function unbuild() {\n      if (!this.ready) {\n        return;\n      }\n\n      this.ready = false;\n      this.unbind();\n      this.resetPreview();\n      this.cropper.parentNode.removeChild(this.cropper);\n      removeClass(this.element, CLASS_HIDDEN);\n    }\n  }, {\n    key: 'uncreate',\n    value: function uncreate() {\n      if (this.ready) {\n        this.unbuild();\n        this.ready = false;\n        this.cropped = false;\n      } else if (this.sizing) {\n        this.sizingImage.onload = null;\n        this.sizing = false;\n        this.sized = false;\n      } else if (this.reloading) {\n        this.xhr.abort();\n      } else if (this.image) {\n        this.stop();\n      }\n    }\n\n    /**\n     * Get the no conflict cropper class.\n     * @returns {Cropper} The cropper class.\n     */\n\n  }], [{\n    key: 'noConflict',\n    value: function noConflict() {\n      window.Cropper = AnotherCropper;\n      return Cropper;\n    }\n\n    /**\n     * Change the default options.\n     * @param {Object} options - The new default options.\n     */\n\n  }, {\n    key: 'setDefaults',\n    value: function setDefaults(options) {\n      assign(DEFAULTS, isPlainObject(options) && options);\n    }\n  }]);\n  return Cropper;\n}();\n\nassign(Cropper.prototype, render, preview, events, handlers, change, methods);\n\nexport default Cropper;\n","/*global jQuery, STUDIP */\nimport Cropper from 'cropperjs';\n\nSTUDIP.Avatar = {\n    cropper: null,\n\n    init: function(inputSelector) {\n        $(document).on('change', inputSelector, function() {\n            STUDIP.Avatar.readFile(this);\n\n            $(document)\n                .off('submit.avatar', 'form.settings-avatar')\n                .on('submit.avatar', 'form.settings-avatar', function() {\n                    var data = STUDIP.Avatar.cropper.getData();\n                    return STUDIP.Avatar.checkImageSize(data);\n                });\n        });\n    },\n\n    readFile: function(input) {\n        if (window.FileReader && input.files && input.files[0]) {\n            var reader = new window.FileReader();\n\n            if (input.files[0].size <= jQuery(input).data('max-size')) {\n                var container = jQuery('div#avatar-preview'),\n                    dialog = container.closest('div[role=\"dialog\"]');\n                // We are in a modal dialog\n                if (dialog.length > 0) {\n                    // Adjust maximal cropper container height to dialog dimensions.\n                    container.css('height', dialog.height() - 200);\n                    container.css('width', dialog.width() - 220);\n                    container.css('max-height', dialog.height() - 200);\n                    container.css('max-width', dialog.width() - 220);\n                    // No dialog, full page.\n                } else {\n                    dialog = jQuery('#layout_content');\n                    // Responsive view.\n                    if (jQuery('html').hasClass('responsified')) {\n                        // Adjust maximal cropper container height to page dimensions.\n                        container.css('height', dialog.height() - 220);\n                        container.css('width', 0.95 * dialog.width());\n                        container.css('max-height', dialog.height() * 220);\n                        container.css('max-width', 0.95 * dialog.width());\n                        // Non-dialog, non-responsive view.\n                    } else {\n                        // Adjust maximal cropper container height to page dimensions.\n                        container.css('height', dialog.height() - 100);\n                        container.css('width', dialog.width() - 200);\n                        container.css('max-height', dialog.height() * 220);\n                        container.css('max-width', dialog.width() - 100);\n                    }\n                }\n\n                reader.onload = function(event) {\n                    var image = document.getElementById('new-avatar');\n                    if (image) {\n                        image.src = event.target.result;\n                        STUDIP.Avatar.cropper = new Cropper(image, {\n                            aspectRatio: 1,\n                            viewMode: 2\n                        });\n                    }\n                };\n\n                reader.readAsDataURL(input.files[0]);\n\n                jQuery('#avatar-buttons').removeClass('hidden-js');\n                jQuery('label.file-upload').hide();\n                jQuery('#avatar-zoom-in').on('click', function() {\n                    STUDIP.Avatar.cropper.zoom(0.1);\n                    return false;\n                });\n                jQuery('#avatar-zoom-out').on('click', function() {\n                    STUDIP.Avatar.cropper.zoom(-0.1);\n                    return false;\n                });\n                jQuery('#avatar-rotate-clockwise').on('click', function() {\n                    STUDIP.Avatar.cropper.rotate(90);\n                    return false;\n                });\n                jQuery('#avatar-rotate-counter-clockwise').on(\n                    'click',\n                    function() {\n                        STUDIP.Avatar.cropper.rotate(-90);\n                        return false;\n                    }\n                );\n\n                jQuery('#submit-avatar').on('click', function() {\n                    jQuery('#cropped-image').attr(\n                        'value',\n                        STUDIP.Avatar.cropper.getCroppedCanvas().toDataURL()\n                    );\n                });\n            } else {\n                alert(jQuery(input).data('message-too-large'));\n            }\n        } else {\n            alert(\"Sorry - your browser doesn't support the FileReader API\");\n        }\n    },\n\n    checkImageSize: function(data) {\n        // Show a warning if cropped area is smaller than 250x250px.\n        if (data.width < 250 || data.height < 250) {\n            return confirm(jQuery('#new-avatar').data('message-too-small'));\n        }\n        return true;\n    }\n};\n\njQuery(function() {\n    STUDIP.Avatar.init('#avatar-upload');\n});\n"],"sourceRoot":""}