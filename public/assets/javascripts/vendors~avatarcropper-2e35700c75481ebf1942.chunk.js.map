{"version":3,"sources":["webpack:///./node_modules/cropperjs/dist/cropper.js"],"names":["module","exports","_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_toConsumableArray","arr","Array","isArray","arr2","_arrayWithoutHoles","iter","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","IN_BROWSER","window","WINDOW","NAMESPACE","ACTION_ALL","ACTION_CROP","ACTION_MOVE","ACTION_ZOOM","ACTION_EAST","ACTION_WEST","ACTION_SOUTH","ACTION_NORTH","ACTION_NORTH_EAST","ACTION_NORTH_WEST","ACTION_SOUTH_EAST","ACTION_SOUTH_WEST","CLASS_CROP","concat","CLASS_DISABLED","CLASS_HIDDEN","CLASS_HIDE","CLASS_INVISIBLE","CLASS_MODAL","CLASS_MOVE","DATA_ACTION","DATA_PREVIEW","DRAG_MODE_CROP","DRAG_MODE_MOVE","DRAG_MODE_NONE","EVENT_CROP","EVENT_CROP_END","EVENT_CROP_MOVE","EVENT_CROP_START","EVENT_DBLCLICK","EVENT_POINTER_DOWN","PointerEvent","EVENT_POINTER_MOVE","EVENT_POINTER_UP","EVENT_READY","EVENT_RESIZE","EVENT_WHEEL","EVENT_ZOOM","MIME_TYPE_JPEG","REGEXP_ACTIONS","REGEXP_DATA_URL","REGEXP_DATA_URL_JPEG","REGEXP_TAG_NAME","DEFAULTS","viewMode","dragMode","initialAspectRatio","NaN","aspectRatio","data","preview","responsive","restore","checkCrossOrigin","checkOrientation","modal","guides","center","highlight","background","autoCrop","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick","minCanvasWidth","minCanvasHeight","minCropBoxWidth","minCropBoxHeight","minContainerWidth","minContainerHeight","ready","cropstart","cropmove","cropend","crop","zoom","isNaN","Number","isNumber","value","isUndefined","isObject","hasOwnProperty","isPlainObject","_constructor","e","isFunction","forEach","callback","keys","assign","_len","arguments","args","_key","arg","REGEXP_DECIMALS","normalizeDecimalNumber","times","undefined","test","Math","round","REGEXP_SUFFIX","setStyle","element","styles","style","property","addClass","elem","classList","add","className","trim","indexOf","removeClass","remove","replace","toggleClass","added","REGEXP_HYPHENATE","hyphenate","toLowerCase","getData","name","dataset","getAttribute","setData","setAttribute","REGEXP_SPACES","onceSupported","supported","once","listener","options","get","set","addEventListener","removeEventListener","removeListener","type","handler","split","event","listeners","addListener","_handler","_element$listeners","_len2","_key2","apply","dispatchEvent","Event","CustomEvent","detail","bubbles","cancelable","document","createEvent","initCustomEvent","getOffset","box","getBoundingClientRect","left","pageXOffset","documentElement","clientLeft","top","pageYOffset","clientTop","location","REGEXP_ORIGINS","isCrossOriginURL","url","parts","match","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","getTransforms","_ref","rotate","scaleX","scaleY","translateX","translateY","values","push","transform","join","WebkitTransform","msTransform","getPointer","_ref2","endOnly","pageX","pageY","end","endX","endY","startX","startY","isFinite","getAdjustedSizes","_ref4","height","width","isValidNumber","adjustedWidth","fromCharCode","String","REGEXP_DATA_URL_HEAD","resetAndGetOrientation","arrayBuffer","orientation","littleEndian","app1Start","ifdStart","dataView","DataView","getUint8","byteLength","offset","exifIDCode","tiffOffset","start","str","getStringFromCharCode","endianness","getUint16","firstIFDOffset","getUint32","_offset","_length","setUint16","render","this","initContainer","initCanvas","initCropBox","renderCanvas","cropped","renderCropBox","container","cropper","containerData","max","offsetWidth","offsetHeight","imageData","rotated","abs","naturalWidth","naturalHeight","canvasWidth","canvasHeight","canvasData","oldLeft","oldTop","limited","limitCanvas","initialImageData","initialCanvasData","sizeLimited","positionLimited","cropBoxData","_getAdjustedSizes","minWidth","minHeight","maxWidth","Infinity","maxHeight","newCanvasLeft","newCanvasTop","minLeft","min","minTop","maxLeft","maxTop","changed","transformed","_getRotatedSizes","_ref5","degree","arc","PI","sinArc","sin","cosArc","cos","newWidth","newHeight","getRotatedSizes","canvas","renderImage","limitCropBox","image","output","initialCropBoxData","maxCropBoxWidth","maxCropBoxHeight","face","cropBox","disabled","initPreview","crossOrigin","crossOriginUrl","createElement","src","viewBox","appendChild","viewBoxImage","previews","ownerDocument","querySelectorAll","querySelector","el","img","html","innerHTML","cssText","resetPreview","removeAttribute","removeData","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","ratio","getElementsByTagName","events","bind","onCropStart","cropStart","onWheel","wheel","onDblclick","dblclick","onCropMove","cropMove","onCropEnd","cropEnd","onResize","resize","unbind","handlers","getCanvasData","getCropBoxData","setCanvasData","n","setCropBoxData","setDragMode","dragBox","contains","_this","delta","preventDefault","wheeling","setTimeout","deltaY","wheelDelta","action","pointers","changedTouches","touch","identifier","pointerId","originalEvent","cropping","change","right","bottom","renderable","shiftKey","pointers2","ratios","pointer","range","x","y","check","side","move","pointer2","x1","y1","x2","y2","z1","sqrt","sort","a","b","p","methods","reset","clear","hasSameSize","isImg","replaced","uncreate","load","enable","disable","destroy","originalUrl","offsetX","offsetY","_this$canvasData","moveTo","_originalEvent","zoomTo","pivot","count","oldRatio","_ref3","rotateTo","_scaleX","scale","_scaleY","rounded","getContainerData","getImageData","sized","widthChanged","heightChanged","getCroppedCanvas","HTMLCanvasElement","_ref6","_ref7","_ref8","imageAspectRatio","imageNaturalWidth","imageNaturalHeight","_ref6$rotate","_ref6$scaleX","_ref6$scaleY","_ref8$fillColor","fillColor","_ref8$imageSmoothingE","imageSmoothingEnabled","_ref8$imageSmoothingQ","imageSmoothingQuality","_ref8$maxWidth","_ref8$maxHeight","_ref8$minWidth","_ref8$minHeight","context","maxSizes","minSizes","destMaxSizes","destMinSizes","destWidth","destHeight","params","source","getContext","fillStyle","fillRect","save","translate","drawImage","map","param","floor","_this$getData","initialX","initialY","initialWidth","initialHeight","_options$imageSmoothi","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","sourceWidth","sourceHeight","srcX","srcY","setAspectRatio","mode","croppable","AnotherCropper","Cropper","instance","Constructor","_classCallCheck","tagName","Error","reloading","sizing","init","staticProps","protoProps","toDataURL","ArrayBuffer","read","base64","binary","atob","uint8","Uint8Array","charCodeAt","clone","xhr","XMLHttpRequest","ontimeout","onabort","onerror","onprogress","getResponseHeader","abort","onload","response","onloadend","open","responseType","withCredentials","send","mimeType","chunks","subarray","btoa","arrayBufferToDataURL","_parseOrientation","parseOrientation","stop","parentNode","insertBefore","nextSibling","_this2","IS_SAFARI","navigator","userAgent","done","build","sizingImage","body","removeChild","template","getElementsByClassName","unbuild","factory"],"mappings":"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","file":"javascripts/vendors~avatarcropper-2e35700c75481ebf1942.chunk.js","sourcesContent":["/*!\n * Cropper.js v1.4.2\n * https://fengyuanchen.github.io/cropperjs\n *\n * Copyright 2015-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2018-10-15T13:27:01.969Z\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Cropper = factory());\n}(this, (function () { 'use strict';\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var IN_BROWSER = typeof window !== 'undefined';\n  var WINDOW = IN_BROWSER ? window : {};\n  var NAMESPACE = 'cropper'; // Actions\n\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw'; // Classes\n\n  var CLASS_CROP = \"\".concat(NAMESPACE, \"-crop\");\n  var CLASS_DISABLED = \"\".concat(NAMESPACE, \"-disabled\");\n  var CLASS_HIDDEN = \"\".concat(NAMESPACE, \"-hidden\");\n  var CLASS_HIDE = \"\".concat(NAMESPACE, \"-hide\");\n  var CLASS_INVISIBLE = \"\".concat(NAMESPACE, \"-invisible\");\n  var CLASS_MODAL = \"\".concat(NAMESPACE, \"-modal\");\n  var CLASS_MOVE = \"\".concat(NAMESPACE, \"-move\"); // Data keys\n\n  var DATA_ACTION = \"\".concat(NAMESPACE, \"Action\");\n  var DATA_PREVIEW = \"\".concat(NAMESPACE, \"Preview\"); // Drag modes\n\n  var DRAG_MODE_CROP = 'crop';\n  var DRAG_MODE_MOVE = 'move';\n  var DRAG_MODE_NONE = 'none'; // Events\n\n  var EVENT_CROP = 'crop';\n  var EVENT_CROP_END = 'cropend';\n  var EVENT_CROP_MOVE = 'cropmove';\n  var EVENT_CROP_START = 'cropstart';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_POINTER_DOWN = WINDOW.PointerEvent ? 'pointerdown' : 'touchstart mousedown';\n  var EVENT_POINTER_MOVE = WINDOW.PointerEvent ? 'pointermove' : 'touchmove mousemove';\n  var EVENT_POINTER_UP = WINDOW.PointerEvent ? 'pointerup pointercancel' : 'touchend touchcancel mouseup';\n  var EVENT_READY = 'ready';\n  var EVENT_RESIZE = 'resize';\n  var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\n  var EVENT_ZOOM = 'zoom'; // Mime types\n\n  var MIME_TYPE_JPEG = 'image/jpeg'; // RegExps\n\n  var REGEXP_ACTIONS = /^(?:e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/;\n  var REGEXP_DATA_URL = /^data:/;\n  var REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\n  var REGEXP_TAG_NAME = /^(?:img|canvas)$/i;\n\n  var DEFAULTS = {\n    // Define the view mode of the cropper\n    viewMode: 0,\n    // 0, 1, 2, 3\n    // Define the dragging mode of the cropper\n    dragMode: DRAG_MODE_CROP,\n    // 'crop', 'move' or 'none'\n    // Define the initial aspect ratio of the crop box\n    initialAspectRatio: NaN,\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n    // An object with the previous cropping result data\n    data: null,\n    // A selector for adding extra containers to preview\n    preview: '',\n    // Re-render the cropper when resize the window\n    responsive: true,\n    // Restore the cropped area after resize the window\n    restore: true,\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n    // Show the black modal\n    modal: true,\n    // Show the dashed lines for guiding\n    guides: true,\n    // Show the center indicator for guiding\n    center: true,\n    // Show the white modal to highlight the crop box\n    highlight: true,\n    // Show the grid background\n    background: true,\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n    // Enable to move the image\n    movable: true,\n    // Enable to rotate the image\n    rotatable: true,\n    // Enable to scale the image\n    scalable: true,\n    // Enable to zoom the image\n    zoomable: true,\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n    // Enable to move the crop box\n    cropBoxMovable: true,\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n    // Shortcuts of events\n    ready: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  var TEMPLATE = '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + '</div>' + '</div>';\n\n  /**\n   * Check if the given value is not a number.\n   */\n\n  var isNaN = Number.isNaN || WINDOW.isNaN;\n  /**\n   * Check if the given value is a number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n   */\n\n  function isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n  }\n  /**\n   * Check if the given value is undefined.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n   */\n\n  function isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n  /**\n   * Check if the given value is an object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n   */\n\n  function isObject(value) {\n    return _typeof(value) === 'object' && value !== null;\n  }\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /**\n   * Check if the given value is a plain object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n   */\n\n  function isPlainObject(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n\n    try {\n      var _constructor = value.constructor;\n      var prototype = _constructor.prototype;\n      return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * Check if the given value is a function.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n   */\n\n  function isFunction(value) {\n    return typeof value === 'function';\n  }\n  /**\n   * Iterate the given data.\n   * @param {*} data - The data to iterate.\n   * @param {Function} callback - The process function for each element.\n   * @returns {*} The original data.\n   */\n\n  function forEach(data, callback) {\n    if (data && isFunction(callback)) {\n      if (Array.isArray(data) || isNumber(data.length)\n      /* array-like */\n      ) {\n          var length = data.length;\n          var i;\n\n          for (i = 0; i < length; i += 1) {\n            if (callback.call(data, data[i], i, data) === false) {\n              break;\n            }\n          }\n        } else if (isObject(data)) {\n        Object.keys(data).forEach(function (key) {\n          callback.call(data, data[key], key, data);\n        });\n      }\n    }\n\n    return data;\n  }\n  /**\n   * Extend the given object.\n   * @param {*} obj - The object to be extended.\n   * @param {*} args - The rest objects which will be merged to the first object.\n   * @returns {Object} The extended object.\n   */\n\n  var assign = Object.assign || function assign(obj) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (isObject(obj) && args.length > 0) {\n      args.forEach(function (arg) {\n        if (isObject(arg)) {\n          Object.keys(arg).forEach(function (key) {\n            obj[key] = arg[key];\n          });\n        }\n      });\n    }\n\n    return obj;\n  };\n  var REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/;\n  /**\n   * Normalize decimal number.\n   * Check out {@link http://0.30000000000000004.com/}\n   * @param {number} value - The value to normalize.\n   * @param {number} [times=100000000000] - The times for normalizing.\n   * @returns {number} Returns the normalized number.\n   */\n\n  function normalizeDecimalNumber(value) {\n    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n  }\n  var REGEXP_SUFFIX = /^(?:width|height|left|top|marginLeft|marginTop)$/;\n  /**\n   * Apply styles to the given element.\n   * @param {Element} element - The target element.\n   * @param {Object} styles - The styles for applying.\n   */\n\n  function setStyle(element, styles) {\n    var style = element.style;\n    forEach(styles, function (value, property) {\n      if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n        value += 'px';\n      }\n\n      style[property] = value;\n    });\n  }\n  /**\n   * Check if the given element has a special class.\n   * @param {Element} element - The element to check.\n   * @param {string} value - The class to search.\n   * @returns {boolean} Returns `true` if the special class was found.\n   */\n\n  function hasClass(element, value) {\n    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n  }\n  /**\n   * Add classes to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be added.\n   */\n\n  function addClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        addClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.add(value);\n      return;\n    }\n\n    var className = element.className.trim();\n\n    if (!className) {\n      element.className = value;\n    } else if (className.indexOf(value) < 0) {\n      element.className = \"\".concat(className, \" \").concat(value);\n    }\n  }\n  /**\n   * Remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be removed.\n   */\n\n  function removeClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        removeClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.remove(value);\n      return;\n    }\n\n    if (element.className.indexOf(value) >= 0) {\n      element.className = element.className.replace(value, '');\n    }\n  }\n  /**\n   * Add or remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be toggled.\n   * @param {boolean} added - Add only.\n   */\n\n  function toggleClass(element, value, added) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        toggleClass(elem, value, added);\n      });\n      return;\n    } // IE10-11 doesn't support the second parameter of `classList.toggle`\n\n\n    if (added) {\n      addClass(element, value);\n    } else {\n      removeClass(element, value);\n    }\n  }\n  var REGEXP_HYPHENATE = /([a-z\\d])([A-Z])/g;\n  /**\n   * Transform the given string from camelCase to kebab-case\n   * @param {string} value - The value to transform.\n   * @returns {string} The transformed value.\n   */\n\n  function hyphenate(value) {\n    return value.replace(REGEXP_HYPHENATE, '$1-$2').toLowerCase();\n  }\n  /**\n   * Get data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to get.\n   * @returns {string} The data value.\n   */\n\n  function getData(element, name) {\n    if (isObject(element[name])) {\n      return element[name];\n    }\n\n    if (element.dataset) {\n      return element.dataset[name];\n    }\n\n    return element.getAttribute(\"data-\".concat(hyphenate(name)));\n  }\n  /**\n   * Set data to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to set.\n   * @param {string} data - The data value.\n   */\n\n  function setData(element, name, data) {\n    if (isObject(data)) {\n      element[name] = data;\n    } else if (element.dataset) {\n      element.dataset[name] = data;\n    } else {\n      element.setAttribute(\"data-\".concat(hyphenate(name)), data);\n    }\n  }\n  /**\n   * Remove data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to remove.\n   */\n\n  function removeData(element, name) {\n    if (isObject(element[name])) {\n      try {\n        delete element[name];\n      } catch (e) {\n        element[name] = undefined;\n      }\n    } else if (element.dataset) {\n      // #128 Safari not allows to delete dataset property\n      try {\n        delete element.dataset[name];\n      } catch (e) {\n        element.dataset[name] = undefined;\n      }\n    } else {\n      element.removeAttribute(\"data-\".concat(hyphenate(name)));\n    }\n  }\n  var REGEXP_SPACES = /\\s\\s*/;\n\n  var onceSupported = function () {\n    var supported = false;\n\n    if (IN_BROWSER) {\n      var once = false;\n\n      var listener = function listener() {};\n\n      var options = Object.defineProperty({}, 'once', {\n        get: function get() {\n          supported = true;\n          return once;\n        },\n\n        /**\n         * This setter can fix a `TypeError` in strict mode\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\n         * @param {boolean} value - The value to set\n         */\n        set: function set(value) {\n          once = value;\n        }\n      });\n      WINDOW.addEventListener('test', listener, options);\n      WINDOW.removeEventListener('test', listener, options);\n    }\n\n    return supported;\n  }();\n  /**\n   * Remove event listener from the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n\n\n  function removeListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (!onceSupported) {\n        var listeners = element.listeners;\n\n        if (listeners && listeners[event] && listeners[event][listener]) {\n          handler = listeners[event][listener];\n          delete listeners[event][listener];\n\n          if (Object.keys(listeners[event]).length === 0) {\n            delete listeners[event];\n          }\n\n          if (Object.keys(listeners).length === 0) {\n            delete element.listeners;\n          }\n        }\n      }\n\n      element.removeEventListener(event, handler, options);\n    });\n  }\n  /**\n   * Add event listener to the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n\n  function addListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var _handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (options.once && !onceSupported) {\n        var _element$listeners = element.listeners,\n            listeners = _element$listeners === void 0 ? {} : _element$listeners;\n\n        _handler = function handler() {\n          delete listeners[event][listener];\n          element.removeEventListener(event, _handler, options);\n\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          listener.apply(element, args);\n        };\n\n        if (!listeners[event]) {\n          listeners[event] = {};\n        }\n\n        if (listeners[event][listener]) {\n          element.removeEventListener(event, listeners[event][listener], options);\n        }\n\n        listeners[event][listener] = _handler;\n        element.listeners = listeners;\n      }\n\n      element.addEventListener(event, _handler, options);\n    });\n  }\n  /**\n   * Dispatch event on the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Object} data - The additional event data.\n   * @returns {boolean} Indicate if the event is default prevented or not.\n   */\n\n  function dispatchEvent(element, type, data) {\n    var event; // Event and CustomEvent on IE9-11 are global objects, not constructors\n\n    if (isFunction(Event) && isFunction(CustomEvent)) {\n      event = new CustomEvent(type, {\n        detail: data,\n        bubbles: true,\n        cancelable: true\n      });\n    } else {\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent(type, true, true, data);\n    }\n\n    return element.dispatchEvent(event);\n  }\n  /**\n   * Get the offset base on the document.\n   * @param {Element} element - The target element.\n   * @returns {Object} The offset data.\n   */\n\n  function getOffset(element) {\n    var box = element.getBoundingClientRect();\n    return {\n      left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\n      top: box.top + (window.pageYOffset - document.documentElement.clientTop)\n    };\n  }\n  var location = WINDOW.location;\n  var REGEXP_ORIGINS = /^(https?:)\\/\\/([^:/?#]+):?(\\d*)/i;\n  /**\n   * Check if the given URL is a cross origin URL.\n   * @param {string} url - The target URL.\n   * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\n   */\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(REGEXP_ORIGINS);\n    return parts && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n  }\n  /**\n   * Add timestamp to the given URL.\n   * @param {string} url - The target URL.\n   * @returns {string} The result URL.\n   */\n\n  function addTimestamp(url) {\n    var timestamp = \"timestamp=\".concat(new Date().getTime());\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n  }\n  /**\n   * Get transforms base on the given object.\n   * @param {Object} obj - The target object.\n   * @returns {string} A string contains transform values.\n   */\n\n  function getTransforms(_ref) {\n    var rotate = _ref.rotate,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        translateX = _ref.translateX,\n        translateY = _ref.translateY;\n    var values = [];\n\n    if (isNumber(translateX) && translateX !== 0) {\n      values.push(\"translateX(\".concat(translateX, \"px)\"));\n    }\n\n    if (isNumber(translateY) && translateY !== 0) {\n      values.push(\"translateY(\".concat(translateY, \"px)\"));\n    } // Rotate should come first before scale to match orientation transform\n\n\n    if (isNumber(rotate) && rotate !== 0) {\n      values.push(\"rotate(\".concat(rotate, \"deg)\"));\n    }\n\n    if (isNumber(scaleX) && scaleX !== 1) {\n      values.push(\"scaleX(\".concat(scaleX, \")\"));\n    }\n\n    if (isNumber(scaleY) && scaleY !== 1) {\n      values.push(\"scaleY(\".concat(scaleY, \")\"));\n    }\n\n    var transform = values.length ? values.join(' ') : 'none';\n    return {\n      WebkitTransform: transform,\n      msTransform: transform,\n      transform: transform\n    };\n  }\n  /**\n   * Get the max ratio of a group of pointers.\n   * @param {string} pointers - The target pointers.\n   * @returns {number} The result ratio.\n   */\n\n  function getMaxZoomRatio(pointers) {\n    var pointers2 = assign({}, pointers);\n    var ratios = [];\n    forEach(pointers, function (pointer, pointerId) {\n      delete pointers2[pointerId];\n      forEach(pointers2, function (pointer2) {\n        var x1 = Math.abs(pointer.startX - pointer2.startX);\n        var y1 = Math.abs(pointer.startY - pointer2.startY);\n        var x2 = Math.abs(pointer.endX - pointer2.endX);\n        var y2 = Math.abs(pointer.endY - pointer2.endY);\n        var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n        var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n        var ratio = (z2 - z1) / z1;\n        ratios.push(ratio);\n      });\n    });\n    ratios.sort(function (a, b) {\n      return Math.abs(a) < Math.abs(b);\n    });\n    return ratios[0];\n  }\n  /**\n   * Get a pointer from an event object.\n   * @param {Object} event - The target event object.\n   * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\n   * @returns {Object} The result pointer contains start and/or end point coordinates.\n   */\n\n  function getPointer(_ref2, endOnly) {\n    var pageX = _ref2.pageX,\n        pageY = _ref2.pageY;\n    var end = {\n      endX: pageX,\n      endY: pageY\n    };\n    return endOnly ? end : assign({\n      startX: pageX,\n      startY: pageY\n    }, end);\n  }\n  /**\n   * Get the center point coordinate of a group of pointers.\n   * @param {Object} pointers - The target pointers.\n   * @returns {Object} The center point coordinate.\n   */\n\n  function getPointersCenter(pointers) {\n    var pageX = 0;\n    var pageY = 0;\n    var count = 0;\n    forEach(pointers, function (_ref3) {\n      var startX = _ref3.startX,\n          startY = _ref3.startY;\n      pageX += startX;\n      pageY += startY;\n      count += 1;\n    });\n    pageX /= count;\n    pageY /= count;\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n  /**\n   * Check if the given value is a finite number.\n   */\n\n  var isFinite = Number.isFinite || WINDOW.isFinite;\n  /**\n   * Get the max sizes in a rectangle under the given aspect ratio.\n   * @param {Object} data - The original sizes.\n   * @param {string} [type='contain'] - The adjust type.\n   * @returns {Object} The result sizes.\n   */\n\n  function getAdjustedSizes(_ref4) // or 'cover'\n  {\n    var aspectRatio = _ref4.aspectRatio,\n        height = _ref4.height,\n        width = _ref4.width;\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';\n\n    var isValidNumber = function isValidNumber(value) {\n      return isFinite(value) && value > 0;\n    };\n\n    if (isValidNumber(width) && isValidNumber(height)) {\n      var adjustedWidth = height * aspectRatio;\n\n      if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {\n        height = width / aspectRatio;\n      } else {\n        width = height * aspectRatio;\n      }\n    } else if (isValidNumber(width)) {\n      height = width / aspectRatio;\n    } else if (isValidNumber(height)) {\n      width = height * aspectRatio;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Get the new sizes of a rectangle after rotated.\n   * @param {Object} data - The original sizes.\n   * @returns {Object} The result sizes.\n   */\n\n  function getRotatedSizes(_ref5) {\n    var width = _ref5.width,\n        height = _ref5.height,\n        degree = _ref5.degree;\n    degree = Math.abs(degree) % 180;\n\n    if (degree === 90) {\n      return {\n        width: height,\n        height: width\n      };\n    }\n\n    var arc = degree % 90 * Math.PI / 180;\n    var sinArc = Math.sin(arc);\n    var cosArc = Math.cos(arc);\n    var newWidth = width * cosArc + height * sinArc;\n    var newHeight = width * sinArc + height * cosArc;\n    return degree > 90 ? {\n      width: newHeight,\n      height: newWidth\n    } : {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n  /**\n   * Get a canvas which drew the given image.\n   * @param {HTMLImageElement} image - The image for drawing.\n   * @param {Object} imageData - The image data.\n   * @param {Object} canvasData - The canvas data.\n   * @param {Object} options - The options.\n   * @returns {HTMLCanvasElement} The result canvas.\n   */\n\n  function getSourceCanvas(image, _ref6, _ref7, _ref8) {\n    var imageAspectRatio = _ref6.aspectRatio,\n        imageNaturalWidth = _ref6.naturalWidth,\n        imageNaturalHeight = _ref6.naturalHeight,\n        _ref6$rotate = _ref6.rotate,\n        rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,\n        _ref6$scaleX = _ref6.scaleX,\n        scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,\n        _ref6$scaleY = _ref6.scaleY,\n        scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;\n    var aspectRatio = _ref7.aspectRatio,\n        naturalWidth = _ref7.naturalWidth,\n        naturalHeight = _ref7.naturalHeight;\n    var _ref8$fillColor = _ref8.fillColor,\n        fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,\n        _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,\n        imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,\n        _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,\n        imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,\n        _ref8$maxWidth = _ref8.maxWidth,\n        maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,\n        _ref8$maxHeight = _ref8.maxHeight,\n        maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,\n        _ref8$minWidth = _ref8.minWidth,\n        minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,\n        _ref8$minHeight = _ref8.minHeight,\n        minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    var maxSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var minSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\n    var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight)); // Note: should always use image's natural sizes for drawing as\n    // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\n\n    var destMaxSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var destMinSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\n    var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\n    var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];\n    canvas.width = normalizeDecimalNumber(width);\n    canvas.height = normalizeDecimalNumber(height);\n    context.fillStyle = fillColor;\n    context.fillRect(0, 0, width, height);\n    context.save();\n    context.translate(width / 2, height / 2);\n    context.rotate(rotate * Math.PI / 180);\n    context.scale(scaleX, scaleY);\n    context.imageSmoothingEnabled = imageSmoothingEnabled;\n    context.imageSmoothingQuality = imageSmoothingQuality;\n    context.drawImage.apply(context, [image].concat(_toConsumableArray(params.map(function (param) {\n      return Math.floor(normalizeDecimalNumber(param));\n    }))));\n    context.restore();\n    return canvas;\n  }\n  var fromCharCode = String.fromCharCode;\n  /**\n   * Get string from char code in data view.\n   * @param {DataView} dataView - The data view for read.\n   * @param {number} start - The start index.\n   * @param {number} length - The read length.\n   * @returns {string} The read result.\n   */\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    var i;\n    length += start;\n\n    for (i = start; i < length; i += 1) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n  var REGEXP_DATA_URL_HEAD = /^data:.*,/;\n  /**\n   * Transform Data URL to array buffer.\n   * @param {string} dataURL - The Data URL to transform.\n   * @returns {ArrayBuffer} The result array buffer.\n   */\n\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var arrayBuffer = new ArrayBuffer(binary.length);\n    var uint8 = new Uint8Array(arrayBuffer);\n    forEach(uint8, function (value, i) {\n      uint8[i] = binary.charCodeAt(i);\n    });\n    return arrayBuffer;\n  }\n  /**\n   * Transform array buffer to Data URL.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n   * @param {string} mimeType - The mime type of the Data URL.\n   * @returns {string} The result Data URL.\n   */\n\n  function arrayBufferToDataURL(arrayBuffer, mimeType) {\n    var chunks = [];\n    var chunkSize = 8192;\n    var uint8 = new Uint8Array(arrayBuffer);\n\n    while (uint8.length > 0) {\n      chunks.push(fromCharCode.apply(void 0, _toConsumableArray(uint8.subarray(0, chunkSize))));\n      uint8 = uint8.subarray(chunkSize);\n    }\n\n    return \"data:\".concat(mimeType, \";base64,\").concat(btoa(chunks.join('')));\n  }\n  /**\n   * Get orientation value from given array buffer.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n   * @returns {number} The read orientation value.\n   */\n\n  function resetAndGetOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var orientation;\n    var littleEndian;\n    var app1Start;\n    var ifdStart; // Only handle JPEG image (start by 0xFFD8)\n\n    if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n      var length = dataView.byteLength;\n      var offset = 2;\n\n      while (offset < length) {\n        if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n          app1Start = offset;\n          break;\n        }\n\n        offset += 1;\n      }\n    }\n\n    if (app1Start) {\n      var exifIDCode = app1Start + 4;\n      var tiffOffset = app1Start + 10;\n\n      if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n        var endianness = dataView.getUint16(tiffOffset);\n        littleEndian = endianness === 0x4949;\n\n        if (littleEndian || endianness === 0x4D4D\n        /* bigEndian */\n        ) {\n            if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n              var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n              if (firstIFDOffset >= 0x00000008) {\n                ifdStart = tiffOffset + firstIFDOffset;\n              }\n            }\n          }\n      }\n    }\n\n    if (ifdStart) {\n      var _length = dataView.getUint16(ifdStart, littleEndian);\n\n      var _offset;\n\n      var i;\n\n      for (i = 0; i < _length; i += 1) {\n        _offset = ifdStart + i * 12 + 2;\n\n        if (dataView.getUint16(_offset, littleEndian) === 0x0112\n        /* Orientation */\n        ) {\n            // 8 is the offset of the current tag's value\n            _offset += 8; // Get the original orientation value\n\n            orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value\n\n            dataView.setUint16(_offset, 1, littleEndian);\n            break;\n          }\n      }\n    }\n\n    return orientation;\n  }\n  /**\n   * Parse Exif Orientation value.\n   * @param {number} orientation - The orientation to parse.\n   * @returns {Object} The parsed result.\n   */\n\n  function parseOrientation(orientation) {\n    var rotate = 0;\n    var scaleX = 1;\n    var scaleY = 1;\n\n    switch (orientation) {\n      // Flip horizontal\n      case 2:\n        scaleX = -1;\n        break;\n      // Rotate left 180°\n\n      case 3:\n        rotate = -180;\n        break;\n      // Flip vertical\n\n      case 4:\n        scaleY = -1;\n        break;\n      // Flip vertical and rotate right 90°\n\n      case 5:\n        rotate = 90;\n        scaleY = -1;\n        break;\n      // Rotate right 90°\n\n      case 6:\n        rotate = 90;\n        break;\n      // Flip horizontal and rotate right 90°\n\n      case 7:\n        rotate = 90;\n        scaleX = -1;\n        break;\n      // Rotate left 90°\n\n      case 8:\n        rotate = -90;\n        break;\n\n      default:\n    }\n\n    return {\n      rotate: rotate,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var render = {\n    render: function render() {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n      this.renderCanvas();\n\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    },\n    initContainer: function initContainer() {\n      var element = this.element,\n          options = this.options,\n          container = this.container,\n          cropper = this.cropper;\n      addClass(cropper, CLASS_HIDDEN);\n      removeClass(element, CLASS_HIDDEN);\n      var containerData = {\n        width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n        height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n      };\n      this.containerData = containerData;\n      setStyle(cropper, {\n        width: containerData.width,\n        height: containerData.height\n      });\n      addClass(element, CLASS_HIDDEN);\n      removeClass(cropper, CLASS_HIDDEN);\n    },\n    // Canvas (image wrapper)\n    initCanvas: function initCanvas() {\n      var containerData = this.containerData,\n          imageData = this.imageData;\n      var viewMode = this.options.viewMode;\n      var rotated = Math.abs(imageData.rotate) % 180 === 90;\n      var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n      var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerData.width;\n      var canvasHeight = containerData.height;\n\n      if (containerData.height * aspectRatio > containerData.width) {\n        if (viewMode === 3) {\n          canvasWidth = containerData.height * aspectRatio;\n        } else {\n          canvasHeight = containerData.width / aspectRatio;\n        }\n      } else if (viewMode === 3) {\n        canvasHeight = containerData.width / aspectRatio;\n      } else {\n        canvasWidth = containerData.height * aspectRatio;\n      }\n\n      var canvasData = {\n        aspectRatio: aspectRatio,\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n      canvasData.left = (containerData.width - canvasWidth) / 2;\n      canvasData.top = (containerData.height - canvasHeight) / 2;\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      this.canvasData = canvasData;\n      this.limited = viewMode === 1 || viewMode === 2;\n      this.limitCanvas(true, true);\n      this.initialImageData = assign({}, imageData);\n      this.initialCanvasData = assign({}, canvasData);\n    },\n    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var viewMode = options.viewMode;\n      var aspectRatio = canvasData.aspectRatio;\n      var cropped = this.cropped && cropBoxData;\n\n      if (sizeLimited) {\n        var minCanvasWidth = Number(options.minCanvasWidth) || 0;\n        var minCanvasHeight = Number(options.minCanvasHeight) || 0;\n\n        if (viewMode > 1) {\n          minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n          minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n\n          if (viewMode === 3) {\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        } else if (viewMode > 0) {\n          if (minCanvasWidth) {\n            minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n          } else if (minCanvasHeight) {\n            minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n          } else if (cropped) {\n            minCanvasWidth = cropBoxData.width;\n            minCanvasHeight = cropBoxData.height;\n\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        }\n\n        var _getAdjustedSizes = getAdjustedSizes({\n          aspectRatio: aspectRatio,\n          width: minCanvasWidth,\n          height: minCanvasHeight\n        });\n\n        minCanvasWidth = _getAdjustedSizes.width;\n        minCanvasHeight = _getAdjustedSizes.height;\n        canvasData.minWidth = minCanvasWidth;\n        canvasData.minHeight = minCanvasHeight;\n        canvasData.maxWidth = Infinity;\n        canvasData.maxHeight = Infinity;\n      }\n\n      if (positionLimited) {\n        if (viewMode > (cropped ? 0 : 1)) {\n          var newCanvasLeft = containerData.width - canvasData.width;\n          var newCanvasTop = containerData.height - canvasData.height;\n          canvasData.minLeft = Math.min(0, newCanvasLeft);\n          canvasData.minTop = Math.min(0, newCanvasTop);\n          canvasData.maxLeft = Math.max(0, newCanvasLeft);\n          canvasData.maxTop = Math.max(0, newCanvasTop);\n\n          if (cropped && this.limited) {\n            canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n            canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n            canvasData.maxLeft = cropBoxData.left;\n            canvasData.maxTop = cropBoxData.top;\n\n            if (viewMode === 2) {\n              if (canvasData.width >= containerData.width) {\n                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n              }\n\n              if (canvasData.height >= containerData.height) {\n                canvasData.minTop = Math.min(0, newCanvasTop);\n                canvasData.maxTop = Math.max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvasData.minLeft = -canvasData.width;\n          canvasData.minTop = -canvasData.height;\n          canvasData.maxLeft = containerData.width;\n          canvasData.maxTop = containerData.height;\n        }\n      }\n    },\n    renderCanvas: function renderCanvas(changed, transformed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n\n      if (transformed) {\n        var _getRotatedSizes = getRotatedSizes({\n          width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n          height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n          degree: imageData.rotate || 0\n        }),\n            naturalWidth = _getRotatedSizes.width,\n            naturalHeight = _getRotatedSizes.height;\n\n        var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n        var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n        canvasData.left -= (width - canvasData.width) / 2;\n        canvasData.top -= (height - canvasData.height) / 2;\n        canvasData.width = width;\n        canvasData.height = height;\n        canvasData.aspectRatio = naturalWidth / naturalHeight;\n        canvasData.naturalWidth = naturalWidth;\n        canvasData.naturalHeight = naturalHeight;\n        this.limitCanvas(true, false);\n      }\n\n      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n        canvasData.left = canvasData.oldLeft;\n      }\n\n      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n        canvasData.top = canvasData.oldTop;\n      }\n\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n      this.limitCanvas(false, true);\n      canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n      canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      setStyle(this.canvas, assign({\n        width: canvasData.width,\n        height: canvasData.height\n      }, getTransforms({\n        translateX: canvasData.left,\n        translateY: canvasData.top\n      })));\n      this.renderImage(changed);\n\n      if (this.cropped && this.limited) {\n        this.limitCropBox(true, true);\n      }\n    },\n    renderImage: function renderImage(changed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n      var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n      var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n      assign(imageData, {\n        width: width,\n        height: height,\n        left: (canvasData.width - width) / 2,\n        top: (canvasData.height - height) / 2\n      });\n      setStyle(this.image, assign({\n        width: imageData.width,\n        height: imageData.height\n      }, getTransforms(assign({\n        translateX: imageData.left,\n        translateY: imageData.top\n      }, imageData))));\n\n      if (changed) {\n        this.output();\n      }\n    },\n    initCropBox: function initCropBox() {\n      var options = this.options,\n          canvasData = this.canvasData;\n      var aspectRatio = options.aspectRatio || options.initialAspectRatio;\n      var autoCropArea = Number(options.autoCropArea) || 0.8;\n      var cropBoxData = {\n        width: canvasData.width,\n        height: canvasData.height\n      };\n\n      if (aspectRatio) {\n        if (canvasData.height * aspectRatio > canvasData.width) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n\n      this.cropBoxData = cropBoxData;\n      this.limitCropBox(true, true); // Initialize auto crop area\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight); // The width/height of auto crop area must large than \"minWidth/Height\"\n\n      cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n      cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n      cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n      cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n      this.initialCropBoxData = assign({}, cropBoxData);\n    },\n    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData,\n          limited = this.limited;\n      var aspectRatio = options.aspectRatio;\n\n      if (sizeLimited) {\n        var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n        var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n        var maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;\n        var maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height; // The min/maxCropBoxWidth/Height must be less than container's width/height\n\n        minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n        minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        } // The minWidth/Height must be less than maxWidth/Height\n\n\n        cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n        cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n        cropBoxData.maxWidth = maxCropBoxWidth;\n        cropBoxData.maxHeight = maxCropBoxHeight;\n      }\n\n      if (positionLimited) {\n        if (limited) {\n          cropBoxData.minLeft = Math.max(0, canvasData.left);\n          cropBoxData.minTop = Math.max(0, canvasData.top);\n          cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n          cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n        } else {\n          cropBoxData.minLeft = 0;\n          cropBoxData.minTop = 0;\n          cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n          cropBoxData.maxTop = containerData.height - cropBoxData.height;\n        }\n      }\n    },\n    renderCropBox: function renderCropBox() {\n      var options = this.options,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData;\n\n      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n        cropBoxData.left = cropBoxData.oldLeft;\n      }\n\n      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n        cropBoxData.top = cropBoxData.oldTop;\n      }\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n      this.limitCropBox(false, true);\n      cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n      cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n\n      if (options.movable && options.cropBoxMovable) {\n        // Turn to move the canvas when the crop box is equal to the container\n        setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      setStyle(this.cropBox, assign({\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      }, getTransforms({\n        translateX: cropBoxData.left,\n        translateY: cropBoxData.top\n      })));\n\n      if (this.cropped && this.limited) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.disabled) {\n        this.output();\n      }\n    },\n    output: function output() {\n      this.preview();\n      dispatchEvent(this.element, EVENT_CROP, this.getData());\n    }\n  };\n\n  var preview = {\n    initPreview: function initPreview() {\n      var crossOrigin = this.crossOrigin;\n      var preview = this.options.preview;\n      var url = crossOrigin ? this.crossOriginUrl : this.url;\n      var image = document.createElement('img');\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.src = url;\n      this.viewBox.appendChild(image);\n      this.viewBoxImage = image;\n\n      if (!preview) {\n        return;\n      }\n\n      var previews = preview;\n\n      if (typeof preview === 'string') {\n        previews = this.element.ownerDocument.querySelectorAll(preview);\n      } else if (preview.querySelector) {\n        previews = [preview];\n      }\n\n      this.previews = previews;\n      forEach(previews, function (el) {\n        var img = document.createElement('img'); // Save the original size for recover\n\n        setData(el, DATA_PREVIEW, {\n          width: el.offsetWidth,\n          height: el.offsetHeight,\n          html: el.innerHTML\n        });\n\n        if (crossOrigin) {\n          img.crossOrigin = crossOrigin;\n        }\n\n        img.src = url;\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * Add `height:auto` to override `height` attribute on IE8\n         * (Occur only when margin-top <= -height)\n         */\n\n        img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n        el.innerHTML = '';\n        el.appendChild(img);\n      });\n    },\n    resetPreview: function resetPreview() {\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        setStyle(element, {\n          width: data.width,\n          height: data.height\n        });\n        element.innerHTML = data.html;\n        removeData(element, DATA_PREVIEW);\n      });\n    },\n    preview: function preview() {\n      var imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var cropBoxWidth = cropBoxData.width,\n          cropBoxHeight = cropBoxData.height;\n      var width = imageData.width,\n          height = imageData.height;\n      var left = cropBoxData.left - canvasData.left - imageData.left;\n      var top = cropBoxData.top - canvasData.top - imageData.top;\n\n      if (!this.cropped || this.disabled) {\n        return;\n      }\n\n      setStyle(this.viewBoxImage, assign({\n        width: width,\n        height: height\n      }, getTransforms(assign({\n        translateX: -left,\n        translateY: -top\n      }, imageData))));\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        setStyle(element, {\n          width: newWidth,\n          height: newHeight\n        });\n        setStyle(element.getElementsByTagName('img')[0], assign({\n          width: width * ratio,\n          height: height * ratio\n        }, getTransforms(assign({\n          translateX: -left * ratio,\n          translateY: -top * ratio\n        }, imageData))));\n      });\n    }\n  };\n\n  var events = {\n    bind: function bind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        addListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        addListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        addListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        addListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        addListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this));\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\n      }\n\n      addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\n      addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\n\n      if (options.responsive) {\n        addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));\n      }\n    },\n    unbind: function unbind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        removeListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        removeListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        removeListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        removeListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        removeListener(cropper, EVENT_WHEEL, this.onWheel);\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);\n      }\n\n      removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);\n      removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);\n\n      if (options.responsive) {\n        removeListener(window, EVENT_RESIZE, this.onResize);\n      }\n    }\n  };\n\n  var handlers = {\n    resize: function resize() {\n      var options = this.options,\n          container = this.container,\n          containerData = this.containerData;\n      var minContainerWidth = Number(options.minContainerWidth) || 200;\n      var minContainerHeight = Number(options.minContainerHeight) || 100;\n\n      if (this.disabled || containerData.width <= minContainerWidth || containerData.height <= minContainerHeight) {\n        return;\n      }\n\n      var ratio = container.offsetWidth / containerData.width; // Resize when width changed or height changed\n\n      if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n        var canvasData;\n        var cropBoxData;\n\n        if (options.restore) {\n          canvasData = this.getCanvasData();\n          cropBoxData = this.getCropBoxData();\n        }\n\n        this.render();\n\n        if (options.restore) {\n          this.setCanvasData(forEach(canvasData, function (n, i) {\n            canvasData[i] = n * ratio;\n          }));\n          this.setCropBoxData(forEach(cropBoxData, function (n, i) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      }\n    },\n    dblclick: function dblclick() {\n      if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {\n        return;\n      }\n\n      this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);\n    },\n    wheel: function wheel(e) {\n      var _this = this;\n\n      var ratio = Number(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.disabled) {\n        return;\n      }\n\n      e.preventDefault(); // Limit wheel speed to prevent zoom too fast (#21)\n\n      if (this.wheeling) {\n        return;\n      }\n\n      this.wheeling = true;\n      setTimeout(function () {\n        _this.wheeling = false;\n      }, 50);\n\n      if (e.deltaY) {\n        delta = e.deltaY > 0 ? 1 : -1;\n      } else if (e.wheelDelta) {\n        delta = -e.wheelDelta / 120;\n      } else if (e.detail) {\n        delta = e.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, e);\n    },\n    cropStart: function cropStart(e) {\n      if (this.disabled) {\n        return;\n      }\n\n      var options = this.options,\n          pointers = this.pointers;\n      var action;\n\n      if (e.changedTouches) {\n        // Handle touch event\n        forEach(e.changedTouches, function (touch) {\n          pointers[touch.identifier] = getPointer(touch);\n        });\n      } else {\n        // Handle mouse event and pointer event\n        pointers[e.pointerId || 0] = getPointer(e);\n      }\n\n      if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n        action = ACTION_ZOOM;\n      } else {\n        action = getData(e.target, DATA_ACTION);\n      }\n\n      if (!REGEXP_ACTIONS.test(action)) {\n        return;\n      }\n\n      if (dispatchEvent(this.element, EVENT_CROP_START, {\n        originalEvent: e,\n        action: action\n      }) === false) {\n        return;\n      } // This line is required for preventing page zooming in iOS browsers\n\n\n      e.preventDefault();\n      this.action = action;\n      this.cropping = false;\n\n      if (action === ACTION_CROP) {\n        this.cropping = true;\n        addClass(this.dragBox, CLASS_MODAL);\n      }\n    },\n    cropMove: function cropMove(e) {\n      var action = this.action;\n\n      if (this.disabled || !action) {\n        return;\n      }\n\n      var pointers = this.pointers;\n      e.preventDefault();\n\n      if (dispatchEvent(this.element, EVENT_CROP_MOVE, {\n        originalEvent: e,\n        action: action\n      }) === false) {\n        return;\n      }\n\n      if (e.changedTouches) {\n        forEach(e.changedTouches, function (touch) {\n          // The first parameter should not be undefined (#432)\n          assign(pointers[touch.identifier] || {}, getPointer(touch, true));\n        });\n      } else {\n        assign(pointers[e.pointerId || 0] || {}, getPointer(e, true));\n      }\n\n      this.change(e);\n    },\n    cropEnd: function cropEnd(e) {\n      if (this.disabled) {\n        return;\n      }\n\n      var action = this.action,\n          pointers = this.pointers;\n\n      if (e.changedTouches) {\n        forEach(e.changedTouches, function (touch) {\n          delete pointers[touch.identifier];\n        });\n      } else {\n        delete pointers[e.pointerId || 0];\n      }\n\n      if (!action) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (!Object.keys(pointers).length) {\n        this.action = '';\n      }\n\n      if (this.cropping) {\n        this.cropping = false;\n        toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);\n      }\n\n      dispatchEvent(this.element, EVENT_CROP_END, {\n        originalEvent: e,\n        action: action\n      });\n    }\n  };\n\n  var change = {\n    change: function change(e) {\n      var options = this.options,\n          canvasData = this.canvasData,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData,\n          pointers = this.pointers;\n      var action = this.action;\n      var aspectRatio = options.aspectRatio;\n      var left = cropBoxData.left,\n          top = cropBoxData.top,\n          width = cropBoxData.width,\n          height = cropBoxData.height;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = containerData.width;\n      var maxHeight = containerData.height;\n      var renderable = true;\n      var offset; // Locking aspect ratio in \"free mode\" by holding shift key\n\n      if (!aspectRatio && e.shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (this.limited) {\n        minLeft = cropBoxData.minLeft;\n        minTop = cropBoxData.minTop;\n        maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n        maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n      }\n\n      var pointer = pointers[Object.keys(pointers)[0]];\n      var range = {\n        x: pointer.endX - pointer.startX,\n        y: pointer.endY - pointer.startY\n      };\n\n      var check = function check(side) {\n        switch (side) {\n          case ACTION_EAST:\n            if (right + range.x > maxWidth) {\n              range.x = maxWidth - right;\n            }\n\n            break;\n\n          case ACTION_WEST:\n            if (left + range.x < minLeft) {\n              range.x = minLeft - left;\n            }\n\n            break;\n\n          case ACTION_NORTH:\n            if (top + range.y < minTop) {\n              range.y = minTop - top;\n            }\n\n            break;\n\n          case ACTION_SOUTH:\n            if (bottom + range.y > maxHeight) {\n              range.y = maxHeight - bottom;\n            }\n\n            break;\n\n          default:\n        }\n      };\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n        // Resize crop box\n\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_EAST);\n          width += range.x;\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_NORTH);\n          height -= range.y;\n          top += range.y;\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_WEST);\n          width -= range.x;\n          left += range.x;\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_SOUTH);\n          height += range.y;\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += cropBoxData.width - width;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_WEST);\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_EAST);\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n        // Move canvas\n\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n        // Zoom canvas\n\n        case ACTION_ZOOM:\n          this.zoom(getMaxZoomRatio(pointers), e);\n          renderable = false;\n          break;\n        // Create crop box\n\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = getOffset(this.cropper);\n          left = pointer.startX - offset.left;\n          top = pointer.startY - offset.top;\n          width = cropBoxData.minWidth;\n          height = cropBoxData.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          } // Show the crop box if is hidden\n\n\n          if (!this.cropped) {\n            removeClass(this.cropBox, CLASS_HIDDEN);\n            this.cropped = true;\n\n            if (this.limited) {\n              this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n\n        default:\n      }\n\n      if (renderable) {\n        cropBoxData.width = width;\n        cropBoxData.height = height;\n        cropBoxData.left = left;\n        cropBoxData.top = top;\n        this.action = action;\n        this.renderCropBox();\n      } // Override\n\n\n      forEach(pointers, function (p) {\n        p.startX = p.endX;\n        p.startY = p.endY;\n      });\n    }\n  };\n\n  var methods = {\n    // Show the crop box manually\n    crop: function crop() {\n      if (this.ready && !this.cropped && !this.disabled) {\n        this.cropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          addClass(this.dragBox, CLASS_MODAL);\n        }\n\n        removeClass(this.cropBox, CLASS_HIDDEN);\n        this.setCropBoxData(this.initialCropBoxData);\n      }\n\n      return this;\n    },\n    // Reset the image and crop box to their initial states\n    reset: function reset() {\n      if (this.ready && !this.disabled) {\n        this.imageData = assign({}, this.initialImageData);\n        this.canvasData = assign({}, this.initialCanvasData);\n        this.cropBoxData = assign({}, this.initialCropBoxData);\n        this.renderCanvas();\n\n        if (this.cropped) {\n          this.renderCropBox();\n        }\n      }\n\n      return this;\n    },\n    // Clear the crop box\n    clear: function clear() {\n      if (this.cropped && !this.disabled) {\n        assign(this.cropBoxData, {\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0\n        });\n        this.cropped = false;\n        this.renderCropBox();\n        this.limitCanvas(true, true); // Render canvas after crop box rendered\n\n        this.renderCanvas();\n        removeClass(this.dragBox, CLASS_MODAL);\n        addClass(this.cropBox, CLASS_HIDDEN);\n      }\n\n      return this;\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     * @param {string} url - The new URL.\n     * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.\n     * @returns {Cropper} this\n     */\n    replace: function replace(url) {\n      var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!this.disabled && url) {\n        if (this.isImg) {\n          this.element.src = url;\n        }\n\n        if (hasSameSize) {\n          this.url = url;\n          this.image.src = url;\n\n          if (this.ready) {\n            this.viewBoxImage.src = url;\n            forEach(this.previews, function (element) {\n              element.getElementsByTagName('img')[0].src = url;\n            });\n          }\n        } else {\n          if (this.isImg) {\n            this.replaced = true;\n          }\n\n          this.options.data = null;\n          this.uncreate();\n          this.load(url);\n        }\n      }\n\n      return this;\n    },\n    // Enable (unfreeze) the cropper\n    enable: function enable() {\n      if (this.ready && this.disabled) {\n        this.disabled = false;\n        removeClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n    // Disable (freeze) the cropper\n    disable: function disable() {\n      if (this.ready && !this.disabled) {\n        this.disabled = true;\n        addClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n\n    /**\n     * Destroy the cropper and remove the instance from the image\n     * @returns {Cropper} this\n     */\n    destroy: function destroy() {\n      var element = this.element;\n\n      if (!element[NAMESPACE]) {\n        return this;\n      }\n\n      element[NAMESPACE] = undefined;\n\n      if (this.isImg && this.replaced) {\n        element.src = this.originalUrl;\n      }\n\n      this.uncreate();\n      return this;\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     * @param {number} offsetX - The relative offset distance on the x-axis.\n     * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.\n     * @returns {Cropper} this\n     */\n    move: function move(offsetX) {\n      var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;\n      var _this$canvasData = this.canvasData,\n          left = _this$canvasData.left,\n          top = _this$canvasData.top;\n      return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     * @param {number} x - The x-axis coordinate.\n     * @param {number} [y=x] - The y-axis coordinate.\n     * @returns {Cropper} this\n     */\n    moveTo: function moveTo(x) {\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n      var canvasData = this.canvasData;\n      var changed = false;\n      x = Number(x);\n      y = Number(y);\n\n      if (this.ready && !this.disabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvasData.left = x;\n          changed = true;\n        }\n\n        if (isNumber(y)) {\n          canvasData.top = y;\n          changed = true;\n        }\n\n        if (changed) {\n          this.renderCanvas(true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoom: function zoom(ratio, _originalEvent) {\n      var canvasData = this.canvasData;\n      ratio = Number(ratio);\n\n      if (ratio < 0) {\n        ratio = 1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Object} pivot - The zoom pivot point coordinate.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoomTo: function zoomTo(ratio, pivot, _originalEvent) {\n      var options = this.options,\n          canvasData = this.canvasData;\n      var width = canvasData.width,\n          height = canvasData.height,\n          naturalWidth = canvasData.naturalWidth,\n          naturalHeight = canvasData.naturalHeight;\n      ratio = Number(ratio);\n\n      if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n        var newWidth = naturalWidth * ratio;\n        var newHeight = naturalHeight * ratio;\n\n        if (dispatchEvent(this.element, EVENT_ZOOM, {\n          ratio: ratio,\n          oldRatio: width / naturalWidth,\n          originalEvent: _originalEvent\n        }) === false) {\n          return this;\n        }\n\n        if (_originalEvent) {\n          var pointers = this.pointers;\n          var offset = getOffset(this.cropper);\n          var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\n            pageX: _originalEvent.pageX,\n            pageY: _originalEvent.pageY\n          }; // Zoom from the triggering point of the event\n\n          canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n        } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {\n          canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n        } else {\n          // Zoom from the center of the canvas\n          canvasData.left -= (newWidth - width) / 2;\n          canvasData.top -= (newHeight - height) / 2;\n        }\n\n        canvasData.width = newWidth;\n        canvasData.height = newHeight;\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotate: function rotate(degree) {\n      return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotateTo: function rotateTo(degree) {\n      degree = Number(degree);\n\n      if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n        this.imageData.rotate = degree % 360;\n        this.renderCanvas(true, true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Scale the image on the x-axis.\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @returns {Cropper} this\n     */\n    scaleX: function scaleX(_scaleX) {\n      var scaleY = this.imageData.scaleY;\n      return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the image on the y-axis.\n     * @param {number} scaleY - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scaleY: function scaleY(_scaleY) {\n      var scaleX = this.imageData.scaleX;\n      return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n    },\n\n    /**\n     * Scale the image\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scale: function scale(scaleX) {\n      var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n      var imageData = this.imageData;\n      var transformed = false;\n      scaleX = Number(scaleX);\n      scaleY = Number(scaleY);\n\n      if (this.ready && !this.disabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          imageData.scaleX = scaleX;\n          transformed = true;\n        }\n\n        if (isNumber(scaleY)) {\n          imageData.scaleY = scaleY;\n          transformed = true;\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     * @param {boolean} [rounded=false] - Indicate if round the data values or not.\n     * @returns {Object} The result cropped data.\n     */\n    getData: function getData$$1() {\n      var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var data;\n\n      if (this.ready && this.cropped) {\n        data = {\n          x: cropBoxData.left - canvasData.left,\n          y: cropBoxData.top - canvasData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n        var ratio = imageData.width / imageData.naturalWidth;\n        forEach(data, function (n, i) {\n          data[i] = n / ratio;\n        });\n\n        if (rounded) {\n          // In case rounding off leads to extra 1px in right or bottom border\n          // we should round the top-left corner and the dimension (#343).\n          var bottom = Math.round(data.y + data.height);\n          var right = Math.round(data.x + data.width);\n          data.x = Math.round(data.x);\n          data.y = Math.round(data.y);\n          data.width = right - data.x;\n          data.height = bottom - data.y;\n        }\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = imageData.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = imageData.scaleX || 1;\n        data.scaleY = imageData.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     * @param {Object} data - The new data.\n     * @returns {Cropper} this\n     */\n    setData: function setData$$1(data) {\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData;\n      var cropBoxData = {};\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        var transformed = false;\n\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n            imageData.rotate = data.rotate;\n            transformed = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n            imageData.scaleX = data.scaleX;\n            transformed = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n            imageData.scaleY = data.scaleY;\n            transformed = true;\n          }\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n\n        var ratio = imageData.width / imageData.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvasData.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvasData.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the container size data.\n     * @returns {Object} The result container data.\n     */\n    getContainerData: function getContainerData() {\n      return this.ready ? assign({}, this.containerData) : {};\n    },\n\n    /**\n     * Get the image position and size data.\n     * @returns {Object} The result image data.\n     */\n    getImageData: function getImageData() {\n      return this.sized ? assign({}, this.imageData) : {};\n    },\n\n    /**\n     * Get the canvas position and size data.\n     * @returns {Object} The result canvas data.\n     */\n    getCanvasData: function getCanvasData() {\n      var canvasData = this.canvasData;\n      var data = {};\n\n      if (this.ready) {\n        forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\n          data[n] = canvasData[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data.\n     * @param {Object} data - The new canvas data.\n     * @returns {Cropper} this\n     */\n    setCanvasData: function setCanvasData(data) {\n      var canvasData = this.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvasData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvasData.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvasData.width = data.width;\n          canvasData.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvasData.height = data.height;\n          canvasData.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the crop box position and size data.\n     * @returns {Object} The result crop box data.\n     */\n    getCropBoxData: function getCropBoxData() {\n      var cropBoxData = this.cropBoxData;\n      var data;\n\n      if (this.ready && this.cropped) {\n        data = {\n          left: cropBoxData.left,\n          top: cropBoxData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data.\n     * @param {Object} data - The new crop box data.\n     * @returns {Cropper} this\n     */\n    setCropBoxData: function setCropBoxData(data) {\n      var cropBoxData = this.cropBoxData;\n      var aspectRatio = this.options.aspectRatio;\n      var widthChanged;\n      var heightChanged;\n\n      if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          cropBoxData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBoxData.top = data.top;\n        }\n\n        if (isNumber(data.width) && data.width !== cropBoxData.width) {\n          widthChanged = true;\n          cropBoxData.width = data.width;\n        }\n\n        if (isNumber(data.height) && data.height !== cropBoxData.height) {\n          heightChanged = true;\n          cropBoxData.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (widthChanged) {\n            cropBoxData.height = cropBoxData.width / aspectRatio;\n          } else if (heightChanged) {\n            cropBoxData.width = cropBoxData.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n\n      return this;\n    },\n\n    /**\n     * Get a canvas drawn the cropped image.\n     * @param {Object} [options={}] - The config options.\n     * @returns {HTMLCanvasElement} - The result canvas.\n     */\n    getCroppedCanvas: function getCroppedCanvas() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this.ready || !window.HTMLCanvasElement) {\n        return null;\n      }\n\n      var canvasData = this.canvasData;\n      var source = getSourceCanvas(this.image, this.imageData, canvasData, options); // Returns the source canvas if it is not cropped.\n\n      if (!this.cropped) {\n        return source;\n      }\n\n      var _this$getData = this.getData(),\n          initialX = _this$getData.x,\n          initialY = _this$getData.y,\n          initialWidth = _this$getData.width,\n          initialHeight = _this$getData.height;\n\n      var ratio = source.width / Math.floor(canvasData.naturalWidth);\n\n      if (ratio !== 1) {\n        initialX *= ratio;\n        initialY *= ratio;\n        initialWidth *= ratio;\n        initialHeight *= ratio;\n      }\n\n      var aspectRatio = initialWidth / initialHeight;\n      var maxSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.maxWidth || Infinity,\n        height: options.maxHeight || Infinity\n      });\n      var minSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.minWidth || 0,\n        height: options.minHeight || 0\n      }, 'cover');\n\n      var _getAdjustedSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.width || (ratio !== 1 ? source.width : initialWidth),\n        height: options.height || (ratio !== 1 ? source.height : initialHeight)\n      }),\n          width = _getAdjustedSizes.width,\n          height = _getAdjustedSizes.height;\n\n      width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n      height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      canvas.width = normalizeDecimalNumber(width);\n      canvas.height = normalizeDecimalNumber(height);\n      context.fillStyle = options.fillColor || 'transparent';\n      context.fillRect(0, 0, width, height);\n      var _options$imageSmoothi = options.imageSmoothingEnabled,\n          imageSmoothingEnabled = _options$imageSmoothi === void 0 ? true : _options$imageSmoothi,\n          imageSmoothingQuality = options.imageSmoothingQuality;\n      context.imageSmoothingEnabled = imageSmoothingEnabled;\n\n      if (imageSmoothingQuality) {\n        context.imageSmoothingQuality = imageSmoothingQuality;\n      } // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n\n\n      var sourceWidth = source.width;\n      var sourceHeight = source.height; // Source canvas parameters\n\n      var srcX = initialX;\n      var srcY = initialY;\n      var srcWidth;\n      var srcHeight; // Destination canvas parameters\n\n      var dstX;\n      var dstY;\n      var dstWidth;\n      var dstHeight;\n\n      if (srcX <= -initialWidth || srcX > sourceWidth) {\n        srcX = 0;\n        srcWidth = 0;\n        dstX = 0;\n        dstWidth = 0;\n      } else if (srcX <= 0) {\n        dstX = -srcX;\n        srcX = 0;\n        srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n        dstWidth = srcWidth;\n      } else if (srcX <= sourceWidth) {\n        dstX = 0;\n        srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n        dstWidth = srcWidth;\n      }\n\n      if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n        srcY = 0;\n        srcHeight = 0;\n        dstY = 0;\n        dstHeight = 0;\n      } else if (srcY <= 0) {\n        dstY = -srcY;\n        srcY = 0;\n        srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n        dstHeight = srcHeight;\n      } else if (srcY <= sourceHeight) {\n        dstY = 0;\n        srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n        dstHeight = srcHeight;\n      }\n\n      var params = [srcX, srcY, srcWidth, srcHeight]; // Avoid \"IndexSizeError\"\n\n      if (dstWidth > 0 && dstHeight > 0) {\n        var scale = width / initialWidth;\n        params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n      } // All the numerical parameters should be integer for `drawImage`\n      // https://github.com/fengyuanchen/cropper/issues/476\n\n\n      context.drawImage.apply(context, [source].concat(_toConsumableArray(params.map(function (param) {\n        return Math.floor(normalizeDecimalNumber(param));\n      }))));\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box.\n     * @param {number} aspectRatio - The new aspect ratio.\n     * @returns {Cropper} this\n     */\n    setAspectRatio: function setAspectRatio(aspectRatio) {\n      var options = this.options;\n\n      if (!this.disabled && !isUndefined(aspectRatio)) {\n        // 0 -> NaN\n        options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n\n        if (this.ready) {\n          this.initCropBox();\n\n          if (this.cropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Change the drag mode.\n     * @param {string} mode - The new drag mode.\n     * @returns {Cropper} this\n     */\n    setDragMode: function setDragMode(mode) {\n      var options = this.options,\n          dragBox = this.dragBox,\n          face = this.face;\n\n      if (this.ready && !this.disabled) {\n        var croppable = mode === DRAG_MODE_CROP;\n        var movable = options.movable && mode === DRAG_MODE_MOVE;\n        mode = croppable || movable ? mode : DRAG_MODE_NONE;\n        options.dragMode = mode;\n        setData(dragBox, DATA_ACTION, mode);\n        toggleClass(dragBox, CLASS_CROP, croppable);\n        toggleClass(dragBox, CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n          // Sync drag mode to crop box when it is not movable\n          setData(face, DATA_ACTION, mode);\n          toggleClass(face, CLASS_CROP, croppable);\n          toggleClass(face, CLASS_MOVE, movable);\n        }\n      }\n\n      return this;\n    }\n  };\n\n  var AnotherCropper = WINDOW.Cropper;\n\n  var Cropper =\n  /*#__PURE__*/\n  function () {\n    /**\n     * Create a new Cropper.\n     * @param {Element} element - The target element for cropping.\n     * @param {Object} [options={}] - The configuration options.\n     */\n    function Cropper(element) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, Cropper);\n\n      if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {\n        throw new Error('The first argument is required and must be an <img> or <canvas> element.');\n      }\n\n      this.element = element;\n      this.options = assign({}, DEFAULTS, isPlainObject(options) && options);\n      this.cropped = false;\n      this.disabled = false;\n      this.pointers = {};\n      this.ready = false;\n      this.reloading = false;\n      this.replaced = false;\n      this.sized = false;\n      this.sizing = false;\n      this.init();\n    }\n\n    _createClass(Cropper, [{\n      key: \"init\",\n      value: function init() {\n        var element = this.element;\n        var tagName = element.tagName.toLowerCase();\n        var url;\n\n        if (element[NAMESPACE]) {\n          return;\n        }\n\n        element[NAMESPACE] = this;\n\n        if (tagName === 'img') {\n          this.isImg = true; // e.g.: \"img/picture.jpg\"\n\n          url = element.getAttribute('src') || '';\n          this.originalUrl = url; // Stop when it's a blank image\n\n          if (!url) {\n            return;\n          } // e.g.: \"http://example.com/img/picture.jpg\"\n\n\n          url = element.src;\n        } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n          url = element.toDataURL();\n        }\n\n        this.load(url);\n      }\n    }, {\n      key: \"load\",\n      value: function load(url) {\n        var _this = this;\n\n        if (!url) {\n          return;\n        }\n\n        this.url = url;\n        this.imageData = {};\n        var element = this.element,\n            options = this.options;\n\n        if (!options.rotatable && !options.scalable) {\n          options.checkOrientation = false;\n        } // Only IE10+ supports Typed Arrays\n\n\n        if (!options.checkOrientation || !window.ArrayBuffer) {\n          this.clone();\n          return;\n        } // XMLHttpRequest disallows to open a Data URL in some browsers like IE11 and Safari\n\n\n        if (REGEXP_DATA_URL.test(url)) {\n          if (REGEXP_DATA_URL_JPEG.test(url)) {\n            this.read(dataURLToArrayBuffer(url));\n          } else {\n            this.clone();\n          }\n\n          return;\n        }\n\n        var xhr = new XMLHttpRequest();\n        var clone = this.clone.bind(this);\n        this.reloading = true;\n        this.xhr = xhr;\n        xhr.ontimeout = clone;\n        xhr.onabort = clone;\n        xhr.onerror = clone;\n\n        xhr.onprogress = function () {\n          if (xhr.getResponseHeader('content-type') !== MIME_TYPE_JPEG) {\n            xhr.abort();\n          }\n        };\n\n        xhr.onload = function () {\n          _this.read(xhr.response);\n        };\n\n        xhr.onloadend = function () {\n          _this.reloading = false;\n          _this.xhr = null;\n        }; // Bust cache when there is a \"crossOrigin\" property to avoid browser cache error\n\n\n        if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n          url = addTimestamp(url);\n        }\n\n        xhr.open('GET', url);\n        xhr.responseType = 'arraybuffer';\n        xhr.withCredentials = element.crossOrigin === 'use-credentials';\n        xhr.send();\n      }\n    }, {\n      key: \"read\",\n      value: function read(arrayBuffer) {\n        var options = this.options,\n            imageData = this.imageData;\n        var orientation = resetAndGetOrientation(arrayBuffer);\n        var rotate = 0;\n        var scaleX = 1;\n        var scaleY = 1;\n\n        if (orientation > 1) {\n          // Generate a new Data URL with the orientation value set to 1\n          // as some iOS browsers will render image with its orientation\n          this.url = arrayBufferToDataURL(arrayBuffer, MIME_TYPE_JPEG);\n\n          var _parseOrientation = parseOrientation(orientation);\n\n          rotate = _parseOrientation.rotate;\n          scaleX = _parseOrientation.scaleX;\n          scaleY = _parseOrientation.scaleY;\n        }\n\n        if (options.rotatable) {\n          imageData.rotate = rotate;\n        }\n\n        if (options.scalable) {\n          imageData.scaleX = scaleX;\n          imageData.scaleY = scaleY;\n        }\n\n        this.clone();\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var element = this.element,\n            url = this.url;\n        var crossOrigin;\n        var crossOriginUrl;\n\n        if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {\n          crossOrigin = element.crossOrigin;\n\n          if (crossOrigin) {\n            crossOriginUrl = url;\n          } else {\n            crossOrigin = 'anonymous'; // Bust cache when there is not a \"crossOrigin\" property\n\n            crossOriginUrl = addTimestamp(url);\n          }\n        }\n\n        this.crossOrigin = crossOrigin;\n        this.crossOriginUrl = crossOriginUrl;\n        var image = document.createElement('img');\n\n        if (crossOrigin) {\n          image.crossOrigin = crossOrigin;\n        }\n\n        image.src = crossOriginUrl || url;\n        this.image = image;\n        image.onload = this.start.bind(this);\n        image.onerror = this.stop.bind(this);\n        addClass(image, CLASS_HIDE);\n        element.parentNode.insertBefore(image, element.nextSibling);\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n\n        var image = this.isImg ? this.element : this.image;\n        image.onload = null;\n        image.onerror = null;\n        this.sizing = true;\n        var IS_SAFARI = WINDOW.navigator && /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i.test(WINDOW.navigator.userAgent);\n\n        var done = function done(naturalWidth, naturalHeight) {\n          assign(_this2.imageData, {\n            naturalWidth: naturalWidth,\n            naturalHeight: naturalHeight,\n            aspectRatio: naturalWidth / naturalHeight\n          });\n          _this2.sizing = false;\n          _this2.sized = true;\n\n          _this2.build();\n        }; // Modern browsers (except Safari)\n\n\n        if (image.naturalWidth && !IS_SAFARI) {\n          done(image.naturalWidth, image.naturalHeight);\n          return;\n        }\n\n        var sizingImage = document.createElement('img');\n        var body = document.body || document.documentElement;\n        this.sizingImage = sizingImage;\n\n        sizingImage.onload = function () {\n          done(sizingImage.width, sizingImage.height);\n\n          if (!IS_SAFARI) {\n            body.removeChild(sizingImage);\n          }\n        };\n\n        sizingImage.src = image.src; // iOS Safari will convert the image automatically\n        // with its orientation once append it into DOM (#279)\n\n        if (!IS_SAFARI) {\n          sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';\n          body.appendChild(sizingImage);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var image = this.image;\n        image.onload = null;\n        image.onerror = null;\n        image.parentNode.removeChild(image);\n        this.image = null;\n      }\n    }, {\n      key: \"build\",\n      value: function build() {\n        if (!this.sized || this.ready) {\n          return;\n        }\n\n        var element = this.element,\n            options = this.options,\n            image = this.image; // Create cropper elements\n\n        var container = element.parentNode;\n        var template = document.createElement('div');\n        template.innerHTML = TEMPLATE;\n        var cropper = template.querySelector(\".\".concat(NAMESPACE, \"-container\"));\n        var canvas = cropper.querySelector(\".\".concat(NAMESPACE, \"-canvas\"));\n        var dragBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-drag-box\"));\n        var cropBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-crop-box\"));\n        var face = cropBox.querySelector(\".\".concat(NAMESPACE, \"-face\"));\n        this.container = container;\n        this.cropper = cropper;\n        this.canvas = canvas;\n        this.dragBox = dragBox;\n        this.cropBox = cropBox;\n        this.viewBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-view-box\"));\n        this.face = face;\n        canvas.appendChild(image); // Hide the original image\n\n        addClass(element, CLASS_HIDDEN); // Inserts the cropper after to the current image\n\n        container.insertBefore(cropper, element.nextSibling); // Show the image if is hidden\n\n        if (!this.isImg) {\n          removeClass(image, CLASS_HIDE);\n        }\n\n        this.initPreview();\n        this.bind();\n        options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\n        options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n        options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n        addClass(cropBox, CLASS_HIDDEN);\n\n        if (!options.guides) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-dashed\")), CLASS_HIDDEN);\n        }\n\n        if (!options.center) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-center\")), CLASS_HIDDEN);\n        }\n\n        if (options.background) {\n          addClass(cropper, \"\".concat(NAMESPACE, \"-bg\"));\n        }\n\n        if (!options.highlight) {\n          addClass(face, CLASS_INVISIBLE);\n        }\n\n        if (options.cropBoxMovable) {\n          addClass(face, CLASS_MOVE);\n          setData(face, DATA_ACTION, ACTION_ALL);\n        }\n\n        if (!options.cropBoxResizable) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-line\")), CLASS_HIDDEN);\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-point\")), CLASS_HIDDEN);\n        }\n\n        this.render();\n        this.ready = true;\n        this.setDragMode(options.dragMode);\n\n        if (options.autoCrop) {\n          this.crop();\n        }\n\n        this.setData(options.data);\n\n        if (isFunction(options.ready)) {\n          addListener(element, EVENT_READY, options.ready, {\n            once: true\n          });\n        }\n\n        dispatchEvent(element, EVENT_READY);\n      }\n    }, {\n      key: \"unbuild\",\n      value: function unbuild() {\n        if (!this.ready) {\n          return;\n        }\n\n        this.ready = false;\n        this.unbind();\n        this.resetPreview();\n        this.cropper.parentNode.removeChild(this.cropper);\n        removeClass(this.element, CLASS_HIDDEN);\n      }\n    }, {\n      key: \"uncreate\",\n      value: function uncreate() {\n        if (this.ready) {\n          this.unbuild();\n          this.ready = false;\n          this.cropped = false;\n        } else if (this.sizing) {\n          this.sizingImage.onload = null;\n          this.sizing = false;\n          this.sized = false;\n        } else if (this.reloading) {\n          this.xhr.onabort = null;\n          this.xhr.abort();\n        } else if (this.image) {\n          this.stop();\n        }\n      }\n      /**\n       * Get the no conflict cropper class.\n       * @returns {Cropper} The cropper class.\n       */\n\n    }], [{\n      key: \"noConflict\",\n      value: function noConflict() {\n        window.Cropper = AnotherCropper;\n        return Cropper;\n      }\n      /**\n       * Change the default options.\n       * @param {Object} options - The new default options.\n       */\n\n    }, {\n      key: \"setDefaults\",\n      value: function setDefaults(options) {\n        assign(DEFAULTS, isPlainObject(options) && options);\n      }\n    }]);\n\n    return Cropper;\n  }();\n\n  assign(Cropper.prototype, render, preview, events, handlers, change, methods);\n\n  return Cropper;\n\n})));\n"],"sourceRoot":""}