{"version":3,"sources":["webpack:///./node_modules/gridstack/dist/gridstack.js","webpack:///./node_modules/gridstack/dist/gridstack.jQueryUI.js"],"names":["__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","__webpack_require__","undefined","$","_","scope","window","obsolete","f","oldName","newName","wrapper","console","warn","apply","this","arguments","prototype","obsoleteOpts","Utils","isIntercepted","a","b","x","width","y","height","sort","nodes","dir","chain","map","node","max","value","sortBy","n","createStylesheet","id","style","document","createElement","setAttribute","styleSheet","cssText","appendChild","createTextNode","getElementsByTagName","sheet","removeStylesheet","remove","insertCSSRule","selector","rules","index","insertRule","addRule","toBool","v","toLowerCase","Boolean","_collisionNodeCheck","nn","_didCollide","bn","newY","_isAddNodeIntercepted","parseHeight","val","heightUnit","isString","match","Error","parseFloat","unit","GridStackDragDropPlugin","grid","is_intercepted","create_stylesheet","remove_stylesheet","insert_css_rule","registeredPlugins","registerPlugin","pluginClass","push","resizable","el","opts","draggable","droppable","isDroppable","on","eventName","callback","idSeq","GridStackEngine","onchange","floatMode","items","float","_updateCounter","_float","_addedNodes","_removedNodes","batchUpdate","commit","_packNodes","_notify","getNodeDataByDOMEl","find","get","_fixCollisions","_sortNodes","hasLocked","locked","collisionNode","bind","moveNode","isAreaEmpty","each","i","_updating","_origY","_dirty","canBeMoved","take","_prepareNode","resizing","defaults","parseInt","autoPosition","noResize","noMove","args","Array","slice","call","deletedNodes","concat","getDirtyNodes","cleanNodes","filter","addNode","triggerAddEvent","maxWidth","Math","min","maxHeight","minWidth","minHeight","_id","floor","clone","removeNode","detachNode","without","canMoveNode","isNodeChangedPosition","clonedNode","extend","res","getGridHeight","canBePlacedWithRespectToHeight","noPack","lastTriedX","lastTriedY","lastTriedWidth","lastTriedHeight","reduce","memo","beginUpdate","endUpdate","GridStack","oneColumnMode","isAutoCellHeight","self","container","handle_class","handleClass","item_class","itemClass","placeholder_class","placeholderClass","placeholder_text","placeholderText","cell_height","cellHeight","vertical_margin","verticalMargin","min_width","static_grid","staticGrid","is_nested","isNested","always_show_resize_handle","alwaysShowResizeHandle","closest","length","attr","handle","auto","_class","random","toFixed","animate","autoHide","handles","scroll","appendTo","disableDrag","disableResize","rtl","removable","removeTimeout","verticalMarginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeClass","ddPlugin","first","dd","css","addClass","cellWidth","_setStaticClass","_initStyles","_updateStyles","elements","_this","children","_prepareElement","setAnimation","placeholder","hide","_updateContainerHeight","_updateHeightsOnResize","throttle","onResizeHandler","_isOneColumnMode","append","trigger","removeClass","resize","trashZone","accept","event","ui","data","_grid","_setupRemovingTimeout","_clearRemovingTimeout","acceptWidgets","draggingElement","onDrag","pos","getCellFromPixel","offset","_added","show","_beforeDragX","_beforeDragY","is","origNode","ceil","outerWidth","outerHeight","_temporary","unbind","detach","originalNode","_triggerRemoveEvent","removeAttr","enableSelection","removeData","_prepareElementsByNode","_triggerAddEvent","_triggerChangeEvent","forceTrigger","hasChanges","eventParams","_stylesId","_styles","_max","getHeight","prefix","nbRows","nbMargins","innerWidth","documentElement","clientWidth","body","_removeTimeout","setTimeout","_isAboutToRemove","clearTimeout","dragOrResize","round","position","left","top","type","size","_temporaryRemoved","onStartMoving","o","strictCellHeight","onEndMoving","forceNotify","nestedGrids","start","stop","drag","enable","addWidget","makeWidget","willItFit","removeWidget","removeAll","destroy","detachGrid","off","disable","movable","enableMove","doEnable","includeNewWidgets","enableResize","isNaN","_updateElement","move","update","noUpdate","heightData","useOffset","containerPos","relativeLeft","relativeTop","columnWidth","rowHeight","setStatic","staticValue","staticClassName","_updateNodeWidths","oldWidth","newWidth","setGridWidth","gridWidth","doNotPropagate","batch_update","_fix_collisions","is_area_empty","_sort_nodes","_pack_nodes","_prepare_node","clean_nodes","get_dirty_nodes","add_node","remove_node","can_move_node","move_node","get_grid_height","begin_update","end_update","can_be_placed_with_respect_to_height","_trigger_change_event","_init_styles","_update_styles","_update_container_height","_is_one_column_mode","_prepare_element","set_animation","add_widget","make_widget","will_it_fit","remove_widget","remove_all","min_height","_update_element","cell_width","get_cell_from_pixel","set_static","_set_static_class","GridStackUI","Engine","fn","gridstack","exports","module","JQueryUIGridStackDragDropPlugin","Object","create","constructor","key","containment","parent"],"mappings":"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","file":"javascripts/vendors~widgetsystem-fcc00348e05da1be2c15.chunk.js","sourcesContent":["/**\n * gridstack.js 0.3.0\n * http://troolee.github.io/gridstack.js/\n * (c) 2014-2016 Pavel Reznikov, Dylan Weiss\n * gridstack.js may be freely distributed under the MIT license.\n * @preserve\n*/\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery', 'lodash'], factory);\n    } else if (typeof exports !== 'undefined') {\n        try { jQuery = require('jquery'); } catch (e) {}\n        try { _ = require('lodash'); } catch (e) {}\n        factory(jQuery, _);\n    } else {\n        factory(jQuery, _);\n    }\n})(function($, _) {\n\n    var scope = window;\n\n    var obsolete = function(f, oldName, newName) {\n        var wrapper = function() {\n            console.warn('gridstack.js: Function `' + oldName + '` is deprecated as of v0.2.5 and has been replaced ' +\n            'with `' + newName + '`. It will be **completely** removed in v1.0.');\n            return f.apply(this, arguments);\n        };\n        wrapper.prototype = f.prototype;\n\n        return wrapper;\n    };\n\n    var obsoleteOpts = function(oldName, newName) {\n        console.warn('gridstack.js: Option `' + oldName + '` is deprecated as of v0.2.5 and has been replaced with `' +\n            newName + '`. It will be **completely** removed in v1.0.');\n    };\n\n    var Utils = {\n        isIntercepted: function(a, b) {\n            return !(a.x + a.width <= b.x || b.x + b.width <= a.x || a.y + a.height <= b.y || b.y + b.height <= a.y);\n        },\n\n        sort: function(nodes, dir, width) {\n            width = width || _.chain(nodes).map(function(node) { return node.x + node.width; }).max().value();\n            dir = dir != -1 ? 1 : -1;\n            return _.sortBy(nodes, function(n) { return dir * (n.x + n.y * width); });\n        },\n\n        createStylesheet: function(id) {\n            var style = document.createElement('style');\n            style.setAttribute('type', 'text/css');\n            style.setAttribute('data-gs-style-id', id);\n            if (style.styleSheet) {\n                style.styleSheet.cssText = '';\n            } else {\n                style.appendChild(document.createTextNode(''));\n            }\n            document.getElementsByTagName('head')[0].appendChild(style);\n            return style.sheet;\n        },\n\n        removeStylesheet: function(id) {\n            $('STYLE[data-gs-style-id=' + id + ']').remove();\n        },\n\n        insertCSSRule: function(sheet, selector, rules, index) {\n            if (typeof sheet.insertRule === 'function') {\n                sheet.insertRule(selector + '{' + rules + '}', index);\n            } else if (typeof sheet.addRule === 'function') {\n                sheet.addRule(selector, rules, index);\n            }\n        },\n\n        toBool: function(v) {\n            if (typeof v == 'boolean') {\n                return v;\n            }\n            if (typeof v == 'string') {\n                v = v.toLowerCase();\n                return !(v === '' || v == 'no' || v == 'false' || v == '0');\n            }\n            return Boolean(v);\n        },\n\n        _collisionNodeCheck: function(n) {\n            return n != this.node && Utils.isIntercepted(n, this.nn);\n        },\n\n        _didCollide: function(bn) {\n            return Utils.isIntercepted({x: this.n.x, y: this.newY, width: this.n.width, height: this.n.height}, bn);\n        },\n\n        _isAddNodeIntercepted: function(n) {\n            return Utils.isIntercepted({x: this.x, y: this.y, width: this.node.width, height: this.node.height}, n);\n        },\n\n        parseHeight: function(val) {\n            var height = val;\n            var heightUnit = 'px';\n            if (height && _.isString(height)) {\n                var match = height.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw)?$/);\n                if (!match) {\n                    throw new Error('Invalid height');\n                }\n                heightUnit = match[2] || 'px';\n                height = parseFloat(match[1]);\n            }\n            return {height: height, unit: heightUnit};\n        }\n    };\n\n    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n    Utils.is_intercepted = obsolete(Utils.isIntercepted, 'is_intercepted', 'isIntercepted');\n\n    Utils.create_stylesheet = obsolete(Utils.createStylesheet, 'create_stylesheet', 'createStylesheet');\n\n    Utils.remove_stylesheet = obsolete(Utils.removeStylesheet, 'remove_stylesheet', 'removeStylesheet');\n\n    Utils.insert_css_rule = obsolete(Utils.insertCSSRule, 'insert_css_rule', 'insertCSSRule');\n    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n    /**\n    * @class GridStackDragDropPlugin\n    * Base class for drag'n'drop plugin.\n    */\n    function GridStackDragDropPlugin(grid) {\n        this.grid = grid;\n    }\n\n    GridStackDragDropPlugin.registeredPlugins = [];\n\n    GridStackDragDropPlugin.registerPlugin = function(pluginClass) {\n        GridStackDragDropPlugin.registeredPlugins.push(pluginClass);\n    };\n\n    GridStackDragDropPlugin.prototype.resizable = function(el, opts) {\n        return this;\n    };\n\n    GridStackDragDropPlugin.prototype.draggable = function(el, opts) {\n        return this;\n    };\n\n    GridStackDragDropPlugin.prototype.droppable = function(el, opts) {\n        return this;\n    };\n\n    GridStackDragDropPlugin.prototype.isDroppable = function(el) {\n        return false;\n    };\n\n    GridStackDragDropPlugin.prototype.on = function(el, eventName, callback) {\n        return this;\n    };\n\n\n    var idSeq = 0;\n\n    var GridStackEngine = function(width, onchange, floatMode, height, items) {\n        this.width = width;\n        this.float = floatMode || false;\n        this.height = height || 0;\n\n        this.nodes = items || [];\n        this.onchange = onchange || function() {};\n\n        this._updateCounter = 0;\n        this._float = this.float;\n\n        this._addedNodes = [];\n        this._removedNodes = [];\n    };\n\n    GridStackEngine.prototype.batchUpdate = function() {\n        this._updateCounter = 1;\n        this.float = true;\n    };\n\n    GridStackEngine.prototype.commit = function() {\n        if (this._updateCounter !== 0) {\n            this._updateCounter = 0;\n            this.float = this._float;\n            this._packNodes();\n            this._notify();\n        }\n    };\n\n    // For Meteor support: https://github.com/troolee/gridstack.js/pull/272\n    GridStackEngine.prototype.getNodeDataByDOMEl = function(el) {\n        return _.find(this.nodes, function(n) { return el.get(0) === n.el.get(0); });\n    };\n\n    GridStackEngine.prototype._fixCollisions = function(node) {\n        var self = this;\n        this._sortNodes(-1);\n\n        var nn = node;\n        var hasLocked = Boolean(_.find(this.nodes, function(n) { return n.locked; }));\n        if (!this.float && !hasLocked) {\n            nn = {x: 0, y: node.y, width: this.width, height: node.height};\n        }\n        while (true) {\n            var collisionNode = _.find(this.nodes, _.bind(Utils._collisionNodeCheck, {node: node, nn: nn}));\n            if (typeof collisionNode == 'undefined') {\n                return;\n            }\n            this.moveNode(collisionNode, collisionNode.x, node.y + node.height,\n                collisionNode.width, collisionNode.height, true);\n        }\n    };\n\n    GridStackEngine.prototype.isAreaEmpty = function(x, y, width, height) {\n        var nn = {x: x || 0, y: y || 0, width: width || 1, height: height || 1};\n        var collisionNode = _.find(this.nodes, _.bind(function(n) {\n            return Utils.isIntercepted(n, nn);\n        }, this));\n        return collisionNode === null || typeof collisionNode === 'undefined';\n    };\n\n    GridStackEngine.prototype._sortNodes = function(dir) {\n        this.nodes = Utils.sort(this.nodes, dir, this.width);\n    };\n\n    GridStackEngine.prototype._packNodes = function() {\n        this._sortNodes();\n\n        if (this.float) {\n            _.each(this.nodes, _.bind(function(n, i) {\n                if (n._updating || typeof n._origY == 'undefined' || n.y == n._origY) {\n                    return;\n                }\n\n                var newY = n.y;\n                while (newY >= n._origY) {\n                    var collisionNode = _.chain(this.nodes)\n                        .find(_.bind(Utils._didCollide, {n: n, newY: newY}))\n                        .value();\n\n                    if (!collisionNode) {\n                        n._dirty = true;\n                        n.y = newY;\n                    }\n                    --newY;\n                }\n            }, this));\n        } else {\n            _.each(this.nodes, _.bind(function(n, i) {\n                if (n.locked) {\n                    return;\n                }\n                while (n.y > 0) {\n                    var newY = n.y - 1;\n                    var canBeMoved = i === 0;\n\n                    if (i > 0) {\n                        var collisionNode = _.chain(this.nodes)\n                            .take(i)\n                            .find(_.bind(Utils._didCollide, {n: n, newY: newY}))\n                            .value();\n                        canBeMoved = typeof collisionNode == 'undefined';\n                    }\n\n                    if (!canBeMoved) {\n                        break;\n                    }\n                    n._dirty = n.y != newY;\n                    n.y = newY;\n                }\n            }, this));\n        }\n    };\n\n    GridStackEngine.prototype._prepareNode = function(node, resizing) {\n        node = _.defaults(node || {}, {width: 1, height: 1, x: 0, y: 0});\n\n        node.x = parseInt('' + node.x);\n        node.y = parseInt('' + node.y);\n        node.width = parseInt('' + node.width);\n        node.height = parseInt('' + node.height);\n        node.autoPosition = node.autoPosition || false;\n        node.noResize = node.noResize || false;\n        node.noMove = node.noMove || false;\n\n        if (node.width > this.width) {\n            node.width = this.width;\n        } else if (node.width < 1) {\n            node.width = 1;\n        }\n\n        if (node.height < 1) {\n            node.height = 1;\n        }\n\n        if (node.x < 0) {\n            node.x = 0;\n        }\n\n        if (node.x + node.width > this.width) {\n            if (resizing) {\n                node.width = this.width - node.x;\n            } else {\n                node.x = this.width - node.width;\n            }\n        }\n\n        if (node.y < 0) {\n            node.y = 0;\n        }\n\n        return node;\n    };\n\n    GridStackEngine.prototype._notify = function() {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args[0] = typeof args[0] === 'undefined' ? [] : [args[0]];\n        args[1] = typeof args[1] === 'undefined' ? true : args[1];\n        if (this._updateCounter) {\n            return;\n        }\n        var deletedNodes = args[0].concat(this.getDirtyNodes());\n        this.onchange(deletedNodes, args[1]);\n    };\n\n    GridStackEngine.prototype.cleanNodes = function() {\n        if (this._updateCounter) {\n            return;\n        }\n        _.each(this.nodes, function(n) {n._dirty = false; });\n    };\n\n    GridStackEngine.prototype.getDirtyNodes = function() {\n        return _.filter(this.nodes, function(n) { return n._dirty; });\n    };\n\n    GridStackEngine.prototype.addNode = function(node, triggerAddEvent) {\n        node = this._prepareNode(node);\n\n        if (typeof node.maxWidth != 'undefined') { node.width = Math.min(node.width, node.maxWidth); }\n        if (typeof node.maxHeight != 'undefined') { node.height = Math.min(node.height, node.maxHeight); }\n        if (typeof node.minWidth != 'undefined') { node.width = Math.max(node.width, node.minWidth); }\n        if (typeof node.minHeight != 'undefined') { node.height = Math.max(node.height, node.minHeight); }\n\n        node._id = ++idSeq;\n        node._dirty = true;\n\n        if (node.autoPosition) {\n            this._sortNodes();\n\n            for (var i = 0;; ++i) {\n                var x = i % this.width;\n                var y = Math.floor(i / this.width);\n                if (x + node.width > this.width) {\n                    continue;\n                }\n                if (!_.find(this.nodes, _.bind(Utils._isAddNodeIntercepted, {x: x, y: y, node: node}))) {\n                    node.x = x;\n                    node.y = y;\n                    break;\n                }\n            }\n        }\n\n        this.nodes.push(node);\n        if (typeof triggerAddEvent != 'undefined' && triggerAddEvent) {\n            this._addedNodes.push(_.clone(node));\n        }\n\n        this._fixCollisions(node);\n        this._packNodes();\n        this._notify();\n        return node;\n    };\n\n    GridStackEngine.prototype.removeNode = function(node, detachNode) {\n        detachNode = typeof detachNode === 'undefined' ? true : detachNode;\n        this._removedNodes.push(_.clone(node));\n        node._id = null;\n        this.nodes = _.without(this.nodes, node);\n        this._packNodes();\n        this._notify(node, detachNode);\n    };\n\n    GridStackEngine.prototype.canMoveNode = function(node, x, y, width, height) {\n        if (!this.isNodeChangedPosition(node, x, y, width, height)) {\n            return false;\n        }\n        var hasLocked = Boolean(_.find(this.nodes, function(n) { return n.locked; }));\n\n        if (!this.height && !hasLocked) {\n            return true;\n        }\n\n        var clonedNode;\n        var clone = new GridStackEngine(\n            this.width,\n            null,\n            this.float,\n            0,\n            _.map(this.nodes, function(n) {\n                if (n == node) {\n                    clonedNode = $.extend({}, n);\n                    return clonedNode;\n                }\n                return $.extend({}, n);\n            }));\n\n        if (typeof clonedNode === 'undefined') {\n            return true;\n        }\n\n        clone.moveNode(clonedNode, x, y, width, height);\n\n        var res = true;\n\n        if (hasLocked) {\n            res &= !Boolean(_.find(clone.nodes, function(n) {\n                return n != clonedNode && Boolean(n.locked) && Boolean(n._dirty);\n            }));\n        }\n        if (this.height) {\n            res &= clone.getGridHeight() <= this.height;\n        }\n\n        return res;\n    };\n\n    GridStackEngine.prototype.canBePlacedWithRespectToHeight = function(node) {\n        if (!this.height) {\n            return true;\n        }\n\n        var clone = new GridStackEngine(\n            this.width,\n            null,\n            this.float,\n            0,\n            _.map(this.nodes, function(n) { return $.extend({}, n); }));\n        clone.addNode(node);\n        return clone.getGridHeight() <= this.height;\n    };\n\n    GridStackEngine.prototype.isNodeChangedPosition = function(node, x, y, width, height) {\n        if (typeof x != 'number') { x = node.x; }\n        if (typeof y != 'number') { y = node.y; }\n        if (typeof width != 'number') { width = node.width; }\n        if (typeof height != 'number') { height = node.height; }\n\n        if (typeof node.maxWidth != 'undefined') { width = Math.min(width, node.maxWidth); }\n        if (typeof node.maxHeight != 'undefined') { height = Math.min(height, node.maxHeight); }\n        if (typeof node.minWidth != 'undefined') { width = Math.max(width, node.minWidth); }\n        if (typeof node.minHeight != 'undefined') { height = Math.max(height, node.minHeight); }\n\n        if (node.x == x && node.y == y && node.width == width && node.height == height) {\n            return false;\n        }\n        return true;\n    };\n\n    GridStackEngine.prototype.moveNode = function(node, x, y, width, height, noPack) {\n        if (!this.isNodeChangedPosition(node, x, y, width, height)) {\n            return node;\n        }\n        if (typeof x != 'number') { x = node.x; }\n        if (typeof y != 'number') { y = node.y; }\n        if (typeof width != 'number') { width = node.width; }\n        if (typeof height != 'number') { height = node.height; }\n\n        if (typeof node.maxWidth != 'undefined') { width = Math.min(width, node.maxWidth); }\n        if (typeof node.maxHeight != 'undefined') { height = Math.min(height, node.maxHeight); }\n        if (typeof node.minWidth != 'undefined') { width = Math.max(width, node.minWidth); }\n        if (typeof node.minHeight != 'undefined') { height = Math.max(height, node.minHeight); }\n\n        if (node.x == x && node.y == y && node.width == width && node.height == height) {\n            return node;\n        }\n\n        var resizing = node.width != width;\n        node._dirty = true;\n\n        node.x = x;\n        node.y = y;\n        node.width = width;\n        node.height = height;\n\n        node.lastTriedX = x;\n        node.lastTriedY = y;\n        node.lastTriedWidth = width;\n        node.lastTriedHeight = height;\n\n        node = this._prepareNode(node, resizing);\n\n        this._fixCollisions(node);\n        if (!noPack) {\n            this._packNodes();\n            this._notify();\n        }\n        return node;\n    };\n\n    GridStackEngine.prototype.getGridHeight = function() {\n        return _.reduce(this.nodes, function(memo, n) { return Math.max(memo, n.y + n.height); }, 0);\n    };\n\n    GridStackEngine.prototype.beginUpdate = function(node) {\n        _.each(this.nodes, function(n) {\n            n._origY = n.y;\n        });\n        node._updating = true;\n    };\n\n    GridStackEngine.prototype.endUpdate = function() {\n        _.each(this.nodes, function(n) {\n            n._origY = n.y;\n        });\n        var n = _.find(this.nodes, function(n) { return n._updating; });\n        if (n) {\n            n._updating = false;\n        }\n    };\n\n    var GridStack = function(el, opts) {\n        var self = this;\n        var oneColumnMode, isAutoCellHeight;\n\n        opts = opts || {};\n\n        this.container = $(el);\n\n        // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n        if (typeof opts.handle_class !== 'undefined') {\n            opts.handleClass = opts.handle_class;\n            obsoleteOpts('handle_class', 'handleClass');\n        }\n        if (typeof opts.item_class !== 'undefined') {\n            opts.itemClass = opts.item_class;\n            obsoleteOpts('item_class', 'itemClass');\n        }\n        if (typeof opts.placeholder_class !== 'undefined') {\n            opts.placeholderClass = opts.placeholder_class;\n            obsoleteOpts('placeholder_class', 'placeholderClass');\n        }\n        if (typeof opts.placeholder_text !== 'undefined') {\n            opts.placeholderText = opts.placeholder_text;\n            obsoleteOpts('placeholder_text', 'placeholderText');\n        }\n        if (typeof opts.cell_height !== 'undefined') {\n            opts.cellHeight = opts.cell_height;\n            obsoleteOpts('cell_height', 'cellHeight');\n        }\n        if (typeof opts.vertical_margin !== 'undefined') {\n            opts.verticalMargin = opts.vertical_margin;\n            obsoleteOpts('vertical_margin', 'verticalMargin');\n        }\n        if (typeof opts.min_width !== 'undefined') {\n            opts.minWidth = opts.min_width;\n            obsoleteOpts('min_width', 'minWidth');\n        }\n        if (typeof opts.static_grid !== 'undefined') {\n            opts.staticGrid = opts.static_grid;\n            obsoleteOpts('static_grid', 'staticGrid');\n        }\n        if (typeof opts.is_nested !== 'undefined') {\n            opts.isNested = opts.is_nested;\n            obsoleteOpts('is_nested', 'isNested');\n        }\n        if (typeof opts.always_show_resize_handle !== 'undefined') {\n            opts.alwaysShowResizeHandle = opts.always_show_resize_handle;\n            obsoleteOpts('always_show_resize_handle', 'alwaysShowResizeHandle');\n        }\n        // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n        opts.itemClass = opts.itemClass || 'grid-stack-item';\n        var isNested = this.container.closest('.' + opts.itemClass).length > 0;\n\n        this.opts = _.defaults(opts || {}, {\n            width: parseInt(this.container.attr('data-gs-width')) || 12,\n            height: parseInt(this.container.attr('data-gs-height')) || 0,\n            itemClass: 'grid-stack-item',\n            placeholderClass: 'grid-stack-placeholder',\n            placeholderText: '',\n            handle: '.grid-stack-item-content',\n            handleClass: null,\n            cellHeight: 60,\n            verticalMargin: 20,\n            auto: true,\n            minWidth: 768,\n            float: false,\n            staticGrid: false,\n            _class: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\n            animate: Boolean(this.container.attr('data-gs-animate')) || false,\n            alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\n            resizable: _.defaults(opts.resizable || {}, {\n                autoHide: !(opts.alwaysShowResizeHandle || false),\n                handles: 'se'\n            }),\n            draggable: _.defaults(opts.draggable || {}, {\n                handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) ||\n                    '.grid-stack-item-content',\n                scroll: false,\n                appendTo: 'body'\n            }),\n            disableDrag: opts.disableDrag || false,\n            disableResize: opts.disableResize || false,\n            rtl: 'auto',\n            removable: false,\n            removeTimeout: 2000,\n            verticalMarginUnit: 'px',\n            cellHeightUnit: 'px',\n            disableOneColumnMode: opts.disableOneColumnMode || false,\n            oneColumnModeClass: opts.oneColumnModeClass || 'grid-stack-one-column-mode',\n            ddPlugin: null\n        });\n\n        if (this.opts.ddPlugin === false) {\n            this.opts.ddPlugin = GridStackDragDropPlugin;\n        } else if (this.opts.ddPlugin === null) {\n            this.opts.ddPlugin = _.first(GridStackDragDropPlugin.registeredPlugins) || GridStackDragDropPlugin;\n        }\n\n        this.dd = new this.opts.ddPlugin(this);\n\n        if (this.opts.rtl === 'auto') {\n            this.opts.rtl = this.container.css('direction') === 'rtl';\n        }\n\n        if (this.opts.rtl) {\n            this.container.addClass('grid-stack-rtl');\n        }\n\n        this.opts.isNested = isNested;\n\n        isAutoCellHeight = this.opts.cellHeight === 'auto';\n        if (isAutoCellHeight) {\n            self.cellHeight(self.cellWidth(), true);\n        } else {\n            this.cellHeight(this.opts.cellHeight, true);\n        }\n        this.verticalMargin(this.opts.verticalMargin, true);\n\n        this.container.addClass(this.opts._class);\n\n        this._setStaticClass();\n\n        if (isNested) {\n            this.container.addClass('grid-stack-nested');\n        }\n\n        this._initStyles();\n\n        this.grid = new GridStackEngine(this.opts.width, function(nodes, detachNode) {\n            detachNode = typeof detachNode === 'undefined' ? true : detachNode;\n            var maxHeight = 0;\n            _.each(nodes, function(n) {\n                if (detachNode && n._id === null) {\n                    if (n.el) {\n                        n.el.remove();\n                    }\n                } else {\n                    n.el\n                        .attr('data-gs-x', n.x)\n                        .attr('data-gs-y', n.y)\n                        .attr('data-gs-width', n.width)\n                        .attr('data-gs-height', n.height);\n                    maxHeight = Math.max(maxHeight, n.y + n.height);\n                }\n            });\n            self._updateStyles(maxHeight + 10);\n        }, this.opts.float, this.opts.height);\n\n        if (this.opts.auto) {\n            var elements = [];\n            var _this = this;\n            this.container.children('.' + this.opts.itemClass + ':not(.' + this.opts.placeholderClass + ')')\n                .each(function(index, el) {\n                el = $(el);\n                elements.push({\n                    el: el,\n                    i: parseInt(el.attr('data-gs-x')) + parseInt(el.attr('data-gs-y')) * _this.opts.width\n                });\n            });\n            _.chain(elements).sortBy(function(x) { return x.i; }).each(function(i) {\n                self._prepareElement(i.el);\n            }).value();\n        }\n\n        this.setAnimation(this.opts.animate);\n\n        this.placeholder = $(\n            '<div class=\"' + this.opts.placeholderClass + ' ' + this.opts.itemClass + '\">' +\n            '<div class=\"placeholder-content\">' + this.opts.placeholderText + '</div></div>').hide();\n\n        this._updateContainerHeight();\n\n        this._updateHeightsOnResize = _.throttle(function() {\n            self.cellHeight(self.cellWidth(), false);\n        }, 100);\n\n        this.onResizeHandler = function() {\n            if (isAutoCellHeight) {\n                self._updateHeightsOnResize();\n            }\n\n            if (self._isOneColumnMode() && !self.opts.disableOneColumnMode) {\n                if (oneColumnMode) {\n                    return;\n                }\n                self.container.addClass(self.opts.oneColumnModeClass);\n                oneColumnMode = true;\n\n                self.grid._sortNodes();\n                _.each(self.grid.nodes, function(node) {\n                    self.container.append(node.el);\n\n                    if (self.opts.staticGrid) {\n                        return;\n                    }\n                    self.dd.draggable(node.el, 'disable');\n                    self.dd.resizable(node.el, 'disable');\n\n                    node.el.trigger('resize');\n                });\n            } else {\n                if (!oneColumnMode) {\n                    return;\n                }\n\n                self.container.removeClass(self.opts.oneColumnModeClass);\n                oneColumnMode = false;\n\n                if (self.opts.staticGrid) {\n                    return;\n                }\n\n                _.each(self.grid.nodes, function(node) {\n                    if (!node.noMove && !self.opts.disableDrag) {\n                        self.dd.draggable(node.el, 'enable');\n                    }\n                    if (!node.noResize && !self.opts.disableResize) {\n                        self.dd.resizable(node.el, 'enable');\n                    }\n\n                    node.el.trigger('resize');\n                });\n            }\n        };\n\n        $(window).resize(this.onResizeHandler);\n        this.onResizeHandler();\n\n        if (!self.opts.staticGrid && typeof self.opts.removable === 'string') {\n            var trashZone = $(self.opts.removable);\n            if (!this.dd.isDroppable(trashZone)) {\n                this.dd.droppable(trashZone, {\n                    accept: '.' + self.opts.itemClass\n                });\n            }\n            this.dd\n                .on(trashZone, 'dropover', function(event, ui) {\n                    var el = $(ui.draggable);\n                    var node = el.data('_gridstack_node');\n                    if (node._grid !== self) {\n                        return;\n                    }\n                    self._setupRemovingTimeout(el);\n                })\n                .on(trashZone, 'dropout', function(event, ui) {\n                    var el = $(ui.draggable);\n                    var node = el.data('_gridstack_node');\n                    if (node._grid !== self) {\n                        return;\n                    }\n                    self._clearRemovingTimeout(el);\n                });\n        }\n\n        if (!self.opts.staticGrid && self.opts.acceptWidgets) {\n            var draggingElement = null;\n\n            var onDrag = function(event, ui) {\n                var el = draggingElement;\n                var node = el.data('_gridstack_node');\n                var pos = self.getCellFromPixel(ui.offset, true);\n                var x = Math.max(0, pos.x);\n                var y = Math.max(0, pos.y);\n                if (!node._added) {\n                    node._added = true;\n\n                    node.el = el;\n                    node.x = x;\n                    node.y = y;\n                    self.grid.cleanNodes();\n                    self.grid.beginUpdate(node);\n                    self.grid.addNode(node);\n\n                    self.container.append(self.placeholder);\n                    self.placeholder\n                        .attr('data-gs-x', node.x)\n                        .attr('data-gs-y', node.y)\n                        .attr('data-gs-width', node.width)\n                        .attr('data-gs-height', node.height)\n                        .show();\n                    node.el = self.placeholder;\n                    node._beforeDragX = node.x;\n                    node._beforeDragY = node.y;\n\n                    self._updateContainerHeight();\n                } else {\n                    if (!self.grid.canMoveNode(node, x, y)) {\n                        return;\n                    }\n                    self.grid.moveNode(node, x, y);\n                    self._updateContainerHeight();\n                }\n            };\n\n            this.dd\n                .droppable(self.container, {\n                    accept: function(el) {\n                        el = $(el);\n                        var node = el.data('_gridstack_node');\n                        if (node && node._grid === self) {\n                            return false;\n                        }\n                        return el.is(self.opts.acceptWidgets === true ? '.grid-stack-item' : self.opts.acceptWidgets);\n                    }\n                })\n                .on(self.container, 'dropover', function(event, ui) {\n                    var offset = self.container.offset();\n                    var el = $(ui.draggable);\n                    var cellWidth = self.cellWidth();\n                    var cellHeight = self.cellHeight();\n                    var origNode = el.data('_gridstack_node');\n\n                    var width = origNode ? origNode.width : (Math.ceil(el.outerWidth() / cellWidth));\n                    var height = origNode ? origNode.height : (Math.ceil(el.outerHeight() / cellHeight));\n\n                    draggingElement = el;\n\n                    var node = self.grid._prepareNode({width: width, height: height, _added: false, _temporary: true});\n                    el.data('_gridstack_node', node);\n                    el.data('_gridstack_node_orig', origNode);\n\n                    el.on('drag', onDrag);\n                })\n                .on(self.container, 'dropout', function(event, ui) {\n                    var el = $(ui.draggable);\n                    el.unbind('drag', onDrag);\n                    var node = el.data('_gridstack_node');\n                    node.el = null;\n                    self.grid.removeNode(node);\n                    self.placeholder.detach();\n                    self._updateContainerHeight();\n                    el.data('_gridstack_node', el.data('_gridstack_node_orig'));\n                })\n                .on(self.container, 'drop', function(event, ui) {\n                    self.placeholder.detach();\n\n                    var node = $(ui.draggable).data('_gridstack_node');\n                    node._grid = self;\n                    var el = $(ui.draggable).clone(false);\n                    el.data('_gridstack_node', node);\n                    var originalNode = $(ui.draggable).data('_gridstack_node_orig');\n                    if (typeof originalNode !== 'undefined') {\n                        originalNode._grid._triggerRemoveEvent();\n                    }\n                    $(ui.draggable).remove();\n                    node.el = el;\n                    self.placeholder.hide();\n                    el\n                        .attr('data-gs-x', node.x)\n                        .attr('data-gs-y', node.y)\n                        .attr('data-gs-width', node.width)\n                        .attr('data-gs-height', node.height)\n                        .addClass(self.opts.itemClass)\n                        .removeAttr('style')\n                        .enableSelection()\n                        .removeData('draggable')\n                        .removeClass('ui-draggable ui-draggable-dragging ui-draggable-disabled')\n                        .unbind('drag', onDrag);\n                    self.container.append(el);\n                    self._prepareElementsByNode(el, node);\n                    self._updateContainerHeight();\n                    self.grid._addedNodes.push(node);\n                    self._triggerAddEvent();\n                    self._triggerChangeEvent();\n\n                    self.grid.endUpdate();\n                });\n        }\n    };\n\n    GridStack.prototype._triggerChangeEvent = function(forceTrigger) {\n        var elements = this.grid.getDirtyNodes();\n        var hasChanges = false;\n\n        var eventParams = [];\n        if (elements && elements.length) {\n            eventParams.push(elements);\n            hasChanges = true;\n        }\n\n        if (hasChanges || forceTrigger === true) {\n            this.container.trigger('change', eventParams);\n        }\n    };\n\n    GridStack.prototype._triggerAddEvent = function() {\n        if (this.grid._addedNodes && this.grid._addedNodes.length > 0) {\n            this.container.trigger('added', [_.map(this.grid._addedNodes, _.clone)]);\n            this.grid._addedNodes = [];\n        }\n    };\n\n    GridStack.prototype._triggerRemoveEvent = function() {\n        if (this.grid._removedNodes && this.grid._removedNodes.length > 0) {\n            this.container.trigger('removed', [_.map(this.grid._removedNodes, _.clone)]);\n            this.grid._removedNodes = [];\n        }\n    };\n\n    GridStack.prototype._initStyles = function() {\n        if (this._stylesId) {\n            Utils.removeStylesheet(this._stylesId);\n        }\n        this._stylesId = 'gridstack-style-' + (Math.random() * 100000).toFixed();\n        this._styles = Utils.createStylesheet(this._stylesId);\n        if (this._styles !== null) {\n            this._styles._max = 0;\n        }\n    };\n\n    GridStack.prototype._updateStyles = function(maxHeight) {\n        if (this._styles === null || typeof this._styles === 'undefined') {\n            return;\n        }\n\n        var prefix = '.' + this.opts._class + ' .' + this.opts.itemClass;\n        var self = this;\n        var getHeight;\n\n        if (typeof maxHeight == 'undefined') {\n            maxHeight = this._styles._max;\n        }\n        this._initStyles();\n        this._updateContainerHeight();\n        if (!this.opts.cellHeight) { // The rest will be handled by CSS\n            return ;\n        }\n        if (this._styles._max !== 0 && maxHeight <= this._styles._max) {\n            return ;\n        }\n\n        if (!this.opts.verticalMargin || this.opts.cellHeightUnit === this.opts.verticalMarginUnit) {\n            getHeight = function(nbRows, nbMargins) {\n                return (self.opts.cellHeight * nbRows + self.opts.verticalMargin * nbMargins) +\n                    self.opts.cellHeightUnit;\n            };\n        } else {\n            getHeight = function(nbRows, nbMargins) {\n                if (!nbRows || !nbMargins) {\n                    return (self.opts.cellHeight * nbRows + self.opts.verticalMargin * nbMargins) +\n                        self.opts.cellHeightUnit;\n                }\n                return 'calc(' + ((self.opts.cellHeight * nbRows) + self.opts.cellHeightUnit) + ' + ' +\n                    ((self.opts.verticalMargin * nbMargins) + self.opts.verticalMarginUnit) + ')';\n            };\n        }\n\n        if (this._styles._max === 0) {\n            Utils.insertCSSRule(this._styles, prefix, 'min-height: ' + getHeight(1, 0) + ';', 0);\n        }\n\n        if (maxHeight > this._styles._max) {\n            for (var i = this._styles._max; i < maxHeight; ++i) {\n                Utils.insertCSSRule(this._styles,\n                    prefix + '[data-gs-height=\"' + (i + 1) + '\"]',\n                    'height: ' + getHeight(i + 1, i) + ';',\n                    i\n                );\n                Utils.insertCSSRule(this._styles,\n                    prefix + '[data-gs-min-height=\"' + (i + 1) + '\"]',\n                    'min-height: ' + getHeight(i + 1, i) + ';',\n                    i\n                );\n                Utils.insertCSSRule(this._styles,\n                    prefix + '[data-gs-max-height=\"' + (i + 1) + '\"]',\n                    'max-height: ' + getHeight(i + 1, i) + ';',\n                    i\n                );\n                Utils.insertCSSRule(this._styles,\n                    prefix + '[data-gs-y=\"' + i + '\"]',\n                    'top: ' + getHeight(i, i) + ';',\n                    i\n                );\n            }\n            this._styles._max = maxHeight;\n        }\n    };\n\n    GridStack.prototype._updateContainerHeight = function() {\n        if (this.grid._updateCounter) {\n            return;\n        }\n        var height = this.grid.getGridHeight();\n        this.container.attr('data-gs-current-height', height);\n        if (!this.opts.cellHeight) {\n            return ;\n        }\n        if (!this.opts.verticalMargin) {\n            this.container.css('height', (height * (this.opts.cellHeight)) + this.opts.cellHeightUnit);\n        } else if (this.opts.cellHeightUnit === this.opts.verticalMarginUnit) {\n            this.container.css('height', (height * (this.opts.cellHeight + this.opts.verticalMargin) -\n                this.opts.verticalMargin) + this.opts.cellHeightUnit);\n        } else {\n            this.container.css('height', 'calc(' + ((height * (this.opts.cellHeight)) + this.opts.cellHeightUnit) +\n                ' + ' + ((height * (this.opts.verticalMargin - 1)) + this.opts.verticalMarginUnit) + ')');\n        }\n    };\n\n    GridStack.prototype._isOneColumnMode = function() {\n        return (window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth) <=\n            this.opts.minWidth;\n    };\n\n    GridStack.prototype._setupRemovingTimeout = function(el) {\n        var self = this;\n        var node = $(el).data('_gridstack_node');\n\n        if (node._removeTimeout || !self.opts.removable) {\n            return;\n        }\n        node._removeTimeout = setTimeout(function() {\n            el.addClass('grid-stack-item-removing');\n            node._isAboutToRemove = true;\n        }, self.opts.removeTimeout);\n    };\n\n    GridStack.prototype._clearRemovingTimeout = function(el) {\n        var node = $(el).data('_gridstack_node');\n\n        if (!node._removeTimeout) {\n            return;\n        }\n        clearTimeout(node._removeTimeout);\n        node._removeTimeout = null;\n        el.removeClass('grid-stack-item-removing');\n        node._isAboutToRemove = false;\n    };\n\n    GridStack.prototype._prepareElementsByNode = function(el, node) {\n        var self = this;\n\n        var cellWidth;\n        var cellHeight;\n\n        var dragOrResize = function(event, ui) {\n            var x = Math.round(ui.position.left / cellWidth);\n            var y = Math.floor((ui.position.top + cellHeight / 2) / cellHeight);\n            var width;\n            var height;\n\n            if (event.type != 'drag') {\n                width = Math.round(ui.size.width / cellWidth);\n                height = Math.round(ui.size.height / cellHeight);\n            }\n\n            if (event.type == 'drag') {\n                if (x < 0 || x >= self.grid.width || y < 0 || (!self.grid.float && y > self.grid.getGridHeight())) {\n                    if (!node._temporaryRemoved) {\n                        if (self.opts.removable === true) {\n                            self._setupRemovingTimeout(el);\n                        }\n\n                        x = node._beforeDragX;\n                        y = node._beforeDragY;\n\n                        self.placeholder.detach();\n                        self.placeholder.hide();\n                        self.grid.removeNode(node);\n                        self._updateContainerHeight();\n\n                        node._temporaryRemoved = true;\n                    }\n                } else {\n                    self._clearRemovingTimeout(el);\n\n                    if (node._temporaryRemoved) {\n                        self.grid.addNode(node);\n                        self.placeholder\n                            .attr('data-gs-x', x)\n                            .attr('data-gs-y', y)\n                            .attr('data-gs-width', width)\n                            .attr('data-gs-height', height)\n                            .show();\n                        self.container.append(self.placeholder);\n                        node.el = self.placeholder;\n                        node._temporaryRemoved = false;\n                    }\n                }\n            } else if (event.type == 'resize')  {\n                if (x < 0) {\n                    return;\n                }\n            }\n            // width and height are undefined if not resizing\n            var lastTriedWidth = typeof width !== 'undefined' ? width : node.lastTriedWidth;\n            var lastTriedHeight = typeof height !== 'undefined' ? height : node.lastTriedHeight;\n            if (!self.grid.canMoveNode(node, x, y, width, height) ||\n                (node.lastTriedX === x && node.lastTriedY === y &&\n                node.lastTriedWidth === lastTriedWidth && node.lastTriedHeight === lastTriedHeight)) {\n                return;\n            }\n            node.lastTriedX = x;\n            node.lastTriedY = y;\n            node.lastTriedWidth = width;\n            node.lastTriedHeight = height;\n            self.grid.moveNode(node, x, y, width, height);\n            self._updateContainerHeight();\n        };\n\n        var onStartMoving = function(event, ui) {\n            self.container.append(self.placeholder);\n            var o = $(this);\n            self.grid.cleanNodes();\n            self.grid.beginUpdate(node);\n            cellWidth = self.cellWidth();\n            var strictCellHeight = Math.ceil(o.outerHeight() / o.attr('data-gs-height'));\n            cellHeight = self.container.height() / parseInt(self.container.attr('data-gs-current-height'));\n            self.placeholder\n                .attr('data-gs-x', o.attr('data-gs-x'))\n                .attr('data-gs-y', o.attr('data-gs-y'))\n                .attr('data-gs-width', o.attr('data-gs-width'))\n                .attr('data-gs-height', o.attr('data-gs-height'))\n                .show();\n            node.el = self.placeholder;\n            node._beforeDragX = node.x;\n            node._beforeDragY = node.y;\n\n            self.dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minWidth || 1));\n            self.dd.resizable(el, 'option', 'minHeight', strictCellHeight * (node.minHeight || 1));\n\n            if (event.type == 'resizestart') {\n                o.find('.grid-stack-item').trigger('resizestart');\n            }\n        };\n\n        var onEndMoving = function(event, ui) {\n            var o = $(this);\n            if (!o.data('_gridstack_node')) {\n                return;\n            }\n\n            var forceNotify = false;\n            self.placeholder.detach();\n            node.el = o;\n            self.placeholder.hide();\n\n            if (node._isAboutToRemove) {\n                forceNotify = true;\n                var gridToNotify = el.data('_gridstack_node')._grid;\n                gridToNotify._triggerRemoveEvent();\n                el.removeData('_gridstack_node');\n                el.remove();\n            } else {\n                self._clearRemovingTimeout(el);\n                if (!node._temporaryRemoved) {\n                    o\n                        .attr('data-gs-x', node.x)\n                        .attr('data-gs-y', node.y)\n                        .attr('data-gs-width', node.width)\n                        .attr('data-gs-height', node.height)\n                        .removeAttr('style');\n                } else {\n                    o\n                        .attr('data-gs-x', node._beforeDragX)\n                        .attr('data-gs-y', node._beforeDragY)\n                        .attr('data-gs-width', node.width)\n                        .attr('data-gs-height', node.height)\n                        .removeAttr('style');\n                    node.x = node._beforeDragX;\n                    node.y = node._beforeDragY;\n                    self.grid.addNode(node);\n                }\n            }\n            self._updateContainerHeight();\n            self._triggerChangeEvent(forceNotify);\n\n            self.grid.endUpdate();\n\n            var nestedGrids = o.find('.grid-stack');\n            if (nestedGrids.length && event.type == 'resizestop') {\n                nestedGrids.each(function(index, el) {\n                    $(el).data('gridstack').onResizeHandler();\n                });\n                o.find('.grid-stack-item').trigger('resizestop');\n                o.find('.grid-stack-item').trigger('gsresizestop');\n            }\n            if (event.type == 'resizestop') {\n                self.container.trigger('gsresizestop', o);\n            }\n        };\n\n        this.dd\n            .draggable(el, {\n                start: onStartMoving,\n                stop: onEndMoving,\n                drag: dragOrResize\n            })\n            .resizable(el, {\n                start: onStartMoving,\n                stop: onEndMoving,\n                resize: dragOrResize\n            });\n\n        if (node.noMove || (this._isOneColumnMode() && !self.opts.disableOneColumnMode) || this.opts.disableDrag) {\n            this.dd.draggable(el, 'disable');\n        }\n\n        if (node.noResize || (this._isOneColumnMode() && !self.opts.disableOneColumnMode) || this.opts.disableResize) {\n            this.dd.resizable(el, 'disable');\n        }\n\n        el.attr('data-gs-locked', node.locked ? 'yes' : null);\n    };\n\n    GridStack.prototype._prepareElement = function(el, triggerAddEvent) {\n        triggerAddEvent = typeof triggerAddEvent != 'undefined' ? triggerAddEvent : false;\n        var self = this;\n        el = $(el);\n\n        el.addClass(this.opts.itemClass);\n        var node = self.grid.addNode({\n            x: el.attr('data-gs-x'),\n            y: el.attr('data-gs-y'),\n            width: el.attr('data-gs-width'),\n            height: el.attr('data-gs-height'),\n            maxWidth: el.attr('data-gs-max-width'),\n            minWidth: el.attr('data-gs-min-width'),\n            maxHeight: el.attr('data-gs-max-height'),\n            minHeight: el.attr('data-gs-min-height'),\n            autoPosition: Utils.toBool(el.attr('data-gs-auto-position')),\n            noResize: Utils.toBool(el.attr('data-gs-no-resize')),\n            noMove: Utils.toBool(el.attr('data-gs-no-move')),\n            locked: Utils.toBool(el.attr('data-gs-locked')),\n            el: el,\n            id: el.attr('data-gs-id'),\n            _grid: self\n        }, triggerAddEvent);\n        el.data('_gridstack_node', node);\n\n        this._prepareElementsByNode(el, node);\n    };\n\n    GridStack.prototype.setAnimation = function(enable) {\n        if (enable) {\n            this.container.addClass('grid-stack-animate');\n        } else {\n            this.container.removeClass('grid-stack-animate');\n        }\n    };\n\n    GridStack.prototype.addWidget = function(el, x, y, width, height, autoPosition, minWidth, maxWidth,\n        minHeight, maxHeight, id) {\n        el = $(el);\n        if (typeof x != 'undefined') { el.attr('data-gs-x', x); }\n        if (typeof y != 'undefined') { el.attr('data-gs-y', y); }\n        if (typeof width != 'undefined') { el.attr('data-gs-width', width); }\n        if (typeof height != 'undefined') { el.attr('data-gs-height', height); }\n        if (typeof autoPosition != 'undefined') { el.attr('data-gs-auto-position', autoPosition ? 'yes' : null); }\n        if (typeof minWidth != 'undefined') { el.attr('data-gs-min-width', minWidth); }\n        if (typeof maxWidth != 'undefined') { el.attr('data-gs-max-width', maxWidth); }\n        if (typeof minHeight != 'undefined') { el.attr('data-gs-min-height', minHeight); }\n        if (typeof maxHeight != 'undefined') { el.attr('data-gs-max-height', maxHeight); }\n        if (typeof id != 'undefined') { el.attr('data-gs-id', id); }\n        this.container.append(el);\n        this._prepareElement(el, true);\n        this._triggerAddEvent();\n        this._updateContainerHeight();\n        this._triggerChangeEvent(true);\n\n        return el;\n    };\n\n    GridStack.prototype.makeWidget = function(el) {\n        el = $(el);\n        this._prepareElement(el, true);\n        this._triggerAddEvent();\n        this._updateContainerHeight();\n        this._triggerChangeEvent(true);\n\n        return el;\n    };\n\n    GridStack.prototype.willItFit = function(x, y, width, height, autoPosition) {\n        var node = {x: x, y: y, width: width, height: height, autoPosition: autoPosition};\n        return this.grid.canBePlacedWithRespectToHeight(node);\n    };\n\n    GridStack.prototype.removeWidget = function(el, detachNode) {\n        detachNode = typeof detachNode === 'undefined' ? true : detachNode;\n        el = $(el);\n        var node = el.data('_gridstack_node');\n\n        // For Meteor support: https://github.com/troolee/gridstack.js/pull/272\n        if (!node) {\n            node = this.grid.getNodeDataByDOMEl(el);\n        }\n\n        this.grid.removeNode(node, detachNode);\n        el.removeData('_gridstack_node');\n        this._updateContainerHeight();\n        if (detachNode) {\n            el.remove();\n        }\n        this._triggerChangeEvent(true);\n        this._triggerRemoveEvent();\n    };\n\n    GridStack.prototype.removeAll = function(detachNode) {\n        _.each(this.grid.nodes, _.bind(function(node) {\n            this.removeWidget(node.el, detachNode);\n        }, this));\n        this.grid.nodes = [];\n        this._updateContainerHeight();\n    };\n\n    GridStack.prototype.destroy = function(detachGrid) {\n        $(window).off('resize', this.onResizeHandler);\n        this.disable();\n        if (typeof detachGrid != 'undefined' && !detachGrid) {\n            this.removeAll(false);\n            this.container.removeData('gridstack');\n        } else {\n            this.container.remove();\n        }\n        Utils.removeStylesheet(this._stylesId);\n        if (this.grid) {\n            this.grid = null;\n        }\n    };\n\n    GridStack.prototype.resizable = function(el, val) {\n        var self = this;\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node == 'undefined' || node === null) {\n                return;\n            }\n\n            node.noResize = !(val || false);\n            if (node.noResize || (self._isOneColumnMode() && !self.opts.disableOneColumnMode)) {\n                self.dd.resizable(el, 'disable');\n            } else {\n                self.dd.resizable(el, 'enable');\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype.movable = function(el, val) {\n        var self = this;\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node == 'undefined' || node === null) {\n                return;\n            }\n\n            node.noMove = !(val || false);\n            if (node.noMove || (self._isOneColumnMode() && !self.opts.disableOneColumnMode)) {\n                self.dd.draggable(el, 'disable');\n                el.removeClass('ui-draggable-handle');\n            } else {\n                self.dd.draggable(el, 'enable');\n                el.addClass('ui-draggable-handle');\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype.enableMove = function(doEnable, includeNewWidgets) {\n        this.movable(this.container.children('.' + this.opts.itemClass), doEnable);\n        if (includeNewWidgets) {\n            this.opts.disableDrag = !doEnable;\n        }\n    };\n\n    GridStack.prototype.enableResize = function(doEnable, includeNewWidgets) {\n        this.resizable(this.container.children('.' + this.opts.itemClass), doEnable);\n        if (includeNewWidgets) {\n            this.opts.disableResize = !doEnable;\n        }\n    };\n\n    GridStack.prototype.disable = function() {\n        this.movable(this.container.children('.' + this.opts.itemClass), false);\n        this.resizable(this.container.children('.' + this.opts.itemClass), false);\n        this.container.trigger('disable');\n    };\n\n    GridStack.prototype.enable = function() {\n        this.movable(this.container.children('.' + this.opts.itemClass), true);\n        this.resizable(this.container.children('.' + this.opts.itemClass), true);\n        this.container.trigger('enable');\n    };\n\n    GridStack.prototype.locked = function(el, val) {\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node == 'undefined' || node === null) {\n                return;\n            }\n\n            node.locked = (val || false);\n            el.attr('data-gs-locked', node.locked ? 'yes' : null);\n        });\n        return this;\n    };\n\n    GridStack.prototype.maxHeight = function(el, val) {\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node === 'undefined' || node === null) {\n                return;\n            }\n\n            if (!isNaN(val)) {\n                node.maxHeight = (val || false);\n                el.attr('data-gs-max-height', val);\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype.minHeight = function(el, val) {\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node === 'undefined' || node === null) {\n                return;\n            }\n\n            if (!isNaN(val)) {\n                node.minHeight = (val || false);\n                el.attr('data-gs-min-height', val);\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype.maxWidth = function(el, val) {\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node === 'undefined' || node === null) {\n                return;\n            }\n\n            if (!isNaN(val)) {\n                node.maxWidth = (val || false);\n                el.attr('data-gs-max-width', val);\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype.minWidth = function(el, val) {\n        el = $(el);\n        el.each(function(index, el) {\n            el = $(el);\n            var node = el.data('_gridstack_node');\n            if (typeof node === 'undefined' || node === null) {\n                return;\n            }\n\n            if (!isNaN(val)) {\n                node.minWidth = (val || false);\n                el.attr('data-gs-min-width', val);\n            }\n        });\n        return this;\n    };\n\n    GridStack.prototype._updateElement = function(el, callback) {\n        el = $(el).first();\n        var node = el.data('_gridstack_node');\n        if (typeof node == 'undefined' || node === null) {\n            return;\n        }\n\n        var self = this;\n\n        self.grid.cleanNodes();\n        self.grid.beginUpdate(node);\n\n        callback.call(this, el, node);\n\n        self._updateContainerHeight();\n        self._triggerChangeEvent();\n\n        self.grid.endUpdate();\n    };\n\n    GridStack.prototype.resize = function(el, width, height) {\n        this._updateElement(el, function(el, node) {\n            width = (width !== null && typeof width != 'undefined') ? width : node.width;\n            height = (height !== null && typeof height != 'undefined') ? height : node.height;\n\n            this.grid.moveNode(node, node.x, node.y, width, height);\n        });\n    };\n\n    GridStack.prototype.move = function(el, x, y) {\n        this._updateElement(el, function(el, node) {\n            x = (x !== null && typeof x != 'undefined') ? x : node.x;\n            y = (y !== null && typeof y != 'undefined') ? y : node.y;\n\n            this.grid.moveNode(node, x, y, node.width, node.height);\n        });\n    };\n\n    GridStack.prototype.update = function(el, x, y, width, height) {\n        this._updateElement(el, function(el, node) {\n            x = (x !== null && typeof x != 'undefined') ? x : node.x;\n            y = (y !== null && typeof y != 'undefined') ? y : node.y;\n            width = (width !== null && typeof width != 'undefined') ? width : node.width;\n            height = (height !== null && typeof height != 'undefined') ? height : node.height;\n\n            this.grid.moveNode(node, x, y, width, height);\n        });\n    };\n\n    GridStack.prototype.verticalMargin = function(val, noUpdate) {\n        if (typeof val == 'undefined') {\n            return this.opts.verticalMargin;\n        }\n\n        var heightData = Utils.parseHeight(val);\n\n        if (this.opts.verticalMarginUnit === heightData.unit && this.opts.height === heightData.height) {\n            return ;\n        }\n        this.opts.verticalMarginUnit = heightData.unit;\n        this.opts.verticalMargin = heightData.height;\n\n        if (!noUpdate) {\n            this._updateStyles();\n        }\n    };\n\n    GridStack.prototype.cellHeight = function(val, noUpdate) {\n        if (typeof val == 'undefined') {\n            if (this.opts.cellHeight) {\n                return this.opts.cellHeight;\n            }\n            var o = this.container.children('.' + this.opts.itemClass).first();\n            return Math.ceil(o.outerHeight() / o.attr('data-gs-height'));\n        }\n        var heightData = Utils.parseHeight(val);\n\n        if (this.opts.cellHeightUnit === heightData.heightUnit && this.opts.height === heightData.height) {\n            return ;\n        }\n        this.opts.cellHeightUnit = heightData.unit;\n        this.opts.cellHeight = heightData.height;\n\n        if (!noUpdate) {\n            this._updateStyles();\n        }\n\n    };\n\n    GridStack.prototype.cellWidth = function() {\n        return Math.round(this.container.outerWidth() / this.opts.width);\n    };\n\n    GridStack.prototype.getCellFromPixel = function(position, useOffset) {\n        var containerPos = (typeof useOffset != 'undefined' && useOffset) ?\n            this.container.offset() : this.container.position();\n        var relativeLeft = position.left - containerPos.left;\n        var relativeTop = position.top - containerPos.top;\n\n        var columnWidth = Math.floor(this.container.width() / this.opts.width);\n        var rowHeight = Math.floor(this.container.height() / parseInt(this.container.attr('data-gs-current-height')));\n\n        return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\n    };\n\n    GridStack.prototype.batchUpdate = function() {\n        this.grid.batchUpdate();\n    };\n\n    GridStack.prototype.commit = function() {\n        this.grid.commit();\n        this._updateContainerHeight();\n    };\n\n    GridStack.prototype.isAreaEmpty = function(x, y, width, height) {\n        return this.grid.isAreaEmpty(x, y, width, height);\n    };\n\n    GridStack.prototype.setStatic = function(staticValue) {\n        this.opts.staticGrid = (staticValue === true);\n        this.enableMove(!staticValue);\n        this.enableResize(!staticValue);\n        this._setStaticClass();\n    };\n\n    GridStack.prototype._setStaticClass = function() {\n        var staticClassName = 'grid-stack-static';\n\n        if (this.opts.staticGrid === true) {\n            this.container.addClass(staticClassName);\n        } else {\n            this.container.removeClass(staticClassName);\n        }\n    };\n\n    GridStack.prototype._updateNodeWidths = function(oldWidth, newWidth) {\n        this.grid._sortNodes();\n        this.grid.batchUpdate();\n        var node = {};\n        for (var i = 0; i < this.grid.nodes.length; i++) {\n            node = this.grid.nodes[i];\n            this.update(node.el, Math.round(node.x * newWidth / oldWidth), undefined,\n                Math.round(node.width * newWidth / oldWidth), undefined);\n        }\n        this.grid.commit();\n    };\n\n    GridStack.prototype.setGridWidth = function(gridWidth,doNotPropagate) {\n        this.container.removeClass('grid-stack-' + this.opts.width);\n        if (doNotPropagate !== true) {\n            this._updateNodeWidths(this.opts.width, gridWidth);\n        }\n        this.opts.width = gridWidth;\n        this.grid.width = gridWidth;\n        this.container.addClass('grid-stack-' + gridWidth);\n    };\n\n    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n    GridStackEngine.prototype.batch_update = obsolete(GridStackEngine.prototype.batchUpdate);\n    GridStackEngine.prototype._fix_collisions = obsolete(GridStackEngine.prototype._fixCollisions,\n        '_fix_collisions', '_fixCollisions');\n    GridStackEngine.prototype.is_area_empty = obsolete(GridStackEngine.prototype.isAreaEmpty,\n        'is_area_empty', 'isAreaEmpty');\n    GridStackEngine.prototype._sort_nodes = obsolete(GridStackEngine.prototype._sortNodes,\n        '_sort_nodes', '_sortNodes');\n    GridStackEngine.prototype._pack_nodes = obsolete(GridStackEngine.prototype._packNodes,\n        '_pack_nodes', '_packNodes');\n    GridStackEngine.prototype._prepare_node = obsolete(GridStackEngine.prototype._prepareNode,\n        '_prepare_node', '_prepareNode');\n    GridStackEngine.prototype.clean_nodes = obsolete(GridStackEngine.prototype.cleanNodes,\n        'clean_nodes', 'cleanNodes');\n    GridStackEngine.prototype.get_dirty_nodes = obsolete(GridStackEngine.prototype.getDirtyNodes,\n        'get_dirty_nodes', 'getDirtyNodes');\n    GridStackEngine.prototype.add_node = obsolete(GridStackEngine.prototype.addNode,\n        'add_node', 'addNode, ');\n    GridStackEngine.prototype.remove_node = obsolete(GridStackEngine.prototype.removeNode,\n        'remove_node', 'removeNode');\n    GridStackEngine.prototype.can_move_node = obsolete(GridStackEngine.prototype.canMoveNode,\n        'can_move_node', 'canMoveNode');\n    GridStackEngine.prototype.move_node = obsolete(GridStackEngine.prototype.moveNode,\n        'move_node', 'moveNode');\n    GridStackEngine.prototype.get_grid_height = obsolete(GridStackEngine.prototype.getGridHeight,\n        'get_grid_height', 'getGridHeight');\n    GridStackEngine.prototype.begin_update = obsolete(GridStackEngine.prototype.beginUpdate,\n        'begin_update', 'beginUpdate');\n    GridStackEngine.prototype.end_update = obsolete(GridStackEngine.prototype.endUpdate,\n        'end_update', 'endUpdate');\n    GridStackEngine.prototype.can_be_placed_with_respect_to_height =\n        obsolete(GridStackEngine.prototype.canBePlacedWithRespectToHeight,\n        'can_be_placed_with_respect_to_height', 'canBePlacedWithRespectToHeight');\n    GridStack.prototype._trigger_change_event = obsolete(GridStack.prototype._triggerChangeEvent,\n        '_trigger_change_event', '_triggerChangeEvent');\n    GridStack.prototype._init_styles = obsolete(GridStack.prototype._initStyles,\n        '_init_styles', '_initStyles');\n    GridStack.prototype._update_styles = obsolete(GridStack.prototype._updateStyles,\n        '_update_styles', '_updateStyles');\n    GridStack.prototype._update_container_height = obsolete(GridStack.prototype._updateContainerHeight,\n        '_update_container_height', '_updateContainerHeight');\n    GridStack.prototype._is_one_column_mode = obsolete(GridStack.prototype._isOneColumnMode,\n        '_is_one_column_mode','_isOneColumnMode');\n    GridStack.prototype._prepare_element = obsolete(GridStack.prototype._prepareElement,\n        '_prepare_element', '_prepareElement');\n    GridStack.prototype.set_animation = obsolete(GridStack.prototype.setAnimation,\n        'set_animation', 'setAnimation');\n    GridStack.prototype.add_widget = obsolete(GridStack.prototype.addWidget,\n        'add_widget', 'addWidget');\n    GridStack.prototype.make_widget = obsolete(GridStack.prototype.makeWidget,\n        'make_widget', 'makeWidget');\n    GridStack.prototype.will_it_fit = obsolete(GridStack.prototype.willItFit,\n        'will_it_fit', 'willItFit');\n    GridStack.prototype.remove_widget = obsolete(GridStack.prototype.removeWidget,\n        'remove_widget', 'removeWidget');\n    GridStack.prototype.remove_all = obsolete(GridStack.prototype.removeAll,\n        'remove_all', 'removeAll');\n    GridStack.prototype.min_height = obsolete(GridStack.prototype.minHeight,\n        'min_height', 'minHeight');\n    GridStack.prototype.min_width = obsolete(GridStack.prototype.minWidth,\n        'min_width', 'minWidth');\n    GridStack.prototype._update_element = obsolete(GridStack.prototype._updateElement,\n        '_update_element', '_updateElement');\n    GridStack.prototype.cell_height = obsolete(GridStack.prototype.cellHeight,\n        'cell_height', 'cellHeight');\n    GridStack.prototype.cell_width = obsolete(GridStack.prototype.cellWidth,\n        'cell_width', 'cellWidth');\n    GridStack.prototype.get_cell_from_pixel = obsolete(GridStack.prototype.getCellFromPixel,\n        'get_cell_from_pixel', 'getCellFromPixel');\n    GridStack.prototype.batch_update = obsolete(GridStack.prototype.batchUpdate,\n        'batch_update', 'batchUpdate');\n    GridStack.prototype.is_area_empty = obsolete(GridStack.prototype.isAreaEmpty,\n        'is_area_empty', 'isAreaEmpty');\n    GridStack.prototype.set_static = obsolete(GridStack.prototype.setStatic,\n        'set_static', 'setStatic');\n    GridStack.prototype._set_static_class = obsolete(GridStack.prototype._setStaticClass,\n        '_set_static_class', '_setStaticClass');\n    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n    scope.GridStackUI = GridStack;\n\n    scope.GridStackUI.Utils = Utils;\n    scope.GridStackUI.Engine = GridStackEngine;\n    scope.GridStackUI.GridStackDragDropPlugin = GridStackDragDropPlugin;\n\n    $.fn.gridstack = function(opts) {\n        return this.each(function() {\n            var o = $(this);\n            if (!o.data('gridstack')) {\n                o\n                    .data('gridstack', new GridStack(this, opts));\n            }\n        });\n    };\n\n    return scope.GridStackUI;\n});\n","/**\n * gridstack.js 0.3.0\n * http://troolee.github.io/gridstack.js/\n * (c) 2014-2016 Pavel Reznikov, Dylan Weiss\n * gridstack.js may be freely distributed under the MIT license.\n * @preserve\n*/\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery', 'lodash', 'gridstack', 'jquery-ui/data', 'jquery-ui/disable-selection', 'jquery-ui/focusable',\n            'jquery-ui/form', 'jquery-ui/ie', 'jquery-ui/keycode', 'jquery-ui/labels', 'jquery-ui/jquery-1-7',\n            'jquery-ui/plugin', 'jquery-ui/safe-active-element', 'jquery-ui/safe-blur', 'jquery-ui/scroll-parent',\n            'jquery-ui/tabbable', 'jquery-ui/unique-id', 'jquery-ui/version', 'jquery-ui/widget',\n            'jquery-ui/widgets/mouse', 'jquery-ui/widgets/draggable', 'jquery-ui/widgets/droppable',\n            'jquery-ui/widgets/resizable'], factory);\n    } else if (typeof exports !== 'undefined') {\n        try { jQuery = require('jquery'); } catch (e) {}\n        try { _ = require('lodash'); } catch (e) {}\n        try { GridStackUI = require('gridstack'); } catch (e) {}\n        factory(jQuery, _, GridStackUI);\n    } else {\n        factory(jQuery, _, GridStackUI);\n    }\n})(function($, _, GridStackUI) {\n\n    var scope = window;\n\n    /**\n    * @class JQueryUIGridStackDragDropPlugin\n    * jQuery UI implementation of drag'n'drop gridstack plugin.\n    */\n    function JQueryUIGridStackDragDropPlugin(grid) {\n        GridStackUI.GridStackDragDropPlugin.call(this, grid);\n    }\n\n    GridStackUI.GridStackDragDropPlugin.registerPlugin(JQueryUIGridStackDragDropPlugin);\n\n    JQueryUIGridStackDragDropPlugin.prototype = Object.create(GridStackUI.GridStackDragDropPlugin.prototype);\n    JQueryUIGridStackDragDropPlugin.prototype.constructor = JQueryUIGridStackDragDropPlugin;\n\n    JQueryUIGridStackDragDropPlugin.prototype.resizable = function(el, opts) {\n        el = $(el);\n        if (opts === 'disable' || opts === 'enable') {\n            el.resizable(opts);\n        } else if (opts === 'option') {\n            var key = arguments[2];\n            var value = arguments[3];\n            el.resizable(opts, key, value);\n        } else {\n            el.resizable(_.extend({}, this.grid.opts.resizable, {\n                start: opts.start || function() {},\n                stop: opts.stop || function() {},\n                resize: opts.resize || function() {}\n            }));\n        }\n        return this;\n    };\n\n    JQueryUIGridStackDragDropPlugin.prototype.draggable = function(el, opts) {\n        el = $(el);\n        if (opts === 'disable' || opts === 'enable') {\n            el.draggable(opts);\n        } else {\n            el.draggable(_.extend({}, this.grid.opts.draggable, {\n                containment: this.grid.opts.isNested ? this.grid.container.parent() : null,\n                start: opts.start || function() {},\n                stop: opts.stop || function() {},\n                drag: opts.drag || function() {}\n            }));\n        }\n        return this;\n    };\n\n    JQueryUIGridStackDragDropPlugin.prototype.droppable = function(el, opts) {\n        el = $(el);\n        if (opts === 'disable' || opts === 'enable') {\n            el.droppable(opts);\n        } else {\n            el.droppable({\n                accept: opts.accept\n            });\n        }\n        return this;\n    };\n\n    JQueryUIGridStackDragDropPlugin.prototype.isDroppable = function(el, opts) {\n        el = $(el);\n        return Boolean(el.data('droppable'));\n    };\n\n    JQueryUIGridStackDragDropPlugin.prototype.on = function(el, eventName, callback) {\n        $(el).on(eventName, callback);\n        return this;\n    };\n\n    return JQueryUIGridStackDragDropPlugin;\n});\n"],"sourceRoot":""}